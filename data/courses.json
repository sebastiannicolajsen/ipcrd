{
  "content-type-enums": [
    "A",
    "B",
    "AB"
  ],
  "grade-enums": [
    "boolean",
    "point",
    "unknown"
  ],
  "courses": [
    {
      "internal_id": 5,
      "code": "BSINDSP1KU",
      "name": "Introduction to Data Science and Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Analyse a problem, with an aim to construct a short program in Python script to solve it.",
          "Design a program (given an analysis).",
          "Implement a program (given a design).",
          "Test the program (including explaining whether it works as desired, and measuring to what degree the testing supports such conclusions).",
          "Apply basic Python constructions.",
          "Evaluate and explain whether or how a basic Python construction is appropriate to solve a problem.",
          "Describe what a data science project is.",
          "Prepare data for a data science analysis.",
          "Create and explain basic statistical and visual summaries for datasets.",
          "Assess basic probabilities for events.",
          "Create and explain basic data science analyses (basic machine learning and basic network analysis).",
          "Describe and apply formal definitions, and construct induction proofs.",
          "reflect on and apply basic data structures for data science"
        ],
        "contents": [
          "Computer fundamentals",
          "Problem analysis, program design and implementation",
          "Python programming: Simple data types, methods, fields, variables, expressions, Objects, special Python objects (Strings, Lists, Files)",
          "classes and class design, object-oriented design (object-oriented concepts: encapsulation, polymorphism, inheritance)",
          "Basic logic and its relation to Boolean types and operations, decision structures",
          "Loop structures",
          "Data collections",
          "Algorithm design and recursion",
          "Testing and documentation",
          "Foundational maths for programming and Data Science: Basic formal reasoning (basic first order logic, set theory, sequences and sums), Basic probabilities, Induction and recursion, Basic graph theory",
          "Introductory Data Science: Basic statistical and visual summaries and basic reporting, Data curation and preparation for analysis, Basic Machine Learning, Basic definitions of graph theory and basic Network Analysis, Big data and distributed computing"
        ]
      },
      "size": 15,
      "time": {
        "absolute": false,
        "lectures": 0.2,
        "preparation": 0.1,
        "exercises": 0.2,
        "assignments": 0.3,
        "exam": 0.3,
        "total": 1
      },
      "mandatory_activities": [
        "a maximum of 12 mandatory homework assignments",
        "a minimum of 1 and a maximum of 2 short coding tests on premises"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "A: Written exam on premises",
        "grading": "point",
        "aids": "books and notes"
      },
      "education_ids": [
        0
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 8,
      "code": "MSNDAKIB1233",
      "name": "AI-programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Kendskab til grundlæggende programmering",
          "Viden om grundlæggende objektorienteret programmering",
          "Viden om implementering af AI-algoritmer"
        ],
        "skills": [
          "Anvende et programmeringsmiljø til at implementere og teste AI-algoritmer",
          "Teste programmer ved hjælp af unit testing",
          "Implementere simple matematiske algoritmer i software"
        ],
        "competencies": [
          "Designe og implementere simple AI-systemer, der kan træffe simple beslutninger på baggrund af indlæst og analyseret data"
        ],
        "contents": "unknown"
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Mundtlig pba. projekt",
        "grading": "point",
        "aids": "restricted"
      },
      "education_ids": [
        1
      ],
      "extended_description": "Kursets mål er at introducere de studerende til programmering af basale AI-systemer. Kurset indeholder således introduktion til et specifikt programmeringssprog, fx Python, og specifikke begreber som kontrolstrukturer, abstraktion med procedurer og funktioner, datastrukturer, fil input-output samt implementering og reproducerbarhed af AI algoritmer. Kursets indhold sættes i sammenhæng med de beskrevne metoder i kurset Introduktion til AI."
    },
    {
      "internal_id": 11.1,
      "code": "62194",
      "name": "Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Develop a simple objectoriented program.",
          "Read and describe an objectoriented program.",
          "Read and develop basic UML diagrams.",
          "Have experience with installation and configuration of software development tools.",
          "Understand the relation between program and computer.",
          "Use the terms of the academic discipline.",
          "Communicate within the discipline object oriented software.",
          "Work in a group on analysis, design, and implementation of a program."
        ],
        "contents": [
          "The students will learn structured and object oriented programming by programming LEGO Mindstorms robots as well as PCs. The students will work with: installation of software, crossplatform development, different operating systems such as Windows and Linux, the organization and programs use of RAM ",
          "During programming students will learn to use: controll structures, conditions, and loops, classes and objects, user defined classes, variables and datatypes, text strings, arrays and lists, methods, parameters, and return values, console input/output, read and write text files, the structure of object orientated programs, programs with several source files, an IDE for program development",
          "By developing their own robots and programs students learn: to analyze, design, and implement software systems, to use common UML diagrams, to describe IT systems in words and writing",
          "By building the LEGO robots students learn about: what robots can be used for, motors that enables robots to move, different sensors providing robots with input, quality of sensors and handling of sensor data, communication between PC and robot, external factors that might influence robot operation, autonomes robots"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "evaluation of exercises/reports",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        2
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 22.1,
      "code": "02318",
      "name": "Elementary Programming for Diplom-E",
      "contents": {
        "type": "A",
        "objectives": [
          "work with ordinary data types and declare variables",
          "use selections: if-, if-else- and switch-statements",
          "use loops: while-, do-while- and for-statements and tell about recursion",
          "prepare functions with arguments: call by value and call by reference",
          "use standard I/O (keyboard and display) as well as text files",
          "use structured data types: arrays with 1- and 2-dimensions and structs",
          "use hardware simple near programming",
          "use pointers in relations to the arrays",
          "use the data structure: stack",
          "perform tests of programs",
          "use flowchart and module diagrams as documentation of programs",
          "participate and cooperate in small groups to solve a specific task"
        ],
        "contents": [
          "Program structure: From pseudo code through data-flow diagrams to modules, functions parameter transfer, loops and selections. I/O: Display, keyboard, and files. Simple search and sorting. At the end of the course, you are supposed to make an application for the 1. semester CDIO-Project"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "none",
        "type": "Written examination and reports",
        "grading": "point",
        "aids": "written works of reference are permitted : Electronic aids are not allowed"
      },
      "education_ids": [
        3,
        6
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 22.2,
      "code": "T420026101",
      "name": "Matematik og indledende programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Vise fortrolighed med differentiation og integration samt anvendelse af disse værktøjer",
          "Vise fortrolighed med samtlige grundlæggende matematiske funktioner angivet under ”Indhold”",
          "Opstille og løse differentialligninger af 1. og 2. orden",
          "Vise fortrolighed med Taylor- og Maclaurinrækker",
          "Løse lineære ligningssystemer med tilhørende beregninger af matricer og determinanter",
          "Anvende Matlab til løsning af matematiske problemstillinger"
        ],
        "skills": [
          "Anvende matematiske færdigheder som eksempelvis integration og differentiation til at opstille, benytte og løse ligningssammenhænge",
          "Vise fortrolighed med og egenhændigt programmere matematiske problemstillinger i Matlab",
          "Kombinere og anvende programmeringsteknikker i Matlab til at løse problemstillinger inden for fysiske og elektriske systemer"
        ],
        "competencies": [
          "Anvende tillærte matematiske metoder og teknikker samt matematiske computerværktøjer i semesterets øvrige faglige aktiviteter"
        ],
        "contents": [
          "Differentiation med anvendelse af denne",
          "Eksponential- og logaritmefunktioner",
          "Inverse trigonometriske funktioner",
          "Integration med anvendelse heraf",
          "Polære koordinater",
          "Komplekse tal",
          "Vektorfunktioner i plan og rum",
          "Lineær algebra, matricer og determinanter",
          "Lineære ligningssystemer, Gauss eliminering",
          "Differentialligninger af 1. og 2. orden",
          "Taylor-og Maclaurinrækker",
          "Introduktion til det matematiske analyseværktøj Matlab",
          "Programmeringsteknikker i det matematiske analyseværktøj: Matlab",
          "Eksempler på anvendelser af Matlab på problemstillinger fra semesterets øvrige fagligheder",
          "Introduktion til numeriske metoder"
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "none",
        "type": "Skriftlig stedprøve på fire timer, der afholdes på campus.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        4,
        49
      ],
      "extended_description": "none"
    },
    {
      "internal_id": 22.3,
      "code": "EH1GPR1-01",
      "name": "Grundlæggende programmering 1",
      "contents": {
        "type": "A",
        "objectives": [
          "Kunne anvende grundlæggende programmeringsværktøjer, herunder IDE (integreret udviklingsmiljø), debugger, compiler, linker, etc.",
          "Have kendskab til grundlæggende programmering i C, herunder variabler og datatyper, kontrolsætninger, arrays og strings, pointere samt funktioner.",
          "Kunne redegøre for character strings og string-funktioner.",
          "Kunne redegøre for storage classes, linkage og memory management.",
          "Kunne redegøre for file input/output (filhåndtering).",
          "Kunne redegøre for structures og andre dataformer.",
          "Kunne redegøre for bit fields (håndtering af bit).",
          "Kunne udføre programmeringsopgaver og følge en programmeringsstandard.",
          "Kunne lave review af andres opgaver."
        ],
        "contents": [
          "Opsætning af integreret udviklingsmiljø, debugger, compiler, linker, etc.",
          "Variabler og datatyper",
          "Kontrolsætninger",
          "Arrays og strings",
          "Pointere",
          "Funktioner",
          "Character strings og string-funktioner",
          "Storage classes, linkage og memory management",
          "File input/output (filhåndtering)",
          "Structures og andre dataformer",
          "Bit fields (håndtering af bit)"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "Den studerende skal aflevere 6 opgaver i løbet af semesteret."
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Eksamen består af en godkendelse af de afleverede opgaver.",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        5,
        48
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 61,
      "code": "62557",
      "name": "Hardware-oriented programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Plan and construct software programs using the programming language C or C++",
          "Understand fundamental layers of abstraction related to software, used in a computer system",
          "Use relevant development tools like editor, preprocessor, compiler, linker and debugger. Explain how C-code is compiled into executable machine code",
          "Use C-language elements like constrol structures, functions, function libraries, variables, arrays, pointers, strings and data structures",
          "Implement programs to handle input and output units and related interfaces.",
          "Understand the usage of memory structures like stack, heap etc.",
          "Knowledge of object-oriented programming (e.g. C++)",
          "Use the relevant technical terms and argue rationally for a solution",
          "Design, implement, debug, test, and document a program"
        ],
        "contents": [
          "C programming and a little C++",
          "Program structures",
          "Memory layout (stack, heap, etc.).",
          "Interacting with input and output devices on a PC platform as well as a microcontroller",
          "Exercises"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "It is a condition of the exam that mandatory assignments have been handed in.",
        "type": "Oral examination",
        "grading": "point",
        "aids": "written works of reference are permitted : Electronic aids are not allowed"
      },
      "education_ids": [
        7
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 64.1,
      "code": "62646",
      "name": "Modeling and Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Write programs in Matlab using conditional code execution, loops, functions, and arrays.",
          "Solve a set of differential equations in the time domain with ODE45.",
          "Solve a differential equation in the time domain with Simulink.",
          "Apply the Matlab Symbolic Math Toolbox for manipulation of and solving equations.",
          "Derive the governing equations for a few problems in the field of mechanical engineering.",
          "Rewrite higher order differential equations as a set of first order differential equations.",
          "Determine whether a system is linear or not, and perform the linearization of nonlinear systems.",
          "Conduct a medium size programming task in collaboration with others.",
          "Author a technical report with graphics in publishing quality and formatted Matlab source code."
        ],
        "contents": [
          "Fundamental Matlab programming: Conditions, loops, functions, arrays, plots, handles, and file input/output. Classical laws of physics: Newton's 2nd law, Fouriers heat law, Kirchhoff's current law. Numerical solution of initial value problems: Euler's method, midpoint rule, ODE45, Simulink. State-space formulation. Linearization of differential equation."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "Two reports for hand-in, each weighted by 20 % in the final grade. Three hour written exam weighted by 60 % in the final grade. - Digital delivery of exam papers, where MATLAB and Simulink should be used."
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Written examination and reports, 3 hours",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        8
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 64.2,
      "code": "Projekt 3 - Automatik, Elektronik og Programmering",
      "name": "Projekt 3 - Automatik, Elektronik og Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Forklare basale principper inden for programmering",
          "Designe og implementere programmer til løsning af simple ingeniørmæssige automations problemer.",
          "Anvende programmeringssprogets udviklingsmiljø og brugergrænseflade.",
          "Anvende variable af forskellig type og udføre simple beregninger.",
          "Organisere kode ved hjælp af scripts og funktioner.",
          "Anvende funktioner fra eksisterende programbiblioteker.",
          "Visualisere data og information grafisk samt deling af data.",
          "Gøre rede for de elementer der indgår i automatiserede systemer (Elektrisk, Pneumatiske, Hydrauliske).",
          "Beskrive de forskellige styringssystemer og deres anvendelse",
          "Forstå fordele og ulemper ved automation generelt",
          "Forstå, hvordan styring og regulering af en automation station fungerer.",
          "Gennemføre programmering af en PLC ud fra fysiske styringsopgaver (Elektrisk, Pneumatiske, Hydrauliske).",
          "Forklare, hvordan en serieproduktion kan automatiseres.",
          "Vurdere hvilke forudsætninger der skal være til stede for valg af et givet automatiseringsniveau.",
          "Gøre rede for hvilken indflydelse automatisering har på en virksomhedsstyring af produktionen og effektiviteten af denne.",
          "Beskrive funktionsmetoder for forskellige automatiserede løsninger og hvad disse kræver af støttesystemer.",
          "Beskrive komponenter og systemer i automatiserede løsninger.",
          "Elektriske styringssystemer med relæteknik og PLC.",
          "Skrive teknisk dokumentation, Herunder dokumentation af program kode, nøgleskema, Ladder og logikdiagrammer samt sekventielle styringsformer.",
          "Sikkerhedssystemer og værn."
        ],
        "skills": [
          "Kunne programmere simple programmer i relevant programmeringssprog.",
          "Opsætning af udviklingsmiljøer til programmering i relevant programmeringssprog.",
          "Udvælge de rette pneumatiske, hydrauliske og elektrotekniske komponenter til en opgave.",
          "Opbygge, simulere, programmere og teste styringssystemer af mindre automatiske kredsløb.",
          "Udarbejde, simulere og forstå el-dokumentation iht. relevante standarder."
        ],
        "competencies": [
          "Med sikkerhed forstå hvilke automations løsninger der vil virke bedst til en given opgave.",
          "Anvende automatikkomponenter i opbygningen af en maskinkonstruktion.",
          "Kunne indgå i dialog om opbygning af et automationssystem med forskellige faggrupper.",
          "Bygge videre på den opnåede viden i mere avancerede kurser"
        ],
        "contents": [
          "Programmeringssprog: Relevant programmerings sprog, Ladder og Logikdiagrammer",
          "Anvendelse af udviklingsmiljø til programmeringssproget",
          "Anvendelse af aritmetiske og logiske operatorer, forgreninger og ”løkker”",
          "Organisering af kode ved hjælp af scripts og funktioner.",
          "Udarbejdelse af teknisk dokumentation.",
          "Grafisk visualisering af data i PLC",
          "Industrielle styringssystemer",
          "Hardware komponenter til automatisering og processtyring",
          "Materialetransportsystemer",
          "Enkelt stations produktionsceller",
          "Automatiserede produktionslinjer og montagelinjer",
          "Styringssystemer, herunder mekanisk-, relæ-, og PLCstyring",
          "Elektriske systemer, kredsløb og dokumentation",
          "Sikkerhedssystemer"
        ]
      },
      "size": 15,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "none",
        "type": "Aflevering af projektrapport, og eventuelle prototyper og forsøgsopstillinger. Mundtlig prøve, hvor hver gruppe deltager samlet. Gruppen præsenterer først samlet deres projekt (15 min.). Herefter udspørges de studerende individuelt. Den individuelle prøves varighed: 15 min. pr. studerende",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        9
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 64.4,
      "code": "T320009402",
      "name": "Intro to Programming",
      "contents": {
        "type": "B",
        "knowledge": [
          "Gain knowledge of the properties of different data types",
          "Understand concepts of procedural and functional programming",
          "Identify the basic concepts of testing and debugging",
          "Review the basic idea of classes and object-oriented programming"
        ],
        "skills": [
          "Develop skills to setup a development environment",
          "Practice load and save data",
          "Develop skills to convert between different data types",
          "Use graphs to visualize data",
          "Develop functions using elementary statements",
          "Apply libraries and classes",
          "Execute matrix calculations",
          "Develop skills to document their functions and routines"
        ],
        "competencies": [
          "Apply fundamental programming skills to analyze a set of data",
          "Design short programs and script to solve a specific problem",
          "Recommend appropriate programming strategies and methods to address a given problem",
          "Compile matrix calculations for data manipulation",
          "Evaluate simple scripts and functions",
          "Plan to work in small groups on a programming task"
        ],
        "contents": [
          "Setting up a development environment",
          "Data in- and output",
          "Data types and structures",
          "Data manipulation",
          "Visualization of scientific data",
          "Matrix calculations",
          "Imperative and functional programming",
          "Testing and debugging",
          "Fundamentals of classes and inheritance"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "Portfolio of assignments handed in on time during the semester and in accordance with the requirements specified at the start of the semester"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Individual grading is based on an overall assessment of: Portfolio of assignments and A 2-hour written exam",
        "grading": "point",
        "aids": "Projektrapport. Eventuelle prototyper og forsøgsopstillinger"
      },
      "education_ids": [
        10,
        105
      ],
      "extended_description": "None"
    },
    {
      "internal_id": 64.5,
      "code": "IT-PRG1",
      "name": "Introduction to Programming for Engineers",
      "contents": {
        "type": "B",
        "knowledge": [
          "data types",
          "operators",
          "variables",
          "control structure",
          "conditions",
          "loops",
          "functions",
          "recursion",
          "exceptions",
          "inheritance",
          "Sorting",
          "binary search",
          "file-based input/output",
          "testing and debugging"
        ],
        "skills": [
          "Use basic programming concepts and simple algorithmic techniques",
          "Prepare an engineering problem into sequences that can be transferred to code",
          "Prepare simple programs and applications that can automate engineering tasks",
          "Use standard libraries for engineering purposes"
        ],
        "competencies": [
          "Create well-structured programs and perform testing of these",
          "Create programs and scripts for solving engineering problems"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "The student must prepare 6 small individual programming assignment during the semester. These will make up their portfolio. In addition to this, the course concludes with a larger group project. Both the portfolio and the final group project will be the basis of the exam."
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "A 30 minutes individual oral exam. In the first part of the exam, the student will pick one of the assignments from the portfolio and discuss this assignment. The second part of the exam will depart from the group project. The exam is placed during the exam period in January.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        11
      ],
      "extended_description": "none"
    },
    {
      "internal_id": 67.1,
      "code": "02312",
      "name": "Introductory Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Use primitive datatypes and reference types.",
          "Use arrays.",
          "Use typical constructs from imperative programming languages, e.g. loops and branching.",
          "Define and apply methods with/without parameters and with/without return value.",
          "Understand the anatomy of classes and objects.",
          "Define and apply klasses and objects in an object orientered program.",
          "Use inheritance.",
          "Use simple I/O operations.",
          "Define and handle exceptions.",
          "Work in groups to design a smaller software system based on a problem description in a predefined task and implement and document the most important parts of this design.",
          "Use simple time and activity planning for progress of a project."
        ],
        "contents": [
          "Planning methods for programs: Pseudo-code and flow charts.",
          "Primitive data types (integers, booleans, floating points, and strings).",
          "Reference types.",
          "Data structures (arrays).",
          "Values, operators and expressions.",
          "Variable and assignments.",
          "Control statements (for, if and while statements, nested loops).",
          "Classes and objects (incl. attributes and methods).",
          "Inheritance (extension of classes with attributes and methods).",
          "Input/output (from/to monitor, keyboard, files).",
          "Simple exception handling.",
          "Use of an IDE."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "project",
        "type": "Evaluation of exercises/reports. The grade will be based on the individualised group report to be delivered in January.",
        "grading": "point",
        "aids": "All allowed for hte proejct and the small individual assignments. At the exam, the student is expected to show their programs which means they must bring a working laptop that is able to display and run their code"
      },
      "education_ids": [
        12
      ],
      "extended_description": "none"
    },
    {
      "internal_id": 67.2,
      "code": "SW-SDJ1",
      "name": "Softwareudvikling med UML og Java",
      "contents": {
        "type": "B",
        "knowledge": [
          "Identificere Java leksikalske strukturer: nøgleord, separatorer, operatorer, identifiers, literals og kommentarer.",
          "Forklare detaljer i et UML klassediagram"
        ],
        "skills": [
          "Designe klasser og konstruere objekter i Java.",
          "Implementere klasser i Java ved hjælp af objekt-orienterede koncepter såsom: indkapsling, nedarvning og polymorfi.",
          "Implementere en-til-til relationer og skelne imellem 3 typer: association, aggregation and komposition.",
          "Implementere en-til-mange relationer ved hjælp af indbyggede arrays og simple Collection-klasser.",
          "Implementere håndtering af exceptions i overensstemmelse med gængs praksis.",
          "Implementere persistence i både tekst og binære filer.",
          "Implementere simple event-baserede GUI applikationer.",
          "Anvende struktureret brug af kommentarer i koden.",
          "Implementere klasser ud fra et UML klassediagrammer."
        ],
        "competencies": [
          "Eksemplificere og diskutere grundlæggende objekt-orienterede koncepter, herunder indkapsling, forhold, nedarvning og polymorfi.",
          "Implementere mindre Java programmer med udgangspunkt i et UML klasse diagram."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "For at kvalificere sig til eksamen skal den studerende deltage i en mundtlig midtvejsprøve halvvejs gennem semestret."
      ],
      "exam": {
        "prerequisites": "Den studerende skal have mindst 75% registreret fremmøde for at blive indstillet til eksamen, og mandatory activities",
        "type": "Mundtlig prøve hvor den studerende tilfældigt trækker en ukendt programmeringsøvelse. Den studerende skal forklare et UML klassediagram, og vise hvordan programmeringen af det trukne diagram kan implementeres ved hjælp af computer.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        13
      ],
      "extended_description": "none"
    },
    {
      "internal_id": 67.3,
      "code": "T510024102",
      "name": "Objektorienteret Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Forstå og forklare abstraktionerne ”variabel” og ”metode”, herunder variabel typer og navn samt metode definitioner (modifiers, return types, signature, body).",
          "Forstå og forklare løkker, branching og arrays i kontekst af programmering.",
          "Forstå og forklare simple datastrukturer, herunder arrays, lister og maps.",
          "Forstå og forklare abstraktionerne ”klasse” og ”objekt” og deres relation, herunder forklare klassers opbygning og anvendelse af attributter, constructors og metoder i kontekst af klasser og objekter.",
          "Forstå primitive og komplekse datatyper.",
          "Redegøre for betydningen af visibility/access modifiers (private, protected, public).",
          "Forstå og forklare anvendelsen af arv, og polymorfi, herunder forstå betydningen af ”metode overriding”.",
          "Forstå interfaces og abstrakte klasser, herunder deres forskelle i muligheder og anvendelse.",
          "Forstå anvendelsen af ”metode overloading”.",
          "Redegøre for indkapsling og indkapslings betydning i en objekt-orienteret kontekst.",
          "Identificere elementer i- og forklare applikationskode i relation til ovenstående koncepter.",
          "Forstå konceptet i lagdeling af applikationskode.",
          "Forstå og forklare objekt-orienteret analyse og design, herunder redegøre for ”fænomener” og ”begreber” og forklare disse i relation til et klassediagram og objektinstanser.",
          "Forstå debugging og debuggings rolle i kontekst af programudvikling."
        ],
        "skills": [
          "Foretage en analyse af en specifikation for at identificere fænomener og abstrahere disse ind i begreber.",
          "Anvende begreber til at udarbejde klassediagrammer i designfasen, med angivelser af klasser, metoder og attributter.",
          "Anvende et IDE til at skrive og kompilere programkode.",
          "Implementere klasser, abstrakte klasser og interfaces på baggrund af et klassediagram, herunder implementere relationer mellem entiteter angivet i et klassediagram.",
          "Anvende klasser til at instantiere objekter.",
          "Anvende klasser fra eksisterende kodebiblioteker under udvikling af programkode.",
          "Anvende Git til versionere, gemme og dele programkode."
        ],
        "competencies": [
          "Reflektere over designbeslutning og redegøre for konsekvenser af disse på et basalt niveau",
          "Anvende en programspecifikation til at gennemføre en analyse- og en designfase.",
          "Anvende praktisk kendskab til objekt-orienteret programmering til at implementere objekt-orienteret applikationer – med eller uden udgangspunkt i et klassediagram.",
          "Udforme og udføre en mundtlig præsentation af faglighederne i kurset."
        ],
        "contents": [
          "Objekt-orienteret programmering herunder koncepter abstraktion, indkapsling, arv og polymorfi."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Den studerende skal have mindst 75% registreret fremmøde for at blive indstillet til eksamen, og mandatory activities",
        "type": "Mundtlig, individuel fagprøve",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        14,
        89,
        91
      ],
      "extended_description": "none"
    },
    {
      "internal_id": 67.4,
      "code": "SW1OPRG-01",
      "name": "Objektbaseret programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "Identificere, anvende, udvælge og kombinere kontrolstrukturer",
          "Definere, konstruere og anvende C/C++-funktioner",
          "Definere og anvende endimensionelle arrays",
          "Identificere og anvende datastrukturer implementeret som C structs",
          "Definere og anvende pointerbegrebet, til tilgang til simple variable, objekter og sammensatte datastrukturer.",
          "Anvende basale objektorienterede principper såsom indkapsling, information hiding og opdeling i data og metoder (funktioner).",
          "Anvende et UML klassediagram som model for implementering af en klasse.",
          "Identificere og anvende klasserelationen ”Komposition” som begreb og implementere denne i C++.",
          "Anvende programmoduler til strukturering af funktioner, datastrukturer og klasser.",
          "Konstruere og strukturere de ovennævnte programmeringselementer til programmer, der løser en simpel, specificeret opgave."
        ],
        "contents": [
          "Basale datatypevariable og deres operationer",
          "Kontrolstrukturer (program flow)",
          "Simpel konsolafhængigt input/output",
          "Funktioner",
          "Arrays, Pointers og C strings",
          "C structs",
          "Programstruktur og -moduler",
          "Klasser og objekter i C++",
          "C++ strings",
          "C++ simpel streaming input/output",
          "UML Klassediagrammer og klasserelationen komposition."
        ]
      },
      "size": 5,
      "time": {
        "absolute": false,
        "lectures": 0.4,
        "exercises": 0.6,
        "total": 1
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "skriftlig 2 timer",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        15
      ],
      "extended_description": "Kurset skal som det første programmeringskursus indøve programmering i C. Derefter indøves principperne for basal objektbaseret programmering i C++, hvor principperne for indkapsling indlæres sammen med grundlæggende teori om opdelingen i data og metoder (funktioner)."
    },
    {
      "internal_id": 76.1,
      "code": "02102",
      "name": "Introductory Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Design and document the structure of an object-oriented program.",
          "Implement a worked out design.",
          "Understand and apply the basic items of the programming language.",
          "Choose and apply suitable data types and data structures.",
          "Understand and apply the basic object-oriented functionalities of the programming language.",
          "Recognize a few, simple design patterns.",
          "Analyse the run-time behavior of a program.",
          "Write a clear and well-structured report documenting all the central aspects of a programming project."
        ],
        "contents": [
          "types, primitive and referenced",
          "basic programming constructs (loops, branching statements, etc)",
          "values, operators and expressions",
          "classes, objects, fields and methods",
          "use of libraries",
          "design of classes",
          "basic error/exception handling",
          "use of development tools",
          "In addition the C programming language is introduced."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written examination and reports. The evaluation is based on an overall assessment of the completed individualized reports, the implemented programs and the written examination. Written exam 2 hours",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        16,
        158
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 76.2,
      "code": "285191U010",
      "name": "Programmering for elektroteknologi",
      "contents": {
        "type": "A",
        "objectives": [
          "Beskrive den generelle natur og anvendeligheden af softwareudvikling til teknisk-naturvidenskabelige beregninger",
          "Beskrive udvalgte algoritmer, datastrukturer, datatyper og programmeringskonstruktioner",
          "Anvende og forklare udvalgte teorier og metoder til test af software samt analyse af beregningskompleksitet",
          "Designe, udvikle og evaluere software prototyper til teknisk-naturvidenskabelige beregninger"
        ],
        "contents": [
          "Kurset giver overblik over, indsigt i, og praktisk erfaring med nogle af de mest udbredte teorier, metoder, principper og teknologier indenfor udvikling af software til teknisk-naturvidenskabelige beregninger.",
          "Kurset har et anvendelsesorienteret fokus på et udvalg af almindeligt forekommende problemstillinger, hvortil passende algoritmer, datastrukturer og programmeringskonstruktioner allerede er blevet udviklet. Typisk har sådanne problemstillinger behov for at bearbejde store mængder af mere eller mindre strukturerede data, der eksempelvis stammer fra sensorer.",
          "Kurset vil også introducere test af software og det vigtige begreb beregningskompleksitet.",
          "Python og en udvalgt samling af relaterede biblioteker vil blive benyttet i kurset; nogle begreber vil til sammenligning blive illustreret i et andet programmeringssprog.",
          "Specifikt indeholder kurset emner som: variable, simple og avancerede data typer, kontrolstrukturer, funktioner, klasser, data-strukturer, algoritmer, filhåndtering, håndtering af undtagelser, test og profilering af kode, og beregningskompleksitet."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "hjemmeopgave. 3-5 individuelle afleveringsopgaver.",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        17
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 88,
      "code": "Fagmodulprojekt i Informatik",
      "name": "Fagmodulprojekt i Informatik",
      "contents": {
        "type": "B",
        "knowledge": [
          "Viden om teknikker, værktøjer og metoder til at modellere videns-, informations-, proces- og dataflow.",
          "Viden om it i organisatoriske og sociale kontekster.",
          "Viden om systemudvikling med hovedvægt på forundersøgelse og evaluering."
        ],
        "skills": [
          "Færdighed i at analysere, designe og vurdere it-anvendelser.",
          "Færdighed i at modellere domæneviden, proces- og dataflows, og vælge og argumentere for valg af metoder hertil."
        ],
        "competencies": [
          "Kompetence til at planlægge, styre og gennemføre et mindre systemudviklingsforløb, med særlig vægt på forløbets tidlige aktiviteter."
        ],
        "contents": [
          "Kurset giver overblik over, indsigt i, og praktisk erfaring med nogle af de mest udbredte teorier, metoder, principper og teknologier indenfor udvikling af software til teknisk-naturvidenskabelige beregninger.",
          "Kurset har et anvendelsesorienteret fokus på et udvalg af almindeligt forekommende problemstillinger, hvortil passende algoritmer, datastrukturer og programmeringskonstruktioner allerede er blevet udviklet.",
          "Typisk har sådanne problemstillinger behov for at bearbejde store mængder af mere eller mindre strukturerede data, der eksempelvis stammer fra sensorer.",
          "Kurset vil også introducere test af software og det vigtige begreb beregningskompleksitet.",
          "Python og en udvalgt samling af relaterede biblioteker vil blive benyttet i kurset; nogle begreber vil til sammenligning blive illustreret i et andet programmeringssprog.",
          "Specifikt indeholder kurset emner som: variable, simple og avancerede data typer, kontrolstrukturer, funktioner, klasser, data-strukturer, algoritmer, filhåndtering, håndtering af undtagelser, test og profilering af kode, og beregningskompleksitet."
        ]
      },
      "size": 15,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Projektrapporten skal indeholde en beskrivelse af, og refleksion, over et selvstændigt udført arbejde omfattende modellering af it- anvendelser og brugssituationer.",
        "type": "Mundtlig gruppeprøve for deltagerne i projektarbejdet. Ved prøven tages der udgangspunkt i de studerendes projektrapport samt eventuelt supplerende materiale. Prøven foregår som en samtale mellem de studerende og bedømmerne. Der kan under prøven stilles spørgsmål inden for det faglige område, der relaterer til projektrapporten.",
        "grading": "point",
        "aids": "Written works of reference are permitted"
      },
      "education_ids": [
        18
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 114,
      "code": "145181U013",
      "name": "Æstetisk programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "demonstrere indsigt i samt reflektere over programmering som en praksis hvormed man kan udforske, tænke og forstå samtidens digitale kultur",
          "demonstrere indsigt i programmering og programmeringsprincipper ved at skrive, læse og afvikle kode."
        ],
        "skills": [
          "skrive, læse og afvikle kode, herunder formidle grundlæggende programmeringskoncepter",
          "analysere og vurdere eget og andres forsøg på at udtrykke æstetiske problemstillinger i programkode."
        ],
        "competencies": [
          "læse og skrive computerkode i et givet programmeringssprog anvende programmering til at udforske digital kultur",
          "forstå programmering som en æstetisk og kritisk handling som rækker ud over kodens praktiske funktion."
        ],
        "contents": [
          "Formålet med faget er at sætte den studerende i stand til at designe og programmere et stykke software, at forstå programmering som en æstetisk og kritisk handling som rækker ud over kodens praktiske funktion, og at analysere, diskutere og vurdere software-kode på denne baggrund.",
          "Faget introducerer til programmering og udforsker forholdet mellem kode og kulturelle og/eller æstetiske problemstillinger i relation til forskningsfeltet softwarestudier.",
          "I faget betragtes programmeringspraksis som en måde at beskrive og konceptualisere omverdenen på i formelle udtryk, og dermed også som en måde, hvorigennem man kan forstå strukturer og systemer i samtidens digitale kultur.",
          "Faget viderefører fra kurserne Interaktions- og interfacedesign samt Co-design idéen om praksisbaseret vidensudvikling som en central it-akademisk færdighed.",
          "Indsigten i, at viden om programkode og digitale æstetiske udtryksformer fremmer kritisk refleksion over digital design, føres videre i kurserne Platformskultur, Interaktionsteknologier samt Designprojekt.",
          "Faget arbejder sammen med Softwarestudier på samme semester, og har i det samarbejde til formål at tilvejebringe konkrete erfaringer med programmering som reflekteret og kritisk praksis."
        ]
      },
      "size": 20,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Forudsætningen for deltagelse i prøven er undervisningsdeltagelse jf. studieordningens afsnit 2.1, herunder aflevering og godkendelse af en opgavesamling. Antal opgaver, deres form (individuel og/eller gruppe, skriftlig og/eller mundtlig, bunden og/eller fri) omfang samt afleveringsfrist præsenteres skriftligt i Brightspace af underviser ved semestrets start.",
        "type": "Mundtlig 30 minutter. Prøven er en mundtlig prøve, hvor den studerende giver en præsentation af, samt en analyse og refleksion over opgavesamlingens indhold i forhold til fagets pensum.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        19
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 115,
      "code": "N360002102",
      "name": "Anvendt statistik",
      "contents": {
        "type": "AB",
        "objectives": [
          "Forstå basale begreber indenfor sandsynlighedsregning og fordelingsteori.",
          "Benytte grafiske og summariske metoder til beskrivende analyse.",
          "Beskrive data ved hjælp af nøgletalstørrelser såsom middelværdi, varians og korrelation.",
          "Opskrive konfidensintervaller for nøgletalstørrelser.",
          "Teste simple statistiske hypoteser.",
          "Analysere data ved hjælp af simple regressionsmetoder.",
          "Planlægge dataindsamling.",
          "Forstå centrale elementer i publicerede resultater fra statistiske analyser af biologiske data.",
          "Foretage en kritisk vurdering af relevansen af anvendte metoder og inferensen baseret herpå.",
          "Formulere statistiske resultater i ikke-tekniske termer.",
          "Anvende den statistiske software R til analyse af konkrete data, hvilket er vigtigt i forhold til at kunne arbejde akademisk videnskabeligt med – i bred forstand – biologiske problemstillinger.",
          "Benytte grafiske og summariske metoder til beskrivende dataanalyse.",
          "Beskrive data ved hjælp af nøglestørrelser som middelværdi, varians og korrelation.",
          "Opskrive konfidensintervaller for nøglestørrelser.",
          "Teste simple statistiske hypoteser.",
          "Analysere data ved hjælp af simple regressionsmetoder.",
          "Planlægge dataindsamling.",
          "Forstå centrale elementer i publicerede resultater fra statistiske analyser af biologiske data.",
          "Vurdere relevansen af anvendte metoder og inferensen baseret herpå.",
          "Formulere statistiske resultater i ikke-tekniske termer.",
          "Benytte R til simple statistiske analyser."
        ],
        "knowledge": [
          "Give viden om valg og anvendelse af passende statistiske analysemetoder"
        ],
        "skills": [
          "Give færdigheder i kritisk vurdering af videnskabelige publikationer."
        ],
        "competencies": [
          "Give kompetence til at arbejde kritisk med egne projekter og data."
        ],
        "contents": [
          "Grundlaget for statistiske overvejelser.",
          "Fra population til stikprøve og tilbage igen.",
          "Basale parametre og deres estimation.",
          "Beskrivende statistik (tabeller og grafisk præsentation).",
          "Sandsynligheder og fordelinger.",
          "Hypoteser og principper for tests.",
          "Eksempler på testmetoder: t-test, chi-kvadrat-test.",
          "Basale begreber bag lineære modeller med udgangspunkt i simpel lineær regression.",
          "Basale begreber med hensyn til forsøgsplanlægning. Hyppige problemer indenfor anvendt statistik (typer af inferensfejl, massesignifikans, pseudoreplikation).",
          "I kurset anvendes den statistiske software R."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Portfolio bestående af afleveringer af obligatoriske e-test, quizzer og skriftlige hjemmeopgaver",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        20
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 116.1,
      "code": "K-BT-B4-15A",
      "name": "Anvendt statistik",
      "contents": {
        "type": "B",
        "knowledge": [
          "redegøre for forskellige plottyper (scatter, linje, bjælke, histogram, fejlbjælke, boksplot osv.) og hvordan de kan bruges til at visualisere data og beregnet statistik",
          "forklare forskelle mellem parametrisk og ikke-parametrisk tilgang, og hvornår hvilken tilgang bruges",
          "redegøre for brugen af forskellige teoretiske fordelinger (normalt, ensartet, Studerendes t-fordeling, chi-square, F-fordeling osv.)",
          "forklare grundidéen bag frequentist tilgangen i statistik såvel som dens vigtigste resultater (konfidensintervaller, p-værdier, signifikansniveau, testfejl osv.)",
          "forklare hvordan man kan vurdere en sammenhæng mellem kvantitative variabler (kovarians, korrelation, regression)",
          "forklare hvordan man bruger statistik til analyse af kvalitative data såvel som data, der ikke følger nogen teoretisk fordeling",
          "redegøre for de mest typisk fejl og misforståelser i statistik (f.eks. misbrug af p-værdier)"
        ],
        "skills": [
          "bestemme hvilke statistikker og diagrammer, der er bedst til at beskrive deres egne eksperimentelle data",
          "vurdere nødvendigheden af hypotesetest samt vælge den bedste test samt reducere effekten af flere sammenligninger",
          "anvende de statistiske metoder på computersoftware (f.eks. R).",
          "fortolke beregnede statistikker og diagrammer korrekt samt drage konklusioner og beslutninger baseret på fortolkningen."
        ],
        "competencies": [
          "demonstrere grundlæggende forståelse af, hvilke problemer der kan løses ved hjælp af anvendt statistik."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "øvelser"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "skriftlig eller mundtlig",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        21
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 116.2,
      "code": "275221U001",
      "name": "Computeralgoritmer",
      "contents": {
        "type": "A",
        "objectives": [
          "Beskrive koncepterne bag forskellige matematiske tilgange til at finde numeriske løsninger til ordinære og partielle differentialligninger.",
          "Beskrive matematiske tilgange i form af pseudokode.",
          "Oversætte pseudokode til computerkode.",
          "Anvende pseudokode til at konstruere computeralgoritmer.",
          "Anvende algoritmer til at undersøge kvaliteten af numeriske løsninger til differentialligninger."
        ],
        "contents": [
          "Meget moderne videnskab indeholder komplekse udregninger, der afvikles i matematiske softwaresystemer. Brugerne har ofte begrænset forståelse for de underliggende numeriske algoritmer, der anvendes i disse systemer. Ved at studere numeriske metoder kan man blive en mere oplyst bruger og blive bedre i stand til at bedømme og vurdere resultaternes nøjagtighed. Dette indebærer, at studerende både skal lære om algoritmer for at forstå, hvordan de virker og hvordan de kan fejle. Kritisk tænkning og konstant skepsis er egenskaber, vi ønsker, at de studerende tilegner sig. Enhver omfattende numerisk beregning bør, hvis det er muligt, kunne verificeres uafhængigt, selv når den udføres med den nyeste software.",
          "Dette kursus har til formål at give de studerende grundlæggende viden om numeriske metoder til løsning af matematiske problemer inden for natur- og ingeniørvidenskab. Der lægges vægt på analyse af de fejl, der kan opstå i numeriske approksimationer, effekten af finite-precision computeraritmetik, konstruktion og implementering af numeriske algoritmer samt analyse af deres teoretiske egenskaber.",
          "Matematikken bag lineære systemer samt deres egenværdier og egenvektorer, ikke-lineære ligninger, interpolation og numerisk differentiering, numerisk integration, spline-funktioner. Numeriske løsninger til initialværdiproblemer (Taylor-rækker, Runge-Kutta-metoder). Monte Carlo-metoder. Grænseværdiproblemer, hvor der anvendes skydemetoder eller diskrete metoder til løsning af partielle differentialligninger."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "øvelser"
      ],
      "exam": {
        "prerequisites": "none",
        "type": "skriftlig, 4 timer",
        "grading": "point",
        "aids": "none"
      },
      "education_ids": [
        22,
        100
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 117,
      "code": "U60176",
      "name": "Applied Data Science and Data Visualisation",
      "contents": {
        "type": "A",
        "objectives": [
          "The overall objective of this course is to introduce the concept of data science and visualization of data to enable students within experimental sciences to design, perform, visualize, evaluate, interpret and communicate experiments where many parameters are measured and so called big data experiments (‘omics’ data).",
          "Furthermore, the aim is to provide students with the necessary methodological and data analysis skills to be able to evaluate validity and quality of methods and data related to analysis of large datasets.",
          "describe and explain the concepts of multivariable data processing and visualization",
          "handle multivariable data using relevant software such as python, R or using statistical software (e.g. SYSTAT, SPSS etc.)",
          "identify and extract relevant parameters from large data sets",
          "implement appropriate descriptive statistics on high complexity and big data",
          "describe and analyze the intrinsic structure of a large multivariable dataset using relevant methods, such as clustering methods, principal component analysis (PCA) or least-squares analyses (PLS)",
          "analyze multivate data using basic linear models with covariate adjustments, and interpret and discuss results these",
          "describe simple machine learning algorithms and explain their differences with regard to purpose of use, strengths and weaknesses, as well as use selected machine learning algorithms for tasks such as selection of the variable with the best predicting power, and interpret results from these.",
          "explain the results from these methods to both lay people and specialists",
          "be aware of the limitations of the chosen tests",
          "visualize the results in an informative and rigorous way.",
          "design complex experiments, including ‘omics’ experiments based on the methodological considerations of the ensuing data analysis",
          "write documents describing methodological considerations regarding the analysis of big (‘omics’) data",
          "communicate the knowledge and understanding gained from the course in a precise and scientific way."
        ],
        "contents": [
          "The main aim of the course is to give the student an overview of data science and visualization methods, and experience in choosing and applying data science and visualization methods to scientific problems.",
          "The course consists of lectures combined with exercises, and projects where the students can work on their own data or other data from their own field.",
          "No previous programming experience is required, but students will be expected to learn basic programming (R and Python) during this course."
        ]
      },
      "size": 5,
      "time": {
        "asolute": true,
        "lectures": 8,
        "preparation": 38,
        "exercises": 24,
        "project": 65,
        "total": 135
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The course is passed through active, regular attendance and satisfactory participation. The student must participate in course related activities (e.g. workshops, seminars, field excursions, process study groups, working conferences, supervision groups, feedback sessions). - The student must be present for minimum 75 percent of the lessons. Satisfactory participation is defined as e.g. oral presentations (individually or in a group), peer reviews, mini projects, test, planning of a course session. Pass/Fail. Assesment criteria in relation to satisfactory participation/students will be assessed by their ability to: explain the analyses used, account for, how choice of analysis have implication on the results, the visualization of the data, and programming code for analysis and visualization, communicate the knowledge and understanding gained from the lesson in a precise way within the submitted reports",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        23
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 120,
      "code": "Applied Data Science and Data Visualisation",
      "name": "Applied Data Science and Data Visualisation",
      "contents": {
        "type": "A",
        "objectives": [
          "The overall objective of this course is to introduce the concept of data science and visualization of data to enable students within experimental sciences to design, perform, visualize, evaluate, interpret and communicate experiments where many parameters are measured and so called big data experiments (‘omics’ data).",
          "Furthermore, the aim is to provide students with the necessary methodological and data analysis skills to be able to evaluate validity and quality of methods and data related to analysis of large datasets.",
          "describe and explain the concepts of multivariable data processing and visualization",
          "handle multivariable data using relevant software such as python, R or using statistical software (e.g. SYSTAT, SPSS etc.)",
          "identify and extract relevant parameters from large data sets",
          "implement appropriate descriptive statistics on high complexity and big data",
          "describe and analyze the intrinsic structure of a large multivariable dataset using relevant methods, such as clustering methods, principal component analysis (PCA) or least-squares analyses (PLS)",
          "analyze multivate data using basic linear models with covariate adjustments, and interpret and discuss results these",
          "describe simple machine learning algorithms and explain their differences with regard to purpose of use, strengths and weaknesses, as well as use selected machine learning algorithms for tasks such as selection of the variable with the best predicting power, and interpret results from these.",
          "explain the results from these methods to both lay people and specialists",
          "be aware of the limitations of the chosen tests",
          "visualize the results in an informative and rigorous way.",
          "design complex experiments, including ‘omics’ experiments based on the methodological considerations of the ensuing data analysis",
          "write documents describing methodological considerations regarding the analysis of big (‘omics’) data",
          "communicate the knowledge and understanding gained from the course in a precise and scientific way."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The course is passed through active, regular attendance and satisfactory participation. Active participation is defined as: The student must participate in course related activities (e.g. workshops, seminars, field excursions, process study groups, working conferences, supervision groups, feedback sessions). Regular attendance is defined as: The student must be present for minimum 75 percent of the lessons. Satisfactory participation is defined as: e.g. oral presentations (individually or in a group), peer reviews, mini projects, test, planning of a course session",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        24
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 121,
      "code": "NMAK14003U",
      "name": "Applied Statistics",
      "contents": {
        "type": "B",
        "knowledge": [
          "recognize certain data types, identify and specify appropriate statistical models, and argue for the appropriateness.",
          "explain the prerequisities, prospects and limitations of the methods."
        ],
        "skills": [
          "formulate relevant problems and choose an appropriate statistical model addressing these problems.",
          "carry out the actual analysis (computations). This includes model fitting, model validation and hypothesis testing.",
          "extract relevant estimates, draw conclusions and communicate the results from the analysis.",
          "use the statistical programming language R to carry out the analyses."
        ],
        "competencies": [
          "independently formulate scientifically relevant questions - motivated by data of similar types as those presented in the course - and answer them by the use of statistical methods."
        ],
        "contents": [
          "Each student carries out a statistical project (in a group) related to an experiment or a numerical investigation preferably delivered by one of the students in the group.",
          "A report is written in journal style and presented orally.",
          "Besides, a number of statistical themes are taught at lectures and exercise classes: Data types, comparison of two samples by parametric and non-parametric methods, analysis of tables of counts, regression analysis of categorical data, linear and multilinear regression, analysis of variance, basic design of experiments, usage of random effects, and analysis of longitudinal data and of repeated measurements.",
          "The student is also introduced to practical techniques for analyzing data in the open source software package R using the RStudio interface."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 24,
        "preparation": 70,
        "exercises": 24,
        "project": 84,
        "exam": 1,
        "guidance": 3,
        "total": 206
      },
      "mandatory_activities": [
        "none"
      ],
      "exam": {
        "prerequisites": "none",
        "type": "Description of Examination: Each group writes a report in a journal paper format about their project. At the oral defense the students make individual conference style presentations of their projects with emphasis on the statistical issues. The oral examination is without preparation and divided into 20 minutes presentation by the student and 10 minutes questioning from the examiner. The grade is awarded on the basis of an overall assessment of the report and the oral exam",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        25,
        26,
        27,
        28
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 124,
      "code": "555171U010",
      "name": "Bioinformatik og programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "The participants will after the course have basic knowledge of computer methods and applications for the analysis of biological sequence data as well as insight into principles and techniques for construction of simple programs.",
          "Participants will aquire practical experience with analysis of problems in bioinformatics and related fields and with implementation of programs solving such problems using the Python programming language.",
          "Apply fundamental constructs of a programming language.",
          "Analyse data and construct data structures for representation of data.",
          "Analyse simple computational problems and construct programs for their solution.",
          "Describe and relate key methods in bioinformatics analysis.",
          "Apply bioinformatics software to biological data.",
          "Judge the reliability of results obtained using Bioinformatics software."
        ],
        "contents": [
          "The course introduces programming and its practical applications in bioinformatics.",
          "The course also outlines and discusses bioinformatics algorithms and the most common tools for bioinformatics analysis of sequence data are presented and demonstrated.",
          "The first part of the course is an introduction to basic programming in Python.",
          "The course later introduces key topics in bioinformatics with focus on application of bioinformatics software and acquired programming skills.",
          "Subjects for lectures and exercises include: bioinformatics databases, sequence alignment, genome annotation, sequence evolution, phylogenetic analysis."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "assignments"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "skriftlig, 4 timer",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        29,
        30
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 127,
      "code": "BMB830",
      "name": "Biostatistik i R I",
      "contents": {
        "type": "A",
        "objectives": [
          "independently analyze biological data sets.",
          "work with large data amounts and carry out standard statistical analysis to identify relevant features.",
          "use standard algorithms for multi-variate analysis",
          "design scripts for detailed visualization of their results.",
          "apply tools for data interpretation.",
          "know how to objectively discuss applied data analysis methods presented e.g. in publications."
        ],
        "contents": [
          "basic probability",
          "different types of data modeling",
          "basic statistical models",
          "data visualization",
          "data interpretation",
          "basic multi-variate analysis"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 20,
        "training": 16
      },
      "mandatory_activities": [
        "assignments"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Oral examination",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        31,
        32
      ],
      "extended_description": "Modern experimental platforms generate large sets of often noisy data that requires its processing by appropriate analytic and statistical methods. High-confidence data interpretation is built upon correct application of methods such as statistical models and pattern recognition. Furthermore, proper visualization of the results helps presenting and understanding the results. This course introduces the students to the main concepts of biostatistics, data analysis and visualization, so they understand the principles to design and apply work flows that handle a certain data type. The course will have a theoretical and a practical part, with the objective to provide general understanding of data analysis and application of bioinformatics tools. Among currently available software suits, the R scripting language became very popular to deal with biostatistics and analysis of large data sets, as it (i) provides a vast number of statistical tools, (ii) allows adaptation of the analysis to any experimental design, (iii) offers simple commands to operate on entire data sets, (iv) provides a wide range of methods for data visualization and (v) has a large and active community of researchers developing new tools. However, it requires the user to acquire scripting skills to take advantage of the many features. The course will introduce the students to basic programming of R scripts, data visualization and basic statistical models necessary to deal with data from modern high-throughput experiments."
    },
    {
      "internal_id": 146,
      "code": "T600005101",
      "name": "Data Engineering and Programming",
      "contents": {
        "type": "B",
        "knowledge": [
          "Fundamentals of data representation in computers",
          "Fundamentals of programming",
          "Basic data structures",
          "Basic data analysis techniques",
          "Data visualization techniques"
        ],
        "skills": [
          "Python programming (modules, functions, classes, inheritance, loops, reading and writing files)",
          "Reading data from common file formats: CSV, JSON, Excel",
          "Data analysis and visualization libraries: pandas, numpy, scipy, matplotlib",
          "Time series analysis"
        ],
        "competencies": [
          "Perform a qualitative and quantitative data analysis, including time-series",
          "Present the results of the analysis in a tabular and visual form"
        ],
        "contents": [
          "The aim of this course is to introduce students to tools and methods for data analysis and processing. This includes basic programming skills for data manipulation, basic statistics for data analysis and basic data visualization techniques. The course is solely based on open source tools, what allows students to use the learned methods and tools anytime in their further education and professional career."
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 48
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Home assignment",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        33
      ],
      "extended_description": "Modern experimental platforms generate large sets of often noisy data that requires its processing by appropriate analytic and statistical methods. High-confidence data interpretation is built upon correct application of methods such as statistical models and pattern recognition. Furthermore, proper visualization of the results helps presenting and understanding the results. This course introduces the students to the main concepts of biostatistics, data analysis and visualization, so they understand the principles to design and apply work flows that handle a certain data type. The course will have a theoretical and a practical part, with the objective to provide general understanding of data analysis and application of bioinformatics tools. Among currently available software suits, the R scripting language became very popular to deal with biostatistics and analysis of large data sets, as it (i) provides a vast number of statistical tools, (ii) allows adaptation of the analysis to any experimental design, (iii) offers simple commands to operate on entire data sets, (iv) provides a wide range of methods for data visualization and (v) has a large and active community of researchers developing new tools. However, it requires the user to acquire scripting skills to take advantage of the many features. The course will introduce the students to basic programming of R scripts, data visualization and basic statistical models necessary to deal with data from modern high-throughput experiments."
    },
    {
      "internal_id": 155.1,
      "code": "NFYA06018U",
      "name": "Datalogi for fysikere",
      "contents": {
        "type": "B",
        "knowledge": [
          "Konkret viden om udvalgte datalogiske begreber",
          "Konkret viden om bestemte numeriske algoritmer",
          "Konkret viden om Pythons syntaks og elementer (herunder kursorisk om objekt orienteret elementer)",
          "Konkret viden om gængse biblioteker og hvordan disse bruges"
        ],
        "skills": [
          "Identificere og bruge programmeringssprogets syntaktiske elementer.",
          "Anvende gængse biblioteker til beregninger.",
          "Genkende og bruge strukturering af kode til klart at udtrykke en løsning til et problem.",
          "Kunne beskrive løsningsmodeller i ord, billeder, matematik og lignende.",
          "Finde og identificere eksisterende løsninger i diverse ressourcer."
        ],
        "competencies": [
          "Deltagerne vil kunne udvikle programmel til at løse konkrete fysiske problemstillinger ved hjælp af givne numeriske metoder.  Desuden vil deltagerne kunne kommunikere disse løsningsmodeller og løsninger til andre fysikere."
        ],
        "contents": [
          "Datalogiske begreber. For eksempel variable typer, kontrol strukturer og lignende.",
          "Algoritmer. Udvalgte algoritmer behandles og diskuteres med henblik på forståelse af algoritmers struktur.",
          "Programmeringsteknikker. Med udgangspunkt i programmeringssproget Python kigger vi på, hvordan vi kan skrive algoritmer og bruge andre programmeringsteknikker. Vi behandler også, hvordan struktureret kode kan bruges til at organisere og klart udtrykke beregningsmodeller. Herunder også viden om gængse biblioteker til numeriske og symbolske beregninger, visualisering, og opbevaring af data.",
          "Computational Thinking. Vi ræsonnerer om forskellige beregningsmodeller for et givent problem og om beregningsmodellernes egnethed og relevans. Computational Thinking er centralt for brugen af beregningsmodeller i fysik: Givet ny data og et nyt problem, hvordan kan vi finde en beregningsmodel som kan løse problemet?"
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 16,
        "preparation": 96,
        "exercises": 70,
        "exam": 24,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "tre opgaver skal afleveres og godkendes",
        "type": "Skriftlig aflevering, 14 dage.",
        "grading": "boolean",
        "aids": "all. Only limited python packages are allowed"
      },
      "education_ids": [
        34,
        35
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 155.3,
      "code": "525171U009",
      "name": "Mekanik og Termodynamik",
      "contents": {
        "type": "A",
        "objectives": [
          "At den studerende bliver i stand til at behandle enkelte emner på et væsentligt mere avanceret teknisk niveau end tidligere (fx gymnasiet) og samtidig opnår en dybere forståelse.",
          "At opnå fortrolighed med avancerede problemstillinger i mekanik (inkl. Væskemekanik og Bølgefysik) og termodynamik.",
          "At forstå overgangen fra en mikroskopisk til en makroskopisk beskrivelse.",
          "Forholde sig kritisk til beregnede resultater.",
          "Redegøre for væsentlige begreber og resultater inden for mekanik og termodynamik.",
          "Anvende matematisk terminologi og symbolsprog i denne redegørelse.",
          "Analysere et simpelt fysisk problem vha. begreber og resultater inden for mekanik og termodynamik.",
          "Sammenholde og relatere begreber og resultater inden for mekanik og termodynamik.",
          "Løse skriftlige opgaver inden for mekanik og termodynamik og argumentere for de enkelte skridt i besvarelsen.",
          "udføre matematisk analyse med symbolske operationer i programmeringssproget python.",
          "plotte funktionsudtryk i python."
        ],
        "contents": [
          "Enheder, fysiske størrelser og vektorer",
          "Bevægelse, hastighed og acceleration",
          "Newtons love og anvendelser heraf",
          "Arbejde og kinetisk energi",
          "Potentiel energi og energibevarelse",
          "Impulsbegrebet",
          "Impulsmoment, kraftmoment og stive legemers bevægelse",
          "Mekanisk ligevægt og elasticitet",
          "Gravitation, planetbevægelse og Keplers love",
          "Periodisk bevægelse, harmonisk oscillator og resonans",
          "Mekaniske bølger, superposition og svingningstilstande, lydlære",
          "Fluid mekanik",
          "Temperatur og varme",
          "Stofs termiske egenskaber",
          "Termodynamikkens hovedsætninger",
          "Entropi",
          "sympy-kommandoer til beregning af matematiske udtryk og afbildning af grafer"
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig, 4 timer, Der gives en samlet bedømmelse, hvor ti (af underviser) udvalgte afleveringsopgaver fra kursusforløbet og afsluttende skriftlig eksamen (4 timer) vægtes 1:4.",
        "grading": "point",
        "aids": "all. No internet access."
      },
      "education_ids": [
        36
      ],
      "extended_description": "Sammen med kurset Elektromagnetisme og Optik (nyt kursus fra F20) giver Mekanik og Termodynamik en sammenhængende præsentation af den klassiske fysik i sin helhed. Målsætningen for det samlede forløb er, at den studerende får et overblik over fysikkens mangfoldighed og et klart indblik i sammenhængen mellem den klassiske fysiks enkelte discipliner samt bliver i stand til at behandle karakteristiske problemstillinger inden for disse discipliner. Dette gælder både analytisk og numerisk. Mekanik, som er emnet for kursets første halvdel, handler om sammenhængen mellem kræfter og bevægelse. Der tages udgangspunkt i de mekanikkundskaber, den studerende har tilegnet sig i gymnasiet. Emnerækken inkluderer bl.a. kraft- og impulsbegreberne, Newtons og Keplers love, arbejde og energi, stive legemers rotation, mekanisk ligevægt, periodisk bevægelse (herunder harmonisk svingning), væskers mekanik, mekaniske bølger og lyd. I anden del af kurset introduceres og udbygges termodynamikken (varmelæren). Emnerækken her inkluderer temperatur og varme, kinetisk gasteori (direkte forbindelse til den Newtonske mekanik), idealgasser, stofs termiske egenskaber, termodynamikkens hovedsætninger, termodynamiske processer og entropi."
    },
    {
      "internal_id": 162,
      "code": "T460018101",
      "name": "Digital elektronik og programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Gøre rede for relevante fejl i kredsløb baseret på operationsforstærkere (f.eks. Offset, Bias, CMRR, Slewratebegrænsning, frekvensforhold)",
          "Forstå switching kredsløb med positiv feedback.",
          "Redegøre for signalinterfacing og filtrering.",
          "Redegøre for differentiel måling og –forstærkere.",
          "Redegøre for MOSFETs grundlæggende egenskaber.",
          "Redegøre for forskellige logiske kredse og logiske familier.",
          "Redegøre for binære og hexadecimale talsystemer.",
          "Redegøre for grundlæggende microcontrollerarkitektur.",
          "Redegøre for grundlæggende periferienheder i en microcontroller.",
          "Redegøre for brugen af C/C++ programmeringssproget herunder basale datatyper, I/O af data, kontrolstrukturer, osv.",
          "Redegøre for objekt-orienteret programmering.",
          "Redegøre for brugen af C/C++ standard-bibliotekerne.",
          "Redegøre for udvikling og implementeringen af algoritmer beskrevet ved hjælp af pseudokode og flowchart."
        ],
        "skills": [
          "Analysere elektroniske kredsløb baseret på operations- og differensforstærkere.",
          "Bygge og modificere elektroniske kredsløb, hvor operations- eller instrumenteringsforstærkeren indgår.",
          "Analysere kredsløb til signalkonditionering og filtrering.",
          "Analysere switchkredsløb baseret på MOSFETs.",
          "Opstille et boolsk udtryk for kombinatorisk logisk kredsløb.",
          "C-programmere en microcontroller.",
          "Bestemme grundlæggende opsætning af en microcontroller.",
          "Bestemme opsætning af grundlæggende periferienheder.",
          "Tilpasse interface mellem forskellige logikfamilier.",
          "Programmere algoritmer ud fra pseudokode og flowchart",
          "Skrive programmer i et objekt-orienteret sprog (C++).",
          "Bruge standardbiblioteket og dets klasser (math, string, vector etc.).",
          "Udvikle egne klasser.",
          "Skrive programmer med en kommandobaseret brugergrænseflade.",
          "Udvikle og implementere algoritmer i form af fungerende C++ programmer ud fra pseudokode og flowchart."
        ],
        "competencies": [
          "Anvende tillærte fagligheder inden for elektronik.",
          "Implementere løsninger til konkrete opgaver.",
          "Anvende kombinatoriske kredse i forbindelse med opbygningen af et digitalt kredsløb.",
          "C-programmere en microcontroller og tilhørende periferienheder i forbindelse med udvikling af mindre programmer.",
          "På baggrund af en beskrevet problemstilling kunne udvikle et program, som udfører en tilsigtet databehandling, simulering, styring m.m.",
          "Kunne udvikle løsningsmetoder – algoritmer – og implementere disse i et programsprog (C++)."
        ],
        "contents": [
          "Praktisk operationsforstærkerdesign med modellering af ikke ideelle forhold.",
          "Differens- og instrumenteringsforstærkere.",
          "Signalkonditionering og –interfacing.",
          "MOSFET som switch.",
          "Relevante MOSFET karakteristika.",
          "Grundlæggende filterteknik.",
          "Grundlæggende microcontrollerteknik.",
          "Perifere enheder (eks. Timere, ADC, UART, SPI).",
          "Hukommelsesenheder.",
          "Grundlæggende digitalteknik (logiske kredse, logikfamilier) og datakommunikation.",
          "Pulsbreddemodulering (PWM).",
          "Grundlæggende C-programmering",
          "Grundlæggende C/C++ programmering",
          "Kontrolstrukturer, primitive datatyper, I/O",
          "Klasser og objekter",
          "Basal numerisk matematik og statistik",
          "Udvikling og implementering af algoritmer – f. eks. til modellering og simulering af konkrete fysiske problemer"
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "lectures": 96
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Individuel mundtlig prøve, hvor den enkelte studerende efter lodtrækning eksamineres i Elektronik og Microcontroller eller Programmering.",
        "grading": "point",
        "aids": "unknown."
      },
      "education_ids": [
        37
      ],
      "extended_description": "at forstå og anvende et objekt-orienteret programmeringssprog, f. eks. til at modellere og analysere simple fysiske systemer. at realisere et system, som danner bro mellem den fysiske og den digitale verden, hvor en microcontroller og udarbejdet programkode kan styre en måleproces, foretage målinger af fysiske parametre samt opsamle, lagre, analysere og præsentere måledata. "
    },
    {
      "internal_id": 167,
      "code": "ESNESDB1K2",
      "name": "Digitale Systemer og Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Grundlæggende digitale begreber, herunder f.eks. digital-logiske grundelementer og basal boolsk algebra.",
          "Det anvendte mikroprocessorsystems funktion og arkitektur, f.eks. CPU’ens interne organisering og nødvendige perifere elementer såsom hukommelse og Input/Output enheder, samt programafvikling og interrupt.",
          "Imperative programmeringsprincipper.",
          "Grundlæggende principper for strukturering og test af programmer."
        ],
        "skills": [
          "udvælge og sammenkoble relevante delelementer til et samlet mikrocomputersystem. Det kunne f.eks. være et mikrocontroller-board og udvalgte sensormoduler.",
          "kunne anvende basale digitale kommunikationsprincipper (f.eks. UART)",
          "kunne programmere specifikt til indlejrede systemer under hensyntagen til deres arkitektur (f.eks. endelig ordlængde)",
          "afvikle og teste programmer hvori de ovennævnte grundbegreber indgår i løsningen",
          "anvende korrekt fagterminolog"
        ],
        "competencies": [
          "Den studerende kan baseret på en simpel systemspecifikation, sammensætte og programmere et mikroprocessorsystem, der opfylder et givet formål og implementere et imperativt program som løsning på en defineret opgave."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "unknown."
      },
      "education_ids": [
        38,
        51
      ],
      "extended_description": "Små indlejrede computersystemer findes overalt omkring os, fx i smart-home enheder, biltilbehør, hvidevarer, dørklokker, landbrugsmaskiner, motionsudstyr, etc. Kurset understøtter den studerendes læring inden for indlejrede digitale systemer og deres programmering således, at der opnås kompetencer til at specificere, udvikle og teste basale systemer. Dette sker gennem en kombination af teori og praktiske opgaver på en udvalgt hardwareplatform."
    },
    {
      "internal_id": 168,
      "code": "ASDK20001U",
      "name": "Social Data Science Base Camp",
      "contents": {
        "type": "B",
        "knowledge": [
          "Define and explain how to use basic concepts within programming, including variables and data structures, control flow, and functions",
          "Account for use cases of key Python libraries for data collection and analysis, including Pandas and MatPlotlib",
          "Define basic concepts within statistics and underlying mathematics",
          "Account for advantages and disadvantages of different quantitative approaches, in particular basic machine learning and regression"
        ],
        "skills": [
          "Perform elementary programming tasks in Python drawing on basic programming concepts",
          "Navigate and draw on online and offline resources to debug Python programs",
          "Use the basic toolkit to use Application Programming Interfaces for data collection and processing",
          "Set up basic Python scripts for scraping and adjust them to various online sources",
          "Flexibly structure, merge, and reformat data coming from various sources and in different forms, including quantitative and qualitative data",
          "Conduct exploratory data analysis using descriptive statistics, visualization methods, and content analysis",
          "Estimate regression models and explain the output"
        ],
        "competencies": [
          "Work with and analyse data in interdisciplinary teams",
          "Critically assess and reflect on their own and others’ coding practices",
          "Communicate social data science insights using basic data visualization and appropriate statistical methods to relevant audiences",
          "Integrate a netnographic approach with computational data collection"
        ],
        "contents": [
          "This course introduces students to the interdisciplinary degree programme of Social Data Science. In the first week, students are introduced to the group-based learning and working practices, which are core elements of the degree program. For the rest of the term, students are introduced to the fundamentals of programming, data collection, and data analysis in Python including regression analysis. This will be combined with lectures and exercises that focus on elementary statistical modelling techniques and integrated quali-quant methods. Overall, the course will teach students the basic skills to program, collect and process data from a variety of online sources and structure them into a dataset, and to conduct basic analyses on that dataset."
        ]
      },
      "size": 15,
      "time": {
        "absolute": true,
        "lectures": 56,
        "preparation": 140,
        "exercises": 84,
        "project": 132,
        "total": 412
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "To be eligible for the exam in Social Data Science Base Camp, it is a requirement that students have completed and submitted all of the exercise assignments via Absalon prior to the exam start date. Each class-day will have an associated exercise assignment (max. 28 Jupyter Notebooks).",
        "type": "Portfolio. The exam will consist of submitting code to collect and process data in order to produce a dataset of the student’s choosing, along with a description and reflection on how they constructed the dataset. The code must be in the form of a Jupyter Notebook. Within the Notebook, students will also be required to conduct a basic analysis on that dataset in accordance with the Learning Outcomes.",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        39
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 171,
      "code": "T340081401",
      "name": "Embedded Systems 1",
      "contents": {
        "type": "B",
        "knowledge": [
          "Knowledge of basic programming technics",
          "Knowledge of the syntax of a high-level programming language",
          "A basic knowledge of the steps in design and implementation of embedded software."
        ],
        "skills": [
          "The ability to analyze smaller programs",
          "The ability to design smaller programs from a textual description",
          "The ability to implement smaller programs",
          "The ability to make and document structured tests of smaller programs."
        ],
        "competencies": [
          "The ability to define, develop and test small C-programs for embedded solutions in an electronic development context."
        ],
        "contents": [
          "Number systems",
          "Programming in C",
          "Simple data types",
          "Control structures",
          "Functions",
          "Arrays",
          "Structs",
          "Pointers",
          "Bitwise operators",
          "Microcontroller systems"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 48
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam, 3-hours",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        40,
        41,
        50
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 176,
      "code": "LSLS10127U",
      "name": "GIS, database og SQL-analyser",
      "contents": {
        "type": "B",
        "knowledge": [
          "Kendskab til installation, sikkerhed, tabeller, relationer, strukturer, datatyper, queries, SQL, geografiske funktioner, download af data, dataoverførsel, backup, restore."
        ],
        "skills": [
          "Anvende programmer til installation og opsætning af database til brug på pc",
          "Definere datatyper og datastrukturer for forskellige projekter med henblik op opbygning af case",
          "Definere og opstille views"
        ],
        "competencies": [
          "Strukturere data og vælge relevante funktioner med henblik på løsning af problemstillinger i fagligrelevante opgaver indenfor administration af fagområder for Skov- og landskabsingeniører og Have- og parkingeniører."
        ],
        "contents": [
          "Målet er kurset er at den studerende bliver kompetent i brugen af både alment tilgængelige SQL database teknikker og spatielle funktionstilføjelser til SQL, således SQL databasen kan udnyttes optimalt til behandling og analyse af såvel spatielle og ikke-spatielle data.",
          "Opsætning og installation af databaser. Indlæsning af data. Strategier mht. organisering og indeksering af data. Anvendelse af data med og uden spatielle egenskaber.",
          "PostgreSQL/PostGIS, QGIS"
        ]
      },
      "size": 2.5,
      "time": {
        "absolute": true,
        "lectures": 24,
        "preparation": 20,
        "exercises": 16,
        "total": 60
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Krav til indstilling til eksamen: Der udarbejdes løbende under kurset en række opgaver, som skal være afleveret inden eksamen kan påbegyndes.",
        "type": "Skriftlig prøve, 3 timer",
        "grading": "point",
        "aids": "none"
      },
      "education_ids": [
        41,
        42
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 178,
      "code": "T140023101",
      "name": "Grundlæggende computational design",
      "contents": {
        "type": "B",
        "knowledge": [
          "Teoretiske koncepter og historie for computational design",
          "Datadrevne designmetoder og åbne designprocesser",
          "Vigtigste algoritmiske designprocesser og teknikker anvendt i design og ingeniørvidenskab"
        ],
        "skills": [
          "etablere parametriske modelleringsarbejdsprocesser ved hjælp af visuelle programmeringsværktøjer",
          "modellere former, rum og objekter med forskellig geometrisk kompleksitet med algoritmiske processer",
          "bruge og styre simple digitale fabrikationsprocesser til modelleringsformål"
        ],
        "competencies": [
          "kunne anvende digital tænkning til at udvikle/løse designproblemer på forskellige niveauer",
          "kunne finde originale løsninger på computational design problemstillinger",
          "kunne udforske og vælge designmuligheder ud fra proceduremæssige arbejdsgange"
        ],
        "contents": [
          "Den ''digitale drejning'' inden for arkitektur er udviklet i de sidste to årtier og er hurtigt blevet populær blandt designere verden over. I dag er computational design en grundlæggende tilgang til at udtænke, udvikle og levere design på tværs af skalaer. Kurset sigter mod at introducere principper og metoder til computational design ved hjælp af visuelt programmeringssprog.",
          "Den første del af kurset vil fokusere på digital læring, hvor de studerende opnår viden og arbejder individuelt på grundlæggende metoder relateret til parametrisk, generativt og algoritmisk design.",
          "I anden del af kurset vil de studerende arbejde i små grupper på en tænkt designopgave, der vil blive revideret hver uge."
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 48
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Individuel portefølje med afleveringer/projekter afleveret i slutningen af semesteret.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        43
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 180,
      "code": "HKMB00271U",
      "name": "Grundlæggende datalogi",
      "contents": {
        "type": "B",
        "knowledge": [
          "På kurset opnår den studerende viden om og forståelse af grundlæggende programstrukturer (f.eks. iteration og betingelsessætninger), datastrukturer, programmeringsprincipper (f.eks. objektorienteret programmering) og interaktionsprincipper (f.eks. mus-input)."
        ],
        "skills": [
          "Den studerende får færdigheder i at analysere en afgrænset datalogisk problemstilling vedrørende et interaktivt system, f.eks. en hjemmeside, designe og programmere en mindre, datalogisk løsning samt vurdere og argumentere for en konkret softwareløsnings tekniske kvalitet og egnethed."
        ],
        "competencies": [
          "Endelig opnås kompetencer i at beskrive og formidle en given softwareløsning, herunder følge god skik for teknisk dokumentation og kommentering af programtekst."
        ],
        "contents": [
          "Grundlæggende datalogi giver dig en basal forståelse af, hvad it egentlig er og gennemgår centrale begreber, tilgange og grundlæggende principper inden for programmering. Den studerende lærer at redegøre for og anvende basale datastrukturer, og at programmere løsninger af konkrete problemstillinger. Du bliver ikke nødvendigvis super-programmør, men du får de grundlæggende tekniske færdigheder, som bruges i fagene senere på uddannelsen (ift. bl.a. design, databasehåndtering og modellering af it-systemer)."
        ]
      },
      "size": 15,
      "time": {
        "absolute": true,
        "lectures": 56,
        "preparation": 283.5,
        "exercises": 70,
        "total": 409.5
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Aktiv undervisningsdeltagelse er en forudsætning for at gå til den ordinære eksamen. Den aktive undervisningsdeltagelse består af godkendelse af mindst 4 af 5 stillede opgaver med et omfang på hver 5-7 normalsider",
        "type": "Skriftlig aflevering. Bunden hjemmeopgave under forudsætning af aktiv undervisningsdeltagelse. Der gives 7 dage til besvarelsen.",
        "grading": "unknown",
        "aids": "unknown"
      },
      "education_ids": [
        44
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 182,
      "code": "T580013101",
      "name": "Grundlæggende objekt orienteret programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Et programmeringssprogs grundlæggende elementer",
          "PC baseret programudviklingsmiljø",
          "Kontrolstrukturer",
          "Funktioner",
          "Klasser og objekter",
          "Basale datastrukturer og datamanipulation",
          "Søge- og sorteringsalgoritmer"
        ],
        "skills": [
          "Skrive programmer i et objektorienteret sprog",
          "Bruge programmeringssprogets funktionelle bibliotek",
          "Udvikle programmørdefinerede klasser",
          "Skrive programmer med kommandolinje-baseret brugerinterface",
          "Skrive programmer med grafisk brugerinterface (Graphic User Interface - GUI)"
        ],
        "competencies": [
          "Udvikle programmer til databehandling inden for matematik, simulering, kontrol/styring, etc.",
          "Udvikle og beskrive algoritmer for løsning af ingeniørmæssige problemstillinger.",
          "Implementere algoritmer i et programmeringssprog"
        ],
        "contents": [
          "Kontrolstrukturer",
          "Klasser og objekter",
          "Grundlæggende datastrukturer",
          "Søge- og sorteringsalgoritmer",
          "Udvikle og implementere algoritmer"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Mundtlig prøve",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        45
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 189,
      "code": "DSNIDAK124",
      "name": "Grundlæggende Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Forstå det basale I computational thinking (algoritmisk) og hvordan det hænger sammen med programmering",
          "Forstå datatyper, -strukturer (fx array, struct, list) og funktioner",
          "Basal introduktion til begreberne access (public, private, protected), indkapsling, resursestyring, lagerallokering, og sikkerhed",
          "Forstå det basale i webudvikling",
          "Forstå god og dårlig programmeringspraksis"
        ],
        "skills": [
          "Evne til at forstå, evaluere, modificere og skabe programkode",
          "Evne til at anvende fundamental programmering til en række problemer",
          "Evne til at planlægge og anvende systematisk aftestning af mibdre programmer",
          "Basalt kendskab til udvalgte programmeringssprog"
        ],
        "competencies": [
          "Designe, implementere og evaluere en programmeret løsning for en mindre, specifik programmeringsopgave",
          "Designe, implementere og evaluere en webapplikation"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        46
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 197,
      "code": "BSGRPRO1KU",
      "name": "Grundlæggende programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "FORKLARE og ANVENDE centrale begreber (inkl Java-konstruktioner)",
          "SAMMENLIGNE Java-konstruktioner og ARGUMENTERE for valg deriblandt",
          "BEHANDLE data (repræsentere informationer samt indlæse, transformere og udskrive data)",
          "ANALYSERE, DESIGNE, IMPLEMENTERE og TESTE et system med udgangspunkt i en specifikation (problemformulering)",
          "PRÆSENTERE systemets formål, opbygning og virkemåde både skriftligt og mundtligt"
        ],
        "contents": [
          "Objekt-orienteret analyse, design og implementering.",
          "Programmering i Java: klasser, objekter, metoder, felter, variable; simple typer; udtryk, ordrer og erklæringer; valg (if, switch), lazy and/or, gentagelse (for, while); rekursive metoder; Javas klassebiblioteker; collections; arrays; konstruktion af simple brugergrænseflader med Java Swing; statisk vs dynamisk typing; virtual dispatching; brug af generiske typer",
          "Klassedesign, virtuelle metoder, abstrakte klasser, interfaces, indkapsling; konstruktion af løkker;",
          "Test og dokumentation",
          "Design af programløkker"
        ]
      },
      "size": 15,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "3 prøver",
        "3 afleveringsopgaver",
        "høsten (løbende programmeringsopgaver)"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Submission for groups with following oral exam supplemented by the submission. Shared responsibility for the report. Eksamen er 30 minutters individuel mundtlig eksamen (minus tid til votering, feedback og rotation af studerende, så - i praksis - er den reelle eksamenstid tættere på 20-25 minutter). Under eksaminationen vil den studerende blive bedt om at i) forklare centrale begreber i kurset, ii) diskutere projektet, samt iii) demonstrere programmeringskompetence med udgangspunkt i en lille simplificeret løsning af projektet, som udleveres på forhånd.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        47
      ],
      "extended_description": "Grundlæggende Programmering er det første programmeringskursus på uddannelsen. Kurset har til formål at gøre de studerende i stand til at kunne skrive mindre programmer i Java uden tidligere at have programmeret. Kurset introducerer grundlæggende objekt-orienterede programmeringsprincipper samt hvordan man designer mindre programmer. De første to tredjedele af semesteret vil undervisningen primært bestå af forelæsninger og øvelser samt Live Coding øvelser, som er sessioner hvor praktisk kodning bliver illustreret sammen med de studerende. I den sidste tredjedel skal alle studerende lave et programmeringsprojekt i små grupper."
    },
    {
      "internal_id": 199.5,
      "code": "E1OPRG-01",
      "name": "Objektbaseret programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "Identificere, anvende, udvælge og kombinere kontrolstrukturer",
          "Definere, konstruere og anvende C/C++-funktioner",
          "Definere og anvende endimensionelle arrays",
          "Identificere og anvende datastrukturer implementeret som C structs",
          "Definere og anvende pointerbegrebet, til tilgang til simple variable, objekter og sammensatte datastrukturer.",
          "Anvende basale objektorienterede principper såsom indkapsling, information hiding og opdeling i data og metoder (funktioner).",
          "Anvende et UML klassediagram som model for implementering af en klasse.",
          "Identificere og anvende klasserelationen ”Komposition” som begreb og implementere denne i C++.",
          "Anvende programmoduler til strukturering af funktioner, datastrukturer og klasser.",
          "Konstruere og strukturere de ovennævnte programmeringselementer til programmer, der løser en simpel, specificeret opgave."
        ],
        "contents": [
          "Basale datatypevariable og deres operationer",
          "Kontrolstrukturer (program flow)",
          "Simpel konsolafhængigt input/output",
          "Funktioner",
          "Arrays, Pointers og C strings",
          "C structs",
          "Programstruktur og -moduler",
          "Klasser og objekter i C++",
          "C++ strings",
          "C++ simpel streaming input/output",
          "UML Klassediagrammer og klasserelationen komposition"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig, 2 timer",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        52
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 200,
      "code": "H810027201",
      "name": "Grundlæggende programmering og Computational Thinking",
      "contents": {
        "type": "B",
        "knowledge": [
          "have viden om grundlæggende begreber og principper inden for programmering og Computational Thinking."
        ],
        "skills": [
          "kunne analysere problemer og formulere løsninger ved hjælp af disse begreber og principper."
        ],
        "competencies": [
          "unknown"
        ],
        "contents": [
          "Undervisningen indbefatter en indføring i programmeringens grundlæggende begreber og principper og hvordan disse relaterer til Computational Thinking og problemløsning.",
          "Undervisningen har en praktisk tilgang til tilegnelse af problemløsningsfærdigheder, og de studerende programmerer f.eks. animationer eller elektroniske projekter."
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "total": 280
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Hjemmeopgave på baggrund af en it-applikation. 1 studerende maks. 4 normalsider; 2 studerende maks. 3 normalsider per studerende, ekskl. forside, bibliografi og bilag.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        53
      ],
      "extended_description": "De beskrevne mål for viden, færdigheder og kompetencer understøttes af de specifikke undervisnings- og arbejdsformer beskrevet nedenfor. Samtidig er undervisnings- og arbejdsformer tilrettelagt i overensstemmelse med prøveformen, som beskrevet under Eksamensbestemmelser, der vurderes at udgøre den mest hensigtsmæssige ramme for udprøvning af den studerendes opnåelse af fagets mål. Eksamensformen er Hjemmeopgave og inkluderer programmeringsopgaver, hvilket giver de studerende mulighed for at demonstrere deres teoretiske og praktiske kompetencer inden for grundlæggende programmering. Eksamensformen Hjemmeopgave træner desuden den studerendes evne til i skriftlig form at udarbejde grundlæggende koncepter for Computational Thinking og programmering."
    },
    {
      "internal_id": 203.1,
      "code": "ESNEITB1K1F",
      "name": "Imperativ Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Udviklingsmiljø og kompilering",
          "Imperative principper",
          "Datatyper og variable",
          "Kontrolstrukturer",
          "Funktioner og procedurer",
          "Datastrukturer herunder arrays",
          "Input/output",
          "Sammensatte datastrukturer",
          "Simple algoritmer (f.eks. sortering og søgning)",
          "Basal test af programmer"
        ],
        "skills": [
          "skrive, afvikle og teste programmer hvori de ovennævnte grundbegreber indgår i løsningen",
          "anvende korrekt fagterminologi"
        ],
        "competencies": [
          "Den studerende kan efter kurset både selvstændigt og i samarbejde med andre implementere et imperativt program som løsning på en defineret opgave."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        54
      ],
      "extended_description": "I dette kursus opnår den studerende indblik i grundlæggende begreber som algoritmer, datastrukturer og computerarkitekturer. Computere er – uanset fagområde – et af de vigtigste værktøjer til problemløsning i dag. Den studerende skal derfor opnå et kendskab til datalogiske grundbegreber i så almen en form, at vedkommende bliver i stand til at løse problemer ved hjælp af imperative programmeringssprog."
    },
    {
      "internal_id": 203.2,
      "code": "285191U013",
      "name": "Programmering for computerteknologi",
      "contents": {
        "type": "A",
        "objectives": [
          "Beskrive og diskutere kommandoer og kontrol-strukturer indenfor imperativ programmering;",
          "Beskrive sammenhængen mellem iteration og rekursion;",
          "Beskrive og diskutere forskellige måder at strukturere programmer på;",
          "Forklare begreberne, der ligger bag imperativ og funktionel programmering;",
          "Beskrive teknikker til at ræsonnere om programmers korrekthed;",
          "Ræsonnere uformelt omkring programmer og relatere ræsonnementerne til test-cases."
        ],
        "contents": [
          "Programmering drejer sig om at løse problemer: Programmer, der kan udføres på en computer, bliver udviklet for at løse et problem. Under forudsætning af, at vi forstår problemet, som skal løses, står vi over for to udfordringer. Den første er, hvordan man instruerer computeren, og den anden er, hvordan man bedømmer om problemet er løst på passende vis. Den første udfordring kræver, at vi studerer kommandoer og kontrolstrukturer, som vi kan bruge til at instruere en computer ved hjælp af programmeringssprog samt måder, hvorpå koden kan struktureres. Den anden udfordring kræver, at vi redegør for de kommandoer, vi bruger, og fordi et programmeringssprog er en formel tekst, vil vi udnytte denne præcision i vores ræsonnement for at opnå en høj grad af præcision."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Aflevering og godkendelse af obligatoriske hjemmeopgaver. Deltagelse ved minimum 80% af de praktiske øvelser",
        "type": "Skriftlig. 3 timer",
        "grading": "point",
        "aids": "none"
      },
      "education_ids": [
        55
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 205,
      "code": "DSNDATFB105",
      "name": "Imperativ programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Udviklingsmiljø og kompilering",
          "Imperative principper",
          "Datatyper og variable",
          "Kontrolstrukturer",
          "Funktioner og procedurer",
          "Datastrukturer herunder arrays",
          "Input/output",
          "Sammensatte datastrukturer",
          "Simple algoritmer (f.eks. sortering og søgning)",
          "Basal test af programmer"
        ],
        "skills": [
          "skrive, afvikle og teste programmer hvori de ovennævnte grundbegreber indgår i løsningen",
          "anvende korrekt fagterminologi"
        ],
        "competencies": [
          "både selvstændigt og i samarbejde med andre implementere et imperativt program som løsning på en defineret opgave"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        56,
        107
      ],
      "extended_description": "I dette kursus opnår den studerende indblik i grundlæggende begreber som algoritmer, datastrukturer og computerarkitekturer. Computere er – uanset fagområde – et af de vigtigste værktøjer til problemløsning i dag. Den studerende skal derfor opnå et kendskab til datalogiske grundbegreber i så almen en form, at vedkommende bliver i stand til at løse problemer ved hjælp af imperative programmeringssprog."
    },
    {
      "internal_id": 207,
      "code": "02314",
      "name": "Introductory Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Use primitive datatypes and reference types.",
          "Use arrays.",
          "Use typical constructs from imperative programming languages, e.g. loops and branching.",
          "Define and apply methods with/without parameters and with/without return value.",
          "Understand the anatomy of classes and objects.",
          "Define and apply classes and objects in an object oriented program.",
          "Use inheritance.",
          "Use simple I/O operations.",
          "Define and handle exceptions."
        ],
        "contents": [
          "Planning methods for programs: Pseudo-code and flow charts.",
          "Primitive data types (integers, booleans, floating points, and strings).",
          "Reference types.",
          "Data structures (arrays).",
          "Values, operators and expressions.",
          "Variable and assignments.",
          "Control statements (for, if and while statements, nested loops).",
          "Classes and objects (incl. attributes and methods).",
          "Inheritance (extension of classes with attributes and methods).",
          "Input/output (from/to monitor, keyboard, files).",
          "Simple exception handling.",
          "Use of an IDE."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam, 2 hours",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        57
      ],
      "extended_description": "The goal of the course is to make the student able to use the basic concepts and techniques in an imperative- and object oriented programming language. The course will use a programming language that is used in industries (for the time being JAVA). The main purpose of the course is to make the student able to design and implement smaller programs."
    },
    {
      "internal_id": 217,
      "code": "DSNDVB103",
      "name": "Indledende Programmering for Datavidenskab",
      "contents": {
        "type": "B",
        "knowledge": [
          "Udviklingsmiljø og kompilering",
          "Datatyper og variable",
          "Udtryk",
          "Kontrolstrukturer",
          "Abstraktioner, f.eks. funktioner og procedurer",
          "Datastrukturer",
          "Input/output",
          "Simple algoritmer (f.eks. sortering og søgning)",
          "Fejlhåndtering",
          "Modularisering",
          "Test af programmer"
        ],
        "skills": [
          "skrive, afvikle og teste programmer hvori de ovennævnte grundbegreber indgår i løsningen",
          "anvende korrekt fagterminologi"
        ],
        "competencies": [
          "Den studerende kan efter kurset både selvstændigt og i samarbejde med andre implementere et program som løsning på en defineret opgave"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        58
      ],
      "extended_description": "I dette kursus opnår den studerende grundlæggende færdigheder i programmering. Computere er – uanset fagområde – et af de vigtigste værktøjer til problemløsning i dag. Den studerende skal derfor opnå et kendskab til datalogiske grundbegreber i så almen en form, at vedkommende bliver i stand til at løse problemer ved hjælp af programmering."
    },
    {
      "internal_id": 233,
      "code": "515221U001",
      "name": "Programmering og statistik for biologer",
      "contents": {
        "type": "A",
        "objectives": [
          "Basic programming functions and computational thinking.",
          "Data exploration and quality control tools.",
          "Data management and manipulating data objects",
          "Data visualization",
          "To relate data to biological theory to critically analyse data and develop data models",
          "identify and communicate their research question as the variation they are trying to explain and the motivations behind it",
          "formulate and communicate their research hypothesis, mechanistically based and grounded in biological theory",
          "build robust statistical models to inform their experimental design and ultimately model their hypothesis",
          "think critically about and assess their model choices and assumptions and communicate the limitations of their model",
          "quantify the patterns and likelihood of the underlying relationships through model selection",
          "report the results of their hypothesis testing including variation explained, significant relationships and their patterns",
          "visualize their hypothesis testing results including modelled patterns, uncertainty, and data",
          "use their model results to make predictions, and understand the limitations and uncertainty when doing so.",
          "Manage, manipulate, and visualize biological data in R.",
          "Critically analyse biological data in R.",
          "Apply an end-to-end hypothesis-testing framework",
          "communicate a biological research question and underlying motivation,",
          "communicate a research hypothesis and mechanistic biological foundation,",
          "describe and assess the data available to test a hypothesis,",
          "identify and build a robust statistical model tailored to a hypothesis,",
          "assess the performance and usefulness of the statistical model",
          "report results in a meaningful and transparent way",
          "Communicate data analysis and hypothesis testing in a written biological report format."
        ],
        "contents": [
          "The purpose of this course is to train students in the quantitative skills they need to undertake data analysis and hypothesis testing in biology. These skills include programming to support data handling, exploration and visualization as well as fundamental statistical modelling training to undertake quantitative hypothesis testing.",
          "The course places a strong emphasis on critical thinking about data and hypothesis development and testing – i.e. the 'doing' of biology.",
          "Students will explore the nature of biological data by learning to explore, groom, visualize and analyse data with a critical eye grounded in biological theory.  In all cases, data analysis skills will be performed through the free and open-source programming language R.",
          "Students will learn statistical modelling concepts and how they can be used to test hypotheses.  In all cases, statistical skills learning will be motivated and framed within a hypothesis-testing context. This will allow students to relate their own hypothesis testing to biological theory, and apply the methods learned in class for future hypothesis testing tasks.",
          "Students will be trained in a statistical modelling framework that they can use to move from research hypothesis to statistical modelling and results.  This flexible process is extendable and intuitive and can be applied to assess hypotheses common to biology and beyond."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Submission and approval of 10 out of 13 written reports.",
        "type": "Student assessment is based on a take-home exam.  Students will receive a research hypothesis and unique dataset with which to test the hypothesis.  Students will test the hypothesis using the data analysis and statistical framework learned in class.  Students will submit their analysis and interpretation via a report. Students will receive their take-home exam assignment on the last day of class with the exam due on the last day of exams.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        59,
        142
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 234,
      "code": "BBINPRO1KU",
      "name": "Introduction to Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "analyse a given, simple computational task such as manipulation of a text-based database or external hardware device to the extent of designing a programmatic solution and implementing it in a modern, text-base, domain-neutral programming language",
          "test the correctness of a piece of code",
          "write program documentation",
          "reason about the computational complexity of an algorithm",
          "express functionality in terms of abstract data type or application programming interface",
          "use text-based tools of program development, including an editor and command-line tools."
        ],
        "contents": [
          "Sequential execution, expression, selection, iteration, state, variable, assignment",
          "String manipulation and text files",
          "Testing and debugging",
          "Searching, sorting",
          "Worst-case running time",
          "Types",
          "Objects, classes"
        ]
      },
      "size": 7.5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam on premises",
        "grading": "point",
        "aids": "with restrictions"
      },
      "education_ids": [
        60
      ],
      "extended_description": "The course provides students with a basic understanding of computational thinking and programming both for their own future use and for their ability to collaborate with experienced programmers and software developers. The students will learn about the concept of computational thinking and get a hands-on introduction to programming using the Python programming language. Programming and computational thinking are basic primitives in today’s IT world. This course provides a basic and hands-on introduction into these topics. The programming language is going to be Python. After taking the course, students have a solid technical foundation with regard to programming."
    },
    {
      "internal_id": 235,
      "code": "02631",
      "name": "Introduction to programming and data processing",
      "contents": {
        "type": "A",
        "objectives": [
          "Explain basic programming concepts",
          "Design and implement programs to solve simple computable engineering problems",
          "Use the integrated development environment and user interface of the programming language",
          "Import data in different formats",
          "Use variables of different types and perform basic computations",
          "Organize code using scripts and functions",
          "Write well-structured, commented, and readable code",
          "Use functions from existing toolboxes and libraries",
          "Graphically visualize data and information",
          "Write technical documentation"
        ],
        "contents": [
          "Programming language: Matlab or Python. Using the desktop environment and language documentation.",
          "Working with numbers, strings, logical values, vectors and matrices.",
          "Using arithmetic and logical operators, branching statements, looping and vectorization.",
          "Organizing code using scripts and functions.",
          "Error checking user input and creating interactive programs.",
          "Writing comments and technical documentation.",
          "Reading and writing data files. Graphical visualization of data."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam: 2 hours",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        61,
        67,
        73
      ],
      "extended_description": "The use of computers for technical/mathematical computations and simulations is central for many areas at DTU, and it is therefore necessary to have a working knowledge of computer programming. In the course students will learn about basic concepts and techniques in programming, as well as how to write programs with a focus on computations with technical/engineering applications. The participants will be able to design and develop well-structured smaller programs, test the design and program, read various data formats, and visualize the results graphically. One of the programming languages Matlab or Python is used."
    },
    {
      "internal_id": 239,
      "code": "KSINPRO1KU",
      "name": "Introductory Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Apply basic programming constructs in Java.",
          "Explain basic programming constructs in Java.",
          "Analyze a problem description, with the intent of implementing a solution.",
          "Design a system based on an analysis.",
          "Implement a system based on a design.",
          "Test a system and evaluate to what degree the tests cover the system."
        ],
        "contents": [
          "This course teaches the basics of Java programming, enabling you to work practically in a modern high-level language.",
          "Object Oriented analysis, design, and implementation Programming in Java: Classes, objects, methods, fields, variables, simple types, expressions, statements, declarations, conditionals, lazy evaluation, repetition, recursion, class libraries, regular expressions, collections, arrays, simple graphical user interface, static vs dynamic typing, virtual dispatching, generic types, class design, abstract classes, interfaces, encapsulation, test and documentation, file input/output, exceptions."
        ]
      },
      "size": 15,
      "time": {
        "absolute": false,
        "preparation": 0.3,
        "lectures": 0.1,
        "exercises": 0.1,
        "assignments": 0.2,
        "project": 0.2,
        "exam": 0.05,
        "other": 0.05,
        "total": 1
      },
      "mandatory_activities": [
        "7 out of 10 weekly assignments",
        "1 midterm",
        "group project"
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Written exam on premises",
        "grading": "point",
        "aids": "with restrictions"
      },
      "education_ids": [
        62
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 240,
      "code": "50191U004",
      "name": "Introduktion til datavidenskab",
      "contents": {
        "type": "A",
        "objectives": [
          "Anvende værktøjer i R til indlæsning af datasæt.",
          "Beregne deskriptive mål i R og beskrive hvad disse fortæller om data.",
          "Anvende R til at lave grafiske fremstillinger af data.",
          "Anvende R-markdown til at dokumentere analysen af data og til at lave rapport.",
          "Udarbejde en systematisk fremstilling af en dataanalyse."
        ],
        "contents": [
          "Kurset fokuserer på gradvist at blive fortrolig med arbejdsgangen i dataundersøgelser i et datavidenskabsprojekt samt implementering af denne arbejdsgang.",
          "Kurset vil kombinere elementer af programmering med undersøgelser af konkrete datasæt som bruges for at illustrere metoderne til at visualisere, bearbejde og undersøge data.",
          "I løbet af semesteret vil der være 4-6 perspektiverende oplæg omkring indhold og muligheder i datavidenskab. Anvendelsesområder for datavidenskab, den samfundsmæssige kontekst og den forventede betydning for virksomhed og samfund kan alle være emner i disse oplæg, såvel som omtale af jobmuligheder for en kandidat i datavidenskab. Emnerne vil blive dækket gennem gæsteforedrag med personer med indsigt i datavidenskab."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "undervisningsdeltagelse. Aktiv deltagelse i øvelsesarbejdet indebærende fremmøde ved de teoretiske øvelser, fremlæggelse af 1 øvelsesopgave, godkendelse af to skriftlige rapporter, samt kort fremlæggelse af den sidste rapport.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        63
      ],
      "extended_description": "Hensigten med kurset er at give de studerende et basalt indblik i datavidenskab. Dette gøres med speciel fokus på datahåndtering, eksploration og visualisering. Målsætningen er at give et bredt overblik over datavidenskab og introducere de studerende for de basale redskaber og metoder til at håndtere de typiske arbejdsrutiner man møder i et projekt. De studerende stifter kendskab med hvad det indebærer at indsamle og organisere et datamateriale. De lærer at transformere, visualisere og opsummere datasæt, samt at beskrive de sammenhænge de observerer i datamaterialet. De studerende introduceres til programpakken R, som er et programmingssprog til bl.a. dataanalyse og visualisering."
    },
    {
      "internal_id": 241,
      "code": "DSNBAITB312",
      "name": "Grundlæggende objektorienteret programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "begreber og begrebsdannelse",
          "klasser og objekter",
          "variable og metoder",
          "indkapsling og synlighed",
          "data abstraktion",
          "metode signature (parametre og returværdi) og metode krop",
          "aggregering af klasser",
          "anvendelse af centrale dele af standard klassebiblioteker herunder collection klasser",
          "specialisering og nedarvning",
          "polymorfi og dynamisk binding",
          "interfaces og abstrakte klasser",
          "struktureret fejlhåndtering vha. exceptions",
          "systematisk dokumentation af offentlige grænseflader til klasser og interfaces"
        ],
        "skills": [
          "kunne implementere mindre programmer i et objektorienteret programmeringssprog hvor sprogets centrale egenskaber anvendes",
          "evnen til at skabe objekt-orienteret programmer via en buttom-up tilgangen",
          "kunne implementere simple grafiske brugergrænseflader ved brug af en objekt-orienteret tilgang",
          "forklare og argumentere for sammenhængene og detaljerne i et mindre objektorienteret program",
          "udarbejde og gennemføre en systematisk testning af væsentlige dele af et objektorienteret program",
          "kunne dokumentere væsentlige dele af et objektorienteret program"
        ],
        "competencies": [
          "kunne implementere, dokumentere og teste et mindre objektorienteret program, således at det kan køres og er forståeligt, læsbart, og tilgængeligt for andre programmører"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Mundtlig prøve med udgangspunkt i besvarelsen af den større opgave",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        64
      ],
      "extended_description": "At den studerende lærer de centrale begreber og struktureringsmekanismer inden for et objektorienterede programmeringssprog. Den studerende skal kunne anvende sproget til at skabe mindre programmer og forklare væsentlige valg i struktureringen af programmet. Objektorienteret programmering er et dominerende programmerings-paradigme i software-udvikling"
    },
    {
      "internal_id": 245,
      "code": "N330004101",
      "name": "Introduktion til programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "designe modeller for konkrete problemer.",
          "udarbejde en programstruktur baseret på modellen.",
          "implementere det planlagte program i det konkret anvendte programmeringssprog.",
          "designe og implementere rekursiv løsning af problemer.",
          "anvende basale træstrukturer og algoritmer for disse."
        ],
        "contents": [
          "De basale struktureringsredskaber sekvens, gentagelse, betinget instruktion og procedure.",
          "Fundamentale datastrukturer som lister, maps, træer.",
          "Struktureretprogrammeringsteknik, herunder eksempler og anvendelser.",
          "Rekursion og rekursive data strukturer."
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 40
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Mundtlig forsvar 30 minutter. Portfolio bestående af: Eksamen består af gruppeprojekt (programmering og skriftelig rapport), muligvis delt i flere afleveringer. Der holders mundtligt forsvar i eksamensperiode i januar. Forsvaret afholdes som gruppeprøve, hvor det tages hensyn til hver studerendes individuelt bidrag. Derudover er der nogle små obligatoriske (individuelle) opgaver, der skal løses i nogle udvalgte e-timer i løbet af semestret.",
        "grading": "point",
        "aids": "all for project. none for exam"
      },
      "education_ids": [
        65,
        124
      ],
      "extended_description": "Kurset giver en introduktion til struktureret programmering. Kurset giver et videnskabeligt grundlag for at løse problemer ved modellering og implementering af programmer. I forhold til uddannelsens kompetenceprofil har kurset eksplicit fokus på: implementere brugen af computere i praksis. Kurset bygger på de studerendes gymnasiale kompetencer i matematik. Kursets indhold er essentielt for senere kurser i algoritmer og softwareudvikling, hvor den studerende skal kunne programmere, nemlig Scientific Programming. Kurset undervises i Python."
    },
    {
      "internal_id": 248,
      "code": "TBIBDB19303",
      "name": "Introduktion til Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "et specifikt programmeringssprog, dens struktur, logik og syntaks",
          "softwareudvikling til styring og skabning af interaktive designs",
          "forskellige kommunikations protokoller",
          "simple styrings mekanismer"
        ],
        "skills": [
          "oversætte en problemstilling i sekvenser der kan overføres til kode",
          "finde informationer og vejledninger til at videreudvikle færdigheder i programmering",
          "udarbejde simple prototype applikationer"
        ],
        "competencies": [
          "tolke kode fra eksempler og biblioteker",
          "anvende biblioteker",
          "anvende og forstå grundelementerne af det kursusbestemte udviklingsmiljø",
          "fejlsøge kode"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        66
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 250,
      "code": "25328",
      "name": "Mathematical models in ecology",
      "contents": {
        "type": "A",
        "objectives": [
          "Present and discuss a mathematical model for an audience of peers.",
          "Develop, discuss, and solve numerically differential and difference equation models occurring in mathematical biology.",
          "Use general arguments to assess the fertility, mortality, and migration in real populations, and their importance in models.",
          "Assess characteristic levels and time scales in population dynamic models.",
          "Argue for choice of parameter values in a model applied in a specific biological context.",
          "Determine the stability of steady states and identify bifurcations.",
          "Determine which model structure is appropriate to answer a given question related to, e.g., resource management or risk assessment.",
          "Utilize population models to answer such questions.",
          "Visualize the dynamics of biological systems using modelling toolboxes.",
          "Apply good programming practices for models of biological systems.",
          "Discuss simple mathematical models for sustainable use of marine resources and ocean conservation, in support for UN sustainable development goal 14 (life below water) and goal 15 (life on land)."
        ],
        "contents": [
          "The course is an introduction to mathematical modelling of population dynamics of living organisms, from bacteria to whales.",
          "Focus is on conceptual models based on differential and difference equations that illustrate basic concepts in population modelling.",
          "An important goal is to develop the ability to connect a biological context to an abstract mathematical model, i.e., to develop an understanding of the biological assumptions underlying the model and the ecological consequences of its results.",
          "The main topics are single-species population models (logistic growth), multi-species models (competition and predator-prey relations), functional responses, exploitation of living systems, seasonal succession, epidemiological models, and spatial population dynamics.",
          "Further basic concepts from evolutionary dynamics are introduced.",
          "Half of the sessions are used to train basic model programming based on examples of biological systems. Some emphasis is on the development and evaluation of the presentation skills of the students.",
          "In the last part of the course, the students develop their own projects, which are evaluated in a poster session."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Approval of weekly submitted exercises is a prerequisite for the written examination.",
        "type": "written exam. 2 hours. The evaluation is based mainly (80%) on a written examination and partly (20%) on a poster of the final project.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        68
      ],
      "extended_description": "The course is an introduction to mathematical modelling of biological systems. It will enable the student to evaluate, develop and apply simple dynamical population models. The course will introduce the necessary mathematical background and programming techniques."
    },
    {
      "internal_id": 251,
      "code": "BAINPRO1KU",
      "name": "Introduction to Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "analyze a given, simple computational task such as manipulation of a text-based database or external hardware device to the extent of designing a programmatic solution and implementing it in a modern, text-base, domain-neutral programming language",
          "test the correctness of a piece of code",
          "write program documentation",
          "reason about the computational complexity of an algorithm",
          "express functionality in terms of abstract data type or application programming interface",
          "use text-based tools of program development, including an editor and command-line tools."
        ],
        "contents": [
          "Sequential execution, expression, selection, iteration, state, variable, assignment",
          "String manipulation and text files",
          "Testing and debugging",
          "Searching, sorting",
          "Worst-case running time",
          "Types",
          "Objects, classes"
        ]
      },
      "size": 7.5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam on premises",
        "grading": "point",
        "aids": "with restrictions"
      },
      "education_ids": [
        69
      ],
      "extended_description": "Students learn about the concept of computational thinking and get a hands-on introduction to programming using the Python programming language. The course provides students with a basic understanding of computational thinking and programming both for their own future use and for their ability to collaborate with experienced programmers and software developers. The students will learn about the concept of computational thinking and get a hands-on introduction to programming using the Python programming language. Programming and computational thinking are basic primitives in today’s IT world. This course provides a basic and hands-on introduction into these topics. The programming language is going to be Python. After taking the course, students have a solid technical foundation with regard to programming."
    },
    {
      "internal_id": 252,
      "code": "BA-BMECO1900U",
      "name": "Introduktion til programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "Anvende grundbegreber i C++ til selvstændig udvikling af et program beregnet til løsning af et givet problem evt med givne data",
          "Anvende en modulariseret kodningsproces og udføre afgrænsede tests af enkeltmoduler ved brug af Mathematica",
          "Være kritiske, kunne reflektere over og diskutere de bagvedlæggende antagelser og begrænsninger for de anvendte løsningsmetoder",
          "Teste, klarlægge og analysere et programs evne til at løse et givent problem",
          "Samarbejde om at dokumentere hele arbejdsprocessen og præsentere dette i en rapport henvendt til de relevante interessenter"
        ],
        "contents": [
          "Formålet med faget er at introducere den studerende til programmeringssprog generelt. Konkret vil faget tage udgangspunkt i programmeringssproget C++ og programpakken Mathematica.",
          "De studerende vil i forbindelse med faget lære at skrive afgrænsede C++ programmer til løsning af blandt andet matematiske problemer.",
          "I faget stifter den studerende kendskab til behandling af simple variable og datatyper. Dertil udvides med sammensatte datastrukturer som én- og to-dimensionale tabeller.",
          "Den studerende lærer endvidere at forstå og implementere grundlæggende programmeringsredskaber som løkker, funktioner, funktionsbibliotekter, forgreninger, og udveksling af data mellem et program og datafiler.",
          "Endelig diskuteres talformater og der opnås en forståelse af nøjagtigheden af programmerede beregninger.",
          "Efter endt kursus vil den studerende således være i stand til at forstå og håndtere grundlæggende begreber i programmeringssproget C++ og den matematiske programpakke Mathematica.",
          "Dertil vil den studerende selvstændigt kunne udvikle, implementere, dokumentere, og teste afgrænsede programmer i disse sprog og pakker."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 24,
        "exercises": 36,
        "mandatory_activities": 24,
        "exam": 37,
        "preparation": 85
      },
      "mandatory_activities": [
        "Der stilles én obligatorisk opgave, som de studerende skal løse i grupper af 3 personer."
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Mundtlig prøve på baggrund af skriftligt produkt. Gruppeopgave med mundtligt forsvar i grupper. Max 3 personer.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        70
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 253,
      "code": "520171U001",
      "name": "Introduktion til programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "Anvende et almindeligt programmeringssprog.",
          "Udvikle velstrukturerede programmer og afteste/debugge disse.",
          "Forklare arkitekturen af programmer, herunder nedarvning, abstrakte klasser og interfaces.",
          "Forklare simple specifikationsmodeller og realisere disse i programmer.",
          "Anvende standardklasser ved realisering af programmer."
        ],
        "contents": [
          "Programmeringsbegreber og teknikker for systematisk udvikling af objekt-orienterede programmer. Introduktion til Java sproget, Java API, og BlueJ udviklingsomgivelsen.",
          "Programmeringsbegreber og teknikker: variabel, værdi, udtryk, operator, objekt, klasse, type, indkapsling, kontrolstruktur, metode, parameter, polymorfi, lambda, stream, rekursive metoder, nedarvning, subtyper, statisk/dynamisk type, dynamisk metode binding, abstrakte metoder, abstrakte klasser, interfaces, grafiske brugergrænseflader, exceptions, og fil-baseret input/output.",
          "Objekt-orientering: modellering, analyse, prototyping, designmønstre og  udvalgte standardklasser fra Java API, herunder Collection klasser, klasser til konstruktion af grafiske brugergrænseflader og exception klasser.",
          "Systematisk udvikling af programmer: modularisering, adskillelse af specifikation og implementation, trinvis udvikling, ansvarsdreven design, løs kobling, sammenhængskraft, refaktorering, unit tests, automatisering af tests, debugging og dokumentation."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "Første del af kurset indeholder et antal små obligatoriske afleveringsopgaver",
        "anden del indeholder et større obligatorisk projekt, hvor de studerende over fem uger  (med ugentlige delafleveringer) udvikler et computerspil.",
        "Deltagelse i køreprøve i uge 7",
        "Deltagelse i træning i mundtlig præsentation i kursets anden halvdel."
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Mundtlig, 15min forberedelse, 15min eksamination. Den endelige karakter afspejler en samlet vurdering af køreprøve, afsluttende projekt samt den mundtlige eksamination.",
        "grading": "point",
        "aids": "none"
      },
      "education_ids": [
        71,
        112
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 257,
      "code": "DM574",
      "name": "Introduktion til programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "at give kompetence til at planlægge og udføre computerprogrammer i Python",
          "viden om fælles programmering metoder",
          "udvikling af færdigheder i at programmere i flere typer programmeringssprog",
          "udvikling af færdigheder i softwareudvikling",
          "udvikling af færdigheder i at konstruere større softwaresystemer",
          "udvikling af færdigheder i at træffe og begrunde fagligt relaterede beslutninger",
          "udvikling af færdigheder i at beskrive, formulere og formidle problemstillinger og resultater til enten fagfæller og ikke-specialister eller samarbejdspartnere og brugere",
          "at give kompetence i at håndtere komplekse og udviklingsorienterede situationer i studie- og arbejdssammenhænge",
          "at give kompetence i at identificere egne læringsbehov og strukturere egen læring i forskellige læringsmiljøer",
          "at give kompetence til at designe højere niveau software arkitekturer",
          "designe modeller for konkrete problemer",
          "udarbejde en programstruktur baseret på modellen",
          "implementere det planlagte program i det konkret anvendte programmeringssprog",
          "planlægge og gennemføre en afprøvning af programmet",
          "designe og implementere rekursiv løsning af problemer"
        ],
        "contents": [
          "De basale struktureringsredskaber sekvens, gentagelse, betinget instruktion og procedure.",
          "Fundamentale datastrukturer som lister, maps, træer.",
          "Struktureretprogrammeringsteknik, herunder eksempler og anvendelser.",
          "Rekursion og rekursive data strukturer."
        ]
      },
      "size": 7.5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Portfolioeksamen bestående af små individuelle opgaver og et gruppeprojekt (med skriftlig rapport og mundligt forsvar).",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        72,
        113
      ],
      "extended_description": "Kurset giver en introduktion til struktureret og objekt-orienteret programmering. Kurset giver et videnskabeligt grundlag for at løse problemer ved modellering og implementering af programmer. Kurset undervises i Python."
    },
    {
      "internal_id": 264,
      "code": "STIST18B1_4",
      "name": "Anvendt programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Kan forklare grundlæggende begreber som algoritmer, datastrukturer og computerarkitekturer"
        ],
        "skills": [
          "Kan selvstændigt skrive, afvikle og teste et imperativt program",
          "Kan selvstændigt og i samarbejde med andre implementere et imperativt program som løsning på en defineret opgave • Kan anvende korrekt fagterminologi"
        ],
        "competencies": [
          "unknown"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        74
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 271,
      "code": "KAINPRO1KU",
      "name": "Introduction to Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "analyze a given, simple computational task such as manipulation of a text-based database or external hardware device to the extent of designing a programmatic solution and implementing it in a modern, text-base, domain-neutral programming language",
          "test the correctness of a piece of code",
          "write program documentation",
          "reason about the computational complexity of an algorithm",
          "express functionality in terms of abstract data type or application programming interface",
          "use text-based tools of program development, including an editor and command-line tools"
        ],
        "contents": [
          "Sequential execution, expression, selection, iteration, state, variable, assignment",
          "String manipulation and text files",
          "Testing and debugging",
          "Searching, sorting",
          "Worst-case running time",
          "Types",
          "Objects, classes"
        ]
      },
      "size": 7.5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam on premises",
        "grading": "point",
        "aids": "with restrictions"
      },
      "education_ids": [
        75
      ],
      "extended_description": "The course provides students with a basic understanding of computational thinking and programming both for their own future use and for their ability to collaborate with experienced programmers and software developers. The students will learn about the concept of computational thinking and get a hands-on introduction to programming using the Python programming language. Programming and computational thinking are basic primitives in today’s IT world. This course provides a basic and hands-on introduction into these topics. The programming language is going to be Python. After taking the course, students have a solid technical foundation with regard to programming."
    },
    {
      "internal_id": 300,
      "code": "DSNBAITB113",
      "name": "Grundlæggende Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "forstå opbygningen af client-server netværk",
          "forstå metoder til programdesign og evne at skelne mellem god og dårlig programmeringspraksis",
          "forstå de basale principper i et programmeringssprog, herunder forståelse af kontrolstrukturer, datatyper, datastrukturer samt funktioner"
        ],
        "skills": [
          "anvende opnået viden i design af en simpel applikation",
          "implementere, fortolke og analysere programkode",
          "anvende programmeringsfærdigheder til at bearbejde og processere input fra tastatur og mus",
          "anvende programmeringsfærdigheder til at designe og implementere basale funktioner",
          "diskutere og vurdere kvaliteten af en given programkode"
        ],
        "competencies": [
          "evaluere eksisterende programkode, bedømme dets design og foreslå ændringer",
          "bruge specificerede web programmeringssprog til at løse konkrete programmeringsopgaver"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        77
      ],
      "extended_description": "Studerende, der gennemfører dette modul opnår en grundlæggende færdighed i at programmere. Den studerende får en grundlæggende introduktion til koncepterne bag client-server baserede netværk og bagvedliggende protokoller. Endvidere får den studerende introduktion til client- og server-side udvikling. Den studerende opnår herved en forståelse af basale koncepter og mekanismer i et programmeringssprog, således at disse kan bruges til at implementere mindre applikationer"
    },
    {
      "internal_id": 301,
      "code": "LMAB10066U",
      "name": "Matematik og databehandling",
      "contents": {
        "type": "B",
        "knowledge": [
          "Udvise overblik over grundlæggende matematiske begreber og teorier",
          "Udvise overblik over grundlæggende begreber inden for databehandling",
          "Udvise overblik over grundlæggende begreber inden for programmering",
          "Beskrive simple problemstillinger inden for biovidenskab vha. matematik",
          "Opskrive og reformulere simple matematiske modeller",
          "Udføre matematisk problembehandling"
        ],
        "skills": [
          "Analysere simple problemstillinger indenfor biovidenskab vha. matematik",
          "Anvende matematiske resultater og metoder på konkrete matematiske problemstillinger",
          "Anvende R til indlæsning og visualisering af datasæt",
          "Anvende R til beregninger i matematiske modeller og behandling af datasæt",
          "Anvende regneark struktureret"
        ],
        "competencies": [
          "Arbejde selvstændigt såvel som indgå i fagligt og projektorienteret samarbejde med andre"
        ],
        "contents": [
          "Funktioner og matematiske modeller: lineære-, logaritme-, potens-, eksponential-, og trigonometriske funktioner, lineær regression, differentiation og integration, funktionsundersøgelse, analyse og fortolkning af simple matematiske modeller",
          "Matricer: lineære sammenhænge mellem variable, matricer, determinant og invers matrix, løsning af lineære ligninger, opstilling og analyse af matrixmodeller, egenværdier og egenvektorer",
          "Differentialligninger: eksponentiel vækst, logistisk vækst, separation af de variable, lineære 1. ordens differentialligninger, opstilling af differentialligningsmodeller, fortolkning af parametre og løsninger",
          "Funktioner af to variable: grafer, niveaukurver, partielle afledede, optimering, dobbeltintegraler, matematiske modeller med to variable",
          "Lagring og håndtering af data: registrering, behandling og grafisk fremstilling af data med regneark, behandling af data og illustration af matematikmodulernes begreber med programsystemet R, definition af funktioner og procedurer i R"
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 38,
        "preparation": 90,
        "exercises": 32,
        "project": 42,
        "exam": 4,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "I løbet af kurset afleveres gruppevist 4 miniprojekter, hvoraf mindst 3 skal godkendes for at gå til eksamen.",
        "type": "Ved kursets afslutning afholdes en 4 timers skriftlig eksamen. Der vil være spørgsmål, som tester basale færdigheder samt spørgsmål der i stil med dele af miniprojekterne tester kompetencer på højere niveauer.",
        "grading": "point",
        "aids": "Computere, tablets, mobiltelefoner og andet, hvormed der kan kommunikeres med omverdenen,  må ikke benyttes. Alle andre hjælpemidler inklusive lommeregnere, som ikke kan afvikle programmet R eller regnearksprogrammer, må gerne benyttes."
      },
      "education_ids": [
        78,
        79,
        80,
        81,
        82
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 312,
      "code": "147201U009",
      "name": "Methods 1: Introduction to Experimental Methods, Statistics, and Programming",
      "contents": {
        "type": "B",
        "knowledge": [
          "demonstrate understanding of the basic principles of empirical research",
          "demonstrate understanding of the basic statistical concepts and tests associated with the General Linear Model",
          "demonstrate understanding of the basic programming concepts."
        ],
        "skills": [
          "design and carry out simple empirical studies",
          "identify important assumptions in the use of statistical tests",
          "program data analysis code."
        ],
        "competencies": [
          "critically assess and discuss methods and analyses used in published empirical research",
          "reflect on the appropriateness of experimental designs for specific research questions in cognitive science."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The exam consists of a portfolio containing a number of assignments. The total length of the portfolio is: 3-7 assignments. Their form and length will be announced on Brightspace by the teacher at the start of the semester. The portfolio may include products. Depending on their length, and subject to the teacher’s approval, these products can replace some of the standard pages in the portfolio. It must be possible to carry out an individual assessment. So if some parts of the portfolio have been produced by a group, it must be stated clearly which parts each student is responsible for, and which parts the group as a whole is responsible for.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        83
      ],
      "extended_description": "The purpose of the course is to introduce the basic methodological toolkit required to understand and do cognitive science. The course will prepare students to design and carry out their own empirical research, to choose appropriate analyses for simple study designs, and to write their own data analysis scripts. The course includes an introduction to experimental methods (including experimental design and data collection methods), statistics, and basic programming (using for for example R). This course sets the methodological foundations for the rest of the degree programme. The methods learned in this course are applied in topic courses (e.g. cognition and communication), and will be built upon in the Methods 2: The General Linear Model, Methods 3: Multilevel Statistical Modeling and Machine Learning and Methods 4: Bayesian Computational Modeling."
    },
    {
      "internal_id": 315,
      "code": "BMB547",
      "name": "Molekylær Data Science",
      "contents": {
        "type": "A",
        "objectives": [
          "viden om teori og eksperimentelle metoder inden for de biokemiske og molekylær biologiske fagområder",
          "viden om den videnskabelige terminologi, der anvendes inden for de biokemiske og molekylærbiologiske fagområder",
          "viden om betydningen af biologiske databaser i moderne molekylær biologi",
          "at kunne forstå at tilgangen til fagets centrale emner og metoder er uafhængig af nationale grænser",
          "anvende en eller flere biokemiske og molekylærbiologiske teorier og metoder",
          "undersøge konkrete biokemiske og molekylærbiologiske fænomener teoretisk og/eller eksperimentelt",
          "anvende bioinformatik i praksis",
          "Viden og færdigheder i anvendelser af grundlæggende matematiske funktioner, der er relevante for biovidenskab.",
          "Forståelse af og praktiske færdigheder i anvendelsen af grundlæggende statistik på relevante datasæt.",
          "Grundlæggende færdigheder i at analysere og visualisere relevante datasæt fra virkelige eksperimentelle data.",
          "Forståelse for og praktisk anvendelse af calculus og differentialligninger, til at modellere molekylærbiologi relaterede eksempler.",
          "Færdigheder i lineær algebra til understøttelse af grundlæggende programmerings færdigheder, numerisk modellering og eksempler fra system biologi",
          "Erhverve teoretisk baggrund i harmoniske funktioner og Fourier tranformationer til at forstå de grundlæggende begreber Fourier transform massespektrometri",
          "Lære grundlæggende programmerings færdigheder for at kunne manipulere, analysere og visualisere data fra forskellige molekylærbiologi relaterede eksempler",
          "Være i stand til at udføre simple beregningsmæssige biologi relaterede data science projekter."
        ],
        "contents": [
          "Beregninger og analyse af matematiske funktioner, der er relevante for biovidenskab.",
          "Sandsynlighed",
          "Statistik (beskrivende statistik, elementer af sandsynlighed, hypotese test, ikke-parametriske metoder, korrelationsanalyse, og lineær regression. Der vil blive lagt vægt på, hvordan man vælger passende statistiske test, og hvordan man vurderer statistisk signifikans.)",
          "Lineær algebra: lineære ligninger, eigenvalue problemer, lineære differentialligninger, principal component analysis",
          "Matematisk biologi (modellering)",
          "Diskret matematik (kombinationer, grafer og logiske udsagn)",
          "Harmoniske funktioner, Fourier transformation",
          "Differentialligninger",
          "Calculus",
          "Numeriske metoder",
          "Grundlæggende programmering (sandsynligvis R)",
          "Datastrukturer",
          "Oprette grundlæggende visualiseringer af data",
          "Anvende mindste kvadraters metode til  lineære regressioner",
          "Vurdere R-kvadreret for alle typer modeller",
          "Vurdere den justerede R-kvadreret for alle typer modeller",
          "Opret en simpel lineær regression (SLR)",
          "Opret en multiplum lineær regression (MLR)",
          "Fortolke koefficienter for en MLR",
          "Udføre alle trin i et data science-projekt",
          "Analyse af store datasæt ved hjælp af lineære ligninger, eigenvalue problemer, lineære differentialligninger, principle component analysis.",
          "Introduktion til data mining"
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eksamen.",
        "grading": "point",
        "aids": "Alle almindelige hjælpemidler er tilladte fx lærebøger, egne noter, computerprogrammer som ikke benytter internettet m.v. "
      },
      "education_ids": [
        84
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 320.1,
      "code": "NIGB21027U",
      "name": "Numerisk modellering i Geoscience: Palæoklima",
      "contents": {
        "type": "B",
        "knowledge": [
          "Kendskab til de mest almindelige numeriske metoder i geoscience til løsning af lineære ligningssystemer, optimering af funktioner til data, systemer af ordinære differentialligninger samt partielle differentialligninger",
          "Forståelse for hvornår hvilke metoder anvendes og kan vurdere metodens begrænsning og usikkerhed"
        ],
        "skills": [
          "Opstille matematiske ligninger til beskrivelse af geokemiske eller fysiske variable i Geoscience",
          "Implementere kvantitative løsninger baseret på de numeriske metoder introduceret, ved anvendelse af et matematisk programmeringsværktøj (f.eks. MATLAB, R eller Python)",
          "Fejlfinde i programmeringskode og funktioner",
          "Dokumentere og kommentere programmeringskode",
          "Afbilde resultater grafisk i et matematisk programmeringsværktøj"
        ],
        "competencies": [
          "Diskutere anvendelsesområder for de introducerede numeriske metoder",
          "Evaluere, analysere og bearbejde numeriske modelresultater",
          "Redegøre for usikkerheden på en numerisk metode",
          "Diagnosticere fejl i programkode",
          "Forklare og perspektivere de introducerede numeriske metoder til andre anvendelser",
          "Kombinere flere numeriske metoder i løsning af relaterede problemer"
        ],
        "contents": [
          "Kursets mål er, at den studerende ved afslutningen af kurset har opnået basale analytiske, numeriske og præsentationstekniske færdigheder til at kunne løse og formidle almindelige problemer i Geoscience ved scriptprogrammering i et matematiske-numeriske værktøjsprogram",
          "Mindste kvadraters metode (Least squares methods)",
          "Løsning af systemer af linærer algebraiske ligninger (Gauss–Jordan elimination og lignende)",
          "Tilnærme funktioner til data-serier (ved singular value decomposition)",
          "Numerisk integration (Trapezoidal sum, simpsons rule og lignende)",
          "Løsning af ordinære differentialligninger (ODE), evaluering af stabilitet og usikkerhed (Eulers, implicit Euler og højere ordens metoder)",
          "Optimering af parametre i systemer af ODE",
          "Taylor serier og finite difference diskretisering",
          "Løsning af 1D advektion-diffusion ligning"
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 28,
        "preparation": 154,
        "exercises": 14,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Løbende bedømmelse af 6 delrapporter, en hver uge. Endelige karakter er et gennemsnit af karakteren for hver delrapport. Kun en delrapport kan genafleveres til genbedømmelse inden eksamensugen.",
        "grading": "point",
        "aids": "Alle hjælpemidler tilladt"
      },
      "education_ids": [
        85
      ],
      "extended_description": "Kurset giver en introducerende indføring i numerisk modellering i Geoscience ved anvendelse af matematiske værktøjsprogrammer til scriptprogrammering (f.eks. MATLAB, R eller Python). Kurset fokusere på praktiske numeriske metoder med mindre fokus på matematisk udledning og beviser. Gennem eksempler vises usikkerhederne i metoderne. Metoderne perspektiveres til deres bredere anvendelse inden for geovidenskab. De introducerede numeriske metoder anvendes til at opbygge en kvantitativ beskrivelse (model) af en klima-ocean-geokemisk hændelse i Phanerozoikum. De studerende scripter/programmer progressivt en mere og mere kompleks model; først et homogent reservoir (boks) med én variabel til flere sammenhængende reservoir celler med flere variable. Modellerne løses som ligevægtsproblemer (linærer ligningssystemer) og tidsafhængige systemer (ordinære differentialligninger (ODE) og partielle differentialligninger (PDE))."
    },
    {
      "internal_id": 320.2,
      "code": "535201U003",
      "name": "Numeriske metoder",
      "contents": {
        "type": "A",
        "objectives": [
          "Udregne algebraiske udtryk numerisk, herunder interpolere, differentiere og integrere, samt løse ligninger.",
          "Udarbejde kurve- og fladeplot af matematiske funktioner og observerede data i regulære net, samt at tilpasse analytiske udtryk til sådanne data.",
          "Løse simple differentialligninger numerisk.",
          "Skrive, fejlfinde og anvende elementær MATLAB-kode i forbindelse med ovenfor nævnte læringsmål.",
          "Kombinere og relatere disse numeriske metoder til løsning af geovidenskabelige problemer."
        ],
        "contents": [
          "Løsning af nonlineære ligninger",
          "Numerisk interpolation med polynomier",
          "Lineær regression",
          "Numerisk differentiation og integration med førsteordens og højereordens udtryk",
          "Løsning af simple differentialligninger",
          "Grammatik, elementære kontrolstrukturer og elementære variabeltyper i MATLAB",
          "Elementær visualisering af vektorer og matricer som velstrukturerede kurveplot og fladeplot i MATLAB"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Godkendelse af 3 hjemmeopgaver",
        "type": "Mundtlig. 20 minutter.",
        "grading": "point",
        "aids": "none"
      },
      "education_ids": [
        86
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 334,
      "code": "KAN-CBUSO1801U",
      "name": "Introduction to Programming and Application Design",
      "contents": {
        "type": "A",
        "objectives": [
          "Develop a simple application through object oriented (OO) design and (OO)programming",
          "Use tools and techniques for producing simple application from a structured or unstructured specification",
          "Demonstrate the use of the concepts and fundamentals of object-oriented programming through the development of a simple application",
          "Demonstrate understanding of the concepts and fundamentals of object-oriented programming",
          "Be able to discuss and reflect about concrete code implementations and be able to identify business limitations to technical implementations",
          "Be able to communicate effectively about development methods, techniques and programming concepts to a wider audience"
        ],
        "contents": [
          "The purpose of the course is to provide an understanding and acquaintance of the activities that are performed from the idea phase to an IT-System emerges, and to the finished system is implemented.",
          "The course provides a basic knowledge of the topics, which are relevant in relation to development of IT-systems with special emphasis on object-oriented programming principles.",
          "Methods (Object-oriented design): The relationship between design and development of the simple software.",
          "Introduction to object-oriented programming (C# Dotnet) : Central topics and principles in object-oriented programming including data types, control structures, methods, classes, objects, polymorphism and inheritance, reading and writing data to file, and applying these to construct simple software.",
          "Class libraries: The use of program libraries and their roles concerning re-use and abstraction.",
          "System architecture: How different architectures are selected with regard to data storage and application needs.",
          "Development of basic html page to apply the programming concepts for information rendering."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 24,
        "exercises": 36,
        "preparation": 122,
        "exam": 24,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "The students have to get 3 out of 5 assignments approved. Each assignment is made individually.",
        "type": "Individual oral exam based on written group product (2-3 people). The grade is based on an overall assessment of the written product and the individual oral performance. 20min. The exam is based on a mandatory mini project which the students have to work on during the semester. This is in addition to the five manadatory assignment and helps prepare for this mini project. The mini project is made in pairs. All the groups members are responsible for the project and the content of the report.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        87
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 340,
      "code": "T530035101",
      "name": "Objektorienteret programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Forståelse for kernekoncepterne i objekt-orienteret programmering, herunder abstraktion, indkapsling, arv og polyformfi.",
          "Forklare statiske variabler og metoder i forhold til instansvariabler og metoder.",
          "Beskrive applikationskode, herunder identificere og forklare grundlæggende elementer i koden."
        ],
        "skills": [
          "Anvende grundlæggende begreber i programmeringssproget Java, herunder klasser og objekter, primitive datatyper, sekvenser, betingelser, løkker, metoder med parameteroverførsel samt simple objektsamtlinger (arrays, ArrayList).",
          "Forklare relationer mellem klasser, herunder arv og associationer.",
          "Forklare og anvende polymorfi.",
          "Benytte Java's klassebibliotek og dokumentation (JavaDoc)",
          "Benytte et programmeringsværktøj (IDE) til at skrive og afvikle kode."
        ],
        "competencies": [
          "Løse problemer ved hjælp af simpel modellering og implementering af computerprogrammer i et objektorienteret programmeringssprog."
        ],
        "contents": [
          "Grundlæggende programmeringskoncepter, herunder løkker, metoder og betingede instruktioner/forgreninger.",
          "Fundamentale datastrukturer som arrays, lister og maps",
          "Centrale objektorienterede begreber: klasser, objekter, interface, indkapsling, abstrakte klasser, arv og polymorfi",
          "Introduktion til standardbiblioteker",
          "Fil I/O"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 48
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Mundtlig. 25 minutter.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        88
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 376.2,
      "code": "T630001401",
      "name": "Object-oriented Programming",
      "contents": {
        "type": "B",
        "knowledge": [
          "Understand and explain the abstractions 'variable' and 'method', including variable types and name as well as method definitions (modifiers, return types, signature, body).",
          "Understand and explain loops, branching and arrays in the context of programming.",
          "Understand and explain simple data structures, including arrays, lists and maps.",
          "Understand and explain the abstractions 'class' and 'object' and their relationship, including explaining the structure of classes and the use of attributes, constructors and methods in the context of classes and objects.",
          "Understand primitive and complex data types.",
          "Explain the meaning of visibility/access modifiers (private, protected, public).",
          "Understand and explain the use of inheritance and polymorphism, including understanding the meaning of 'method overriding'.",
          "Understand interfaces and abstract classes, including their differences in capabilities and usage.",
          "Understand the use of 'method overloading'.",
          "Explain encapsulation and the importance of encapsulation in an object-oriented context.",
          "Identify elements in and explain application code in relation to the above concepts.",
          "Understand the concept of application code layering.",
          "Understand and explain object-oriented analysis and design, including explaining 'phenomena' and 'concepts' and explaining these in relation to a class diagram and object instances.",
          "Understand debugging and the role of debugging in the context of program development."
        ],
        "skills": [
          "Carry out an analysis of a specification to identify phenomena and abstract these into concepts.",
          "Apply concepts to prepare class diagrams in the design phase, specifying classes, methods and attributes.",
          "Use an IDE to write and compile program code.",
          "Implement classes, abstract classes and interfaces based on a class diagram, including implementing relationships between entities specified in a class diagram.",
          "Use classes to instantiate objects.",
          "Use classes from existing code libraries when developing program code.",
          "Use Git to version, store and share program code."
        ],
        "competencies": [
          "Reflect on design decisions and explain the consequences of these at a basic level",
          "Apply a program specification to carry out an analysis and a design phase.",
          "Apply practical knowledge of object-oriented programming to implement object-oriented applications - with or without a starting point in a class diagram.",
          "Design and carry out an oral presentation of the skills in the course."
        ],
        "contents": [
          "Object-oriented programming including the concepts of abstraction, encapsulation, inheritance and polymorphism."
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "lectures": 96
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Oral exam.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        90
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 426,
      "code": "145181U002",
      "name": "Programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "demonstrere indsigt i hvad der kan udtrykkes gennem programmering",
          "demonstrere indsigt i centrale principper i programmering",
          "demonstrere indsigt i moderne interaktive systemer og avanceret computerbrug."
        ],
        "skills": [
          "programmere til interaktivitet, dvs. håndtere input og output til brugeren",
          "sætte sig ind i og lære at bruge software-værktøjer og benytte online ressourcer til at finde svar på tekniske spørgsmål",
          "demonstrere både en praktisk og teoretisk forståelse af programmering og dets principper."
        ],
        "competencies": [
          "indgå i dialog om de tekniske aspekter af udviklingen af it-systemer",
          "selvstændigt og i samarbejde med andre arbejde eksperimenterende og undersøgende med it",
          "forholde sig til its rolle i samfundet ud fra et teknisk og programmeringsmæssigt perspektiv."
        ],
        "contents": [
          "Formålet med faget er, at den studerende tilegner sig basale programmeringsfærdigheder og opnår forståelse af, hvordan de digitale teknologier som vi benytter i vores hverdag fungerer og er konstrueret. Dette inkluderer både en teoretisk forståelse af de centrale principper i programmering og praktisk erfaring med anvendelse af programmering.",
          "Igennem faget vil den studerende opnå kompetencer til både selv at kunne udvikle mindre it systemer, og til at kunne indgå i dialog med andre om udviklingen af it systemer.",
          "Ydermere introducerer kurset den studerende til avanceret computerbrug.",
          "Faget giver en generel indføring i et aktuelt programmeringssprog (som f.eks. JavaScript) og i at programmere.",
          "Den studerende bliver igennem praktiske øvelser introduceret til centrale principper i programmering såsom variabler, betingelser, løkker, lister og objekter.",
          "Der lægges særligt vægt på programmering til web-udvikling, og faget indbefatter en indføring i basale web-teknologier.",
          "Faget introducerer endvidere den studerende til de grundlæggende principper for hvordan en personlig computer er organiseret, hvilket inkluderer en forståelse af filsystemet og avancerede værktøjer, såsom kommando-prompten.",
          "Faget danner forudsætning for andre af uddannelsens fag med it teknisk indhold.",
          "Faget knytter specifikt an til og har relevans for følgende andre fag på uddannelsen: Digitale metoder, Organisationsetnografi samt Design.",
          "Faget giver basale færdigheder i programmering og systemudvikling og har relevans for studerende som ønsker at arbejde med programmering og systemudvikling."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Forudsætningen for deltagelse i prøven er undervisningsdeltagelse jf. studieordningens afsnit 2.1, herunder aflevering og godkendelse af en opgavesamling. Antal opgaver, deres form (individuel og/eller gruppe, skriftlig og/eller mundtlig, bunden og/eller fri) omfang samt afleveringsfrist præsenteres skriftligt i Brightspace af underviser ved semestrets start.",
        "type": "Mundtlig. 30 minutter",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        94
      ],
      "extended_description": "none"
    },
    {
      "internal_id": 429.1,
      "code": "02632",
      "name": "Introduction to programming and data processing",
      "contents": {
        "type": "A",
        "objectives": [
          "Explain basic programming concepts",
          "Design and implement programs to solve simple computable engineering problems",
          "Use the integrated development environment and user interface of the programming language",
          "Import data in different formats",
          "Use variables of different types and perform basic computations",
          "Organize code using scripts and functions",
          "Write well-structured, commented, and readable code",
          "Use functions from existing toolboxes and libraries",
          "Graphically visualize data and information",
          "Write technical documentation"
        ],
        "contents": [
          "Programming language: Matlab or Python.",
          "Using the desktop environment and language documentation.",
          "Working with numbers, strings, logical values, vectors and matrices.",
          "Using arithmetic and logical operators, branching statements, looping and vectorization.",
          "Organizing code using scripts and functions.",
          "Error checking user input and creating interactive programs.",
          "Writing comments and technical documentation.",
          "Reading and writing data files. Graphical visualization of data."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written examination and experiments: 2 hours.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        99
      ],
      "extended_description": "The use of computers for technical/mathematical computations and simulations is central for many areas at DTU, and it is therefore necessary to have a working knowledge of computer programming. In the course students will learn about basic concepts and techniques in programming, as well as how to write programs with a focus on computations with technical/engineering applications. The participants will be able to design and develop well-structured smaller programs, test the design and program, read various data formats, and visualize the results graphically. One of the programming languages Matlab or Python."
    },
    {
      "internal_id": 431.1,
      "code": "9141114",
      "name": "Software Construction 1",
      "contents": {
        "type": "B",
        "knowledge": [
          "description of the syntax and semantics of a programming language",
          "program structure",
          "simple algorithms",
          "data structures",
          "program quality criteria"
        ],
        "skills": [
          "use of theories and methods to structure the realisation of algorithms and data structures in a programming language",
          "use of theories and methods for the definition of program quality criteria and troubleshooting in their own programs",
          "communication of practical and theoretical issues related to the construction of programs, tests and algorithms"
        ],
        "competencies": [
          "construction of a program based on a requirement specification",
          "The student is able to identify their own learning requirements and develop their own knowledge, skills and competencies in relation to software construction and programming."
        ],
        "contents": [
          "Software Construction involves basic concepts in programming and programming languages, including syntax, semantics, and structuring of programs.",
          "It provides an introduction to algorithms and essential data structures.",
          "In addition, students work with programming, including troubleshooting and essential program quality assurance."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The oral exam lasts 30 min. incl. grading. An overall grade is given (weights 20 pct of the semester grade). The part-exam that is weighted 60 pct. is a written assignment with an individual oral defence. It is the project submitted by the student that serves as the starting point for the oral part of the part-exam that is weighted 60 pct. The 60 pct. part-exam tests the learning objectives within the categories of knowledge, skills and competencies for all the semester modules.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        101
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 442,
      "code": "ESNCEB1K1",
      "name": "Grundlæggende programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "udtryk, variable, funktioner, betingelser, løkker",
          "datatyper, datastrukturer som lister/arrays, sammensatte datastrukturer",
          "udviklingsmiljø og afvikling af programmer",
          "metoder til input/output, heriblandt simple brugergrænseflader",
          "værktøjer til debugging og basal test af programmer"
        ],
        "skills": [
          "Udvikle, afvikle og teste programmer, hvori de ovennævnte grundbegreber indgår i løsningen",
          "anvende korrekt fagterminologi"
        ],
        "competencies": [
          "den studerende skal efter kurset både selvstændigt og i samarbejde med andre kunne implementere et computerprogram som løsning på en defineret opgave"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Aktiv deltagelse / løbende evaluering.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        103
      ],
      "extended_description": "I dette kursus opnår den studerende grundlæggende færdigheder i at programmere i et relevant højniveau-programmeringssprog som Python, C, eller lignende. Kurset danner grundlag for at løse de programmeringsudfordringer de studerende får i fremadrettet i uddannelsen"
    },
    {
      "internal_id": 448.1,
      "code": "T160005101",
      "name": "Programmering og numerisk analyse",
      "contents": {
        "type": "B",
        "knowledge": [
          "Programmering i Matlab",
          "Basale programmeringselementer ((for-loop, if-command, functions etc.)",
          "Datatyper herunder afrunding og approksimationsfejl",
          "Data input/output – samspil med andre systemer",
          "Design og dokumentation af strukturen i et program (initialise, calculation, reporting)",
          "Brug af algoritmer til løsning af problemer indenfor lineær algebra",
          "Interpolation, curve fitting og numerisk integration",
          "Newton-Raphson metode til bestemmelse af rødder"
        ],
        "skills": [
          "Kunne forstå og anvende et programmeringssprogs basale elementer",
          "Kunne designe og dokumentere strukturen i et program",
          "Bruge og implementere numeriske algoritmer til løsning af ingeniørmæssige problemer"
        ],
        "competencies": [
          "Forstå og anvende programmeringssprog",
          "Benytte og implementere numeriske algoritmer",
          "Bruge Matlab til løsning og visualisering af ingeniørmæssige problemer"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Individuel portfolio afleveret i slutningen af semesteret.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        104
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 449,
      "code": "290201U021",
      "name": "Programmering og numeriske metoder",
      "contents": {
        "type": "A",
        "objectives": [
          "Forklare computer arkitektur",
          "Konstruere strukturerede programmer",
          "Forklare flow-kontrol, loops og Boolesklogik i programmeringssprog",
          "Forklare og implementere vektor og matrix operationer som loops og vektoriserede udtryk",
          "Konstruere funktioner, variable og datatyper",
          "Skelne imellem forskelligescopes",
          "Planlæg og udføre systematisketest af programmer",
          "Konstruere input, output og plots",
          "Forklare og implementere grundlæggende numeriske metoder til integration, løsning af ordinæredifferentialligninger og ikke-lineære ligninger",
          "Forklare klasser, indkapsling,nedarvning og polymorfi i objektorienteret programmering"
        ],
        "contents": [
          "Kurset giver en introduktion til begreber inden for programmering og numeriske metoder",
          "Den første del har fokus på basale programmeringsbegreber, computerarkitektur og repræsentation af tal",
          "Derefter gennemgås numerisk integration samt implementering og test heraf",
          "De basale begreber inden for objektorienteret programmering gennemgås",
          "Efterfølgende gennemgås numerisk løsning af ordinære differentialligninger og ikke-lineære ligninger med fokus på implementering, test og genanvendelighed",
          "Til sidst i kurset diskuteres programmeringssprog generelt"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Aflevering og godkendelse af 5 obligatoriske opgaver",
        "type": "Skriftlig, 4 timer",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        106
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 469.2,
      "code": "NDAB15009U",
      "name": "Programmering og problemløsning",
      "contents": {
        "type": "B",
        "knowledge": [
          "Grundlæggende begreber indenfor imperativ, objektorienteret og funktionsprogrammeringsparadigmerne: Funktioner og metoder, variabler, udtryk, typer, kontrolstrukturer, løkker, blokstruktur, klasser og objekter, objektinteraktion, nedarvning, rekursion, polymorfi, abstraktion, undtagelser, pattern matching over rekursive datatyper, m.m.",
          "God programmeringsskik: Dokumentation i koden, design patterns, afprøvning inkl. unit testing, håndtering af køretidsfejl, m.m.",
          "Teknikker til problemløsning: Teknisk analyse af naturligsprogsproblemer, objektorienteret design, modelleringssprog, håndkøring, m.m.",
          "God rapportskrivningsteknik"
        ],
        "skills": [
          "At kunne lave mindre programmer (op til ca. 1000 linjer) i de programmeringsparadigmer, der undervises i på kurset, med overholdelse af god programmeringsskik og -stil",
          "At kunne evaluere fordele og ulemper ved at opskrive løsningen i de underviste programmeringsparadigmer, og at kunne implementere, afprøve, dokumentere, og evaluere løsningens kvalitet",
          "Et sideordnet mål er, at den studerende opnår passende studieteknik således, at dette og parallelkurser bestås svarende til et fuldtidsstudium"
        ],
        "competencies": [
          "Ud fra en præcist defineret problemformulering at kunne analysere problemet, udforme et program til løsning af dette, samt at verificere, afprøve, og dokumentere løsningen"
        ],
        "contents": [
          "Kurset giver en introduktion til programmering og til hvordan problemløsning struktureres vha. et program",
          "Der gennemgås grundlæggende koncepter og terminologi indenfor programmering",
          "Der undervises i funktionelle, imperative og objektorienterede programmeringsparadigmer"
        ]
      },
      "size": 15,
      "time": {
        "absolute": true,
        "lectures": 54,
        "preparation": 106,
        "exercises": 108,
        "project": 144,
        "total": 412
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Kurset organiseres ud fra en ugentlig cyklus med obligatorisk ugentlige opgaver (12-14 i alt), som alle på nær én skal bestås for at bestå kurset. Der vil være mulighed for genaflevering. Størrelsen af opgaverne vil variere og vil blive offentliggjort ved kursusstart.",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        108,
        109,
        110,
        111
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 469.5,
      "code": "Fagmodulkursus 1: Essential Computing",
      "name": "Fagmodulkursus 1: Essential Computing",
      "contents": {
        "type": "B",
        "knowledge": [
          "Viden om fundamentale begreber og redskaber som knytter sig til programmering."
        ],
        "skills": [
          "Færdigheder i basal programmering og brug af værktøj til forberedelse og afvikling af programmer."
        ],
        "competencies": [
          "Kompetence til at kunne analysere en problemstilling og lave en algoritmisk løsning samt implementere og teste denne."
        ],
        "contents": [
          "Algoritmebegrebet, problemløsning og “computational thinking”, begrænsninger på hvad der kan beregnes (The idea of an algorithm, problem solving, computational thinking, limits of what can be computed).",
          "Essentielle kontrolstrukturer i programmering, grundlæggende datatyper, strukturerede datatyper, tabeller, procedurer og funktioner (Essential programming control constructs, basic data types, arrays, structured data types, procedures and functions)."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Det er en forudsætning for at kunne gå til eksamen, at minimum 50 % af programmeringsopgaverne, som er stillet i løbet af kurset, er blevet godkendt af underviser.",
        "type": "Individuel mundtlig prøve med udgangspunkt i et miniprojekt (på baggrund af en udleveret problemstilling) evt. udarbejdet af en gruppe. Prøven foregår som en samtale. Der kan ved prøven spørges ind til hele pensum. Hvis man vælger at arbejde i gruppe, må gruppen bestå af 2-3 studerende.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        114
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 495,
      "code": "BA-BINTO1064U",
      "name": "Programmering og udvikling af små systemer og databaser",
      "contents": {
        "type": "A",
        "objectives": [
          "redegøre for og konstruere udvalgte delprodukter, der fremstilles i et objektorienteret systemudviklingsforløb",
          "redegøre for grundlæggende begreber inden for programmering",
          "anvende et objektorienteret programmeringssprog til at konstruere mindre applikationer",
          "designe og implementere et simpelt brugerinterface",
          "designe og foretage simple forespørgsler og opdateringer i en database",
          "anvende de teknikker og værktøjer, der er introduceret i faget, til at analysere og løse et komplekst problem gennem udvikling af et mindre administrativt program (analyse, design, konstruktion, test og dokumentation)",
          "reflektere over valgte implementeringer, samt optimeringer heraf."
        ],
        "contents": [
          "Faget gennemgår teknikker til programudvikling af mindre informationssystemer.",
          "Formålet med undervisningen er at give den studerende en grundlæggende forståelse for udvikling af programmer med grafiske brugergrænseflader og tilknyttede databaser.",
          "Introduktion til programmering - Skriv dine egne programmer",
          "Introduktion til HTTP protokol og API’er",
          "Projektudførsel: Den proces, der fører fra idé til fremstillingen af et endeligt produkt med et særligt fokus på - modellering af klasser.",
          "Introduktion til databasemodellering, databasekald samt optimering af databaser.",
          "Udarbejdelse af en applikation opdelt i three-tier modellen med frontend, backend og database.",
          "Objektorienteret programmering: Centrale begreber og principper indenfor objektorienteret programmering.",
          "Metoder (Objektorienteret Analyse og Design): Sammenhængen mellem produkter, der fremstilles i et systemudviklingsforløb (UML-diagrammer ol.) og programmeringsklasser.",
          "Anvende front-end framework til at manipulere effektivt med DOM’en for at skabe responsive applikationer"
        ]
      },
      "size": 15,
      "time": {
        "absolute": true,
        "lectures": 48,
        "exercises": 48,
        "seminars": 40,
        "preparation": 96,
        "semester_report_1": 60,
        "semester_report_2": 92,
        "exam_semester_1": 16,
        "exam_semester_2": 8,
        "assignments": 50,
        "total": 412
      },
      "mandatory_activities": [
        "De studerende vil møde en række godkendelsesopgaver, som sikrer progression for den enkelte studerendes faglige udvikling."
      ],
      "exam": {
        "prerequisites": "mandatory activities",
        "type": "Prøven i faget består af tre delprøver: 25%: skriftligt produkt udarbejdet hjemme, individuel prøve, max 30 sider, 7-trins-skala, 25%: Skritflig stedprøve på CBS' computere, individuel prøve, 4 timer, hjælpemidler: på usb: noter, bøger og kompendier i ikke-eksekverbare formater, derudover fysiske bøger, 50%:Mundtlig prøve på baggrund af skriftligt produkt, 2-4 personer, maks 30 sider",
        "grading": "point",
        "aids": "see type"
      },
      "education_ids": [
        115
      ],
      "extended_description": "Faget gennemgår teknikker til programudvikling af mindre informationssystemer. Formålet med undervisningen er at give den studerende en grundlæggende forståelse for udvikling af programmer med grafiske brugergrænseflader og tilknyttede databaser. Kurset er inddelt i 2 semestermoduler: Programudvikling I (1. semester) og Programudvikling II (2. semester). I løbet af begge semestre vil de studerende møde en lang række små opgaver, som de på frivillig basis vil kunne løse og aflevere. De vil til øvelsestimer kunne få hjælp hvis der måtte være behov for dette. De studerende vil møde en række godkendelsesopgaver, som sikrer progression for den enkelte studerendes faglige udvikling."
    },
    {
      "internal_id": 496,
      "code": "M-GBE-B3-8",
      "name": "Programmering til Datanalyse",
      "contents": {
        "type": "B",
        "knowledge": [
          "Skal have indsigt i grundlæggende imperativ programmering.",
          "Skal have kendskab til et specifikt programmeringssprog og dets komponenter.",
          "Skal have kendskab til anvendelse af integrerede udviklingsmiljøer.",
          "Skal have kendskab til basale datatyper og datastrukturer."
        ],
        "skills": [
          "Skal kunne skrive, finde og rette op på fejl og afvikle imperative computerprogrammer.",
          "Skal kunne indlæse og håndtere forskellige dataformater.",
          "Skal kunne anvende elementer fra standardiserede og specialiserede biblioteker til dataanalyse, datahåndtering og visualisering."
        ],
        "competencies": [
          "Skal kunne anvende fagets metoder til at løse udvalgte industrielle problemer.",
          "Skal kunne redegøre for hvorledes den tilegnede viden og færdigheder kan overføres til andre kvantitative databehandlingsredskaber."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        116,
        117
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 498,
      "code": "MSNSSDM1204",
      "name": "Programming for services",
      "contents": {
        "type": "B",
        "knowledge": [
          "Understand integrated development environments",
          "Understand recursive functions",
          "Understand types, declarations, expressions and statements",
          "Understand the complexity of a program",
          "Understand libraries and the concept of linking"
        ],
        "skills": [
          "Design an event-driven interactive interface, e.g., a simple app or a touch-point of a service and integrate external libraries (application)",
          "Interpret and analyze a basic program",
          "Work out the complexity of a program (understanding)",
          "Explain how to use algorithms, functions and data for solving problems (understanding)"
        ],
        "competencies": [
          "Evaluate (analysis) existing code, judge its design and recommend changes",
          "Evaluate and select the right platform to be used for supporting a specific service application"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written or oral.",
        "grading": "point",
        "aids": "restricted"
      },
      "education_ids": [
        118
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 500,
      "code": "27517PU026",
      "name": "Programmering, automatisering og projekt 3",
      "contents": {
        "type": "A",
        "objectives": [
          "anvende konstanter, variable, boolske udtryk, kollektions og datastrukturer i forbindelse med udvikling af it-applikationer",
          "anvende løkkestrukturer i forbindelse med udvikling af it-applikationer",
          "definere og bruge metoder i forbindelse med udvikling af it applikationer",
          "programmere basale grafisk brugergrænseflader",
          "udvikle basale applikationer til praktisk dataopsamling og databehandling fra kemisk måleudstyr",
          "arbejde problemorienteret i en projektgruppe med en problemstilling inden for automation",
          "designe, planlægge og udføre eksperimentelle forsøg for en problemstilling, som vedrører automatisering",
          "udvikle en it-applikation til automatisering",
          "udarbejde en teknisk projektrapport, som dokumenterer, evaluerer og perspektiverer projektarbejdet",
          "inddrage videnskabelig relevant litteratur og anvende referencer ifølge almindelig videnskabelig standard",
          "fremlægge og diskutere projektarbejdet mundtligt",
          "redegøre for anvendelse af redskaber til projektstyring og projektledelse i gruppen og reflektere over potentialerne i forhold til fremtidigt projektarbejde",
          "beskrive og reflektere over eventuelle samarbejdsproblemer med inddragelse af gruppens personlighedsprofiler"
        ],
        "contents": [
          "I kurset undervises i en række basale programmeringsbegreber og programmeringsværktøjer, som gør de studerende i stand til at udvikle egne it-applikationer til bla. dataopsamling, styring og regulering af kemisk udstyr.",
          "På baggrund af disse færdigheder udvælges en praktisk automatiseringskrævende problemstilling, som bearbejdes i en projektgruppe med inddragelse af litteratursøgning.",
          "Arbejdet omfatter planlægning og gennemførsel af eksperimentelle forsøg, herunder valg af relevante sensorer og dataopsamlingsmetoder, samt valg af relevant regulator og reguleringsmekanismer.",
          "Efter implementering skal systemet testes og valideres under relevante driftsbetingelser. Arbejdet dokumenteres i en projektrapport, som fremlægges i forbindelse med eksamen."
        ]
      },
      "size": "unknown",
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Aflevering af tre separate programmeringsopgaver, som stilles i løbet af kursusforløbet. Aflevering af projektrapport",
        "type": "Kurset evalueres ved en projektprøve, som omfatter en gruppefremstillet skriftlig projektrapport samt en mundtlig gruppeprøve. Ved den mundtlige prøve fremlægges projektet af gruppen, og efterfølgende eksamineres gruppen samlet på baggrund af projektet, fremlæggelsen samt udvalgt programmeringsteori. Eksaminationstiden er 20 min gange antallet af gruppemedlemmer.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        119
      ],
      "extended_description": "It-applikationer bruges overalt, bla. også til dataopsamling fra kemisk udstyr og til automatisering af arbejds- og produktionsprocesser. På kurset undervises i grundlæggende programmeringsfærdigheder, som kan bruges til at udvikle basale it-applikationer, og de studerende bruger færdighederne til at udvikle enkle skræddersyede applikationer til opsamling og behandling af data fra kemisk måleudstyr. Automatisering anvendes til at effektivisere og forbedre arbejds- og produktionsprocesser, og er et kerneområde i mange ingeniøropgaver. På kurset skal de studerende bruge de tillærte programmeringsfærdigheder i forbindelse med et praktisk og kemisk relevant automatiseringsproblem, som bearbejdes i en projektgrupper og afrapporteres i en projektrapport."
    },
    {
      "internal_id": 502.1,
      "code": "B-MAT1-PROMA",
      "name": "Programmering for matematikere",
      "contents": {
        "type": "B",
        "knowledge": [
          "skal have viden om, hvordan grundlæggende simple fysiske ’black-box’ modeller konstrueres og testes",
          "skal have viden om ’black-box’ modellers gyldighedområde og deres begrænsninger.",
          "skal have viden om grundlæggende simuleringsteknik"
        ],
        "skills": [
          "skal kunne implementere grundlæggende beregningsopgaver i programmeringssproget Python",
          "skal kunne implementere simple modeller som et Python computerprogram",
          "skal kunne anvende Python til beregninger på simple modeller og validere de implementerede modeller og resultater",
          "skal kunne vurdere nødvendigt modelleringsniveau for et konkret fysisk modelleringsproblem"
        ],
        "competencies": [
          "skal kunne opbygge en simpel model for et fysisk system",
          "skal kunne implementere en matematisk beskrevet model i Python programmeringssproget",
          "skal kunne bruge den computerimplementerede model til at analysere det fysiske system"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Aktiv deltagelse/løbende evaluering",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        120,
        122,
        126,
        176
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 502.3,
      "code": "520171U028",
      "name": "Introduktion til programmering med videnskabelige anvendelser",
      "contents": {
        "type": "A",
        "objectives": [
          "Anvende konstruktioner fra et almindeligt programmeringssprog",
          "Udvikle velstrukturerede programmer og udføre test og fejlfinding af disse",
          "Forklare grundlæggende programmerings begreber og enkle algoritmiske teknikker",
          "Anvende standard værktøjer til videnskabelige formål",
          "Anvende dokumentationen for et programmeringssprog og tilknyttede softwarepakker."
        ],
        "contents": [
          "Kurset giver en introduktion til programmering med videnskabelige applikationer. Programmerings begreber og teknikker introduceres ved hjælp af programmeringssproget Python. Begreberne vil desuden blive illustreret i andre programmeringssprog.",
          "Grundlæggende programmeringsbegreber: Datatyper, operatorer, variable, kontrolstruktur, betingelser, løkker, funktioner, rekursion, scope, exceptions. ",
          "Objekt orienteret programmering: Abstrakte datatyper, klasser, nedarvning, indkapsling.",
          "Grundlæggende algoritmiske teknikker: Sortering, binær søgning, dynamisk programmering.",
          "Systematisk udvikling af programmer: Test og fejlfinding.",
          "Fil-baseret input/output, numerisk analyse, funktionel programmering.",
          "Videnskabelige anvendelser ved hjælp af standard pakker i Python."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Aflevering og godkendelse af 10 obligatoriske opgaver, og aflevering af 1 implementeringsprojekt.",
        "type": "Skriftlig eksamen bestående af programmeringsopgaver og implementeringsprojekt. Karakteren afspejler en samlet vurdering af implementeringsprojekt og skriftlig eksamen, 5 timer",
        "grading": "point",
        "aids": "Computer, høretelefoner og internet."
      },
      "education_ids": [
        121,
        123,
        178
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 503,
      "code": "02635",
      "name": "Mathematical software programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Evaluate discrete and continuous mathematical expressions.",
          "Describe and use data structures such as lists, arrays, and sparse matrices.",
          "Choose appropriate data types and data structures for a given problem.",
          "Compare iterative and recursive solutions for simple problems.",
          "Analyze the runtime behavior and the time and space complexity of simple programs.",
          "Call external (third party) programs and libraries.",
          "Design, implement, and document a program that solves a mathematical problem.",
          "Debug and test mathematical software.",
          "Describe and use basic object-oriented programming concepts such as classes and objects.",
          "Explain rounding errors and floating point number representation of real numbers."
        ],
        "contents": [
          "Programming paradigms: imperative programming, object-oriented programming.",
          "Data structures: lists, arrays, sparse matrices.",
          "Loading data.",
          "Calling external programs and libraries (especially numerical).",
          "Optimization and parallelization."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam and reports: 4 hours",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        125
      ],
      "extended_description": "To enable the participants to write software that can solve numerical problems based on a mathematical model. To give the participants an introduction to imperative and object-oriented programming as well as the ability to employ these paradigms using imperative and object-oriented programming languages. In this course we use C/C++ as C-based programming languages are widely used for programming mathematical software. The participants are also given an introduction to basic algorithms and data structures that are often used in mathematical software. To ensure that you, as a participant, develop practical skills, you will work with small mathematical projects in which programming is an indispensable tool. Moreover, you will train software documentation in reports."
    },
    {
      "internal_id": 513,
      "code": "MSNMEDB2213A",
      "name": "Programmering af mobile applikationer",
      "contents": {
        "type": "B",
        "knowledge": [
          "viden om grundlæggende objektorienterede programmeringsstrategier (OOP) og  modeller",
          "viden om UML til at facilitere en brugercentreret designtilgang",
          "viden om mobile udviklingsmiljøer, debuggingværktøjer og -metoder",
          "forståelse af grundlæggende design patterns som er relevante for udvikling på mobile platforme, f.eks. Model-View-Controller (MVC), singleton, osv.",
          "viden om GUI programmering på PC og mobile platforme, som tablet, telefon",
          "forståelse af forskellige software udviklingsmetoder"
        ],
        "skills": [
          "anvende OOP i udvikling og design af interaktive applikationer på PC og mobile platforme",
          "anvende et event-drevet design til udvikling af fungerende applikationer som anvender et grafisk brugerinterface"
        ],
        "competencies": [
          "analysere bruger- og domænekrav og syntetisere design, programmering og evaluering af interaktive applikationer på PC og mobile platforme"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "For at kvalificere sig til eksamen, skal den studerende have: afleveret obligatoriske opgaver rettidigt, færdiggjort obligatoriske studieaktiviteter rettidigt",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "restricted"
      },
      "education_ids": [
        127
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 544,
      "code": "02101",
      "name": "Introductory Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Design and document the structure of an object-oriented program.",
          "Implement a worked out design.",
          "Understand and apply the basic items of the programming language.",
          "Choose and apply suitable data types and data structures.",
          "Understand and apply the facilities of the actual programming language to handle polymorphism, inheritance and encapsulation.",
          "Recognize a few, simple design patterns.",
          "Analyse the run-time behavior of a program.",
          "Write a clear and well-structured report documenting all the central aspects of a programming project.",
          "To be familiar with and to be able to express oneself in the Danish and English terminology."
        ],
        "contents": [
          "types, primitive and referenced",
          "basic programming constructs (loops, branching statements, etc)",
          "values, operators and expressions",
          "classes, objects, fields and methods",
          "use of libraries",
          "design of classes, hierarchies, inheritance",
          "abstraction (abstract classes, interfaces)",
          "recursion",
          "generic classes",
          "error/exception handling"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written examination and reports. The evaluation is based on an overall assessment of the completed individualized reports and programs, as well as the written examination. 4 hours",
        "grading": "point",
        "aids": "Electronic devises including calculator are not admitted as an aid for the exam."
      },
      "education_ids": [
        128,
        132,
        187
      ],
      "extended_description": "The aim of the course is to convey the basic concepts of imperative and object-oriented programming and to enable the student to apply these concepts to common object-oriented programming languages. The student will be able to develop smaller programming projects and to document the work in a report. The student will be able to read program code and analyse the behavior of the program independent of an implementation."
    },
    {
      "internal_id": 546,
      "code": "M-MP-B5-5",
      "name": "Aktuering og Robotteknik",
      "contents": {
        "type": "B",
        "knowledge": [
          "Skal have viden om hydrauliske grundstørrelser.",
          "Skal have viden om hydrauliske komponenter og deres karakteristika.",
          "Skal have opnået viden om og forståelse af hydrauliske kredsløb og analyse af disse under stationære forhold.",
          "Skal have viden om elektriske grundstørrelser og grundelementer.",
          "Skal have opnået viden om og forståelse af lineære elektriske kredsløb og analyse af disse under stationære DC og AC driftsforhold.",
          "Skal have kendskab til magnetiske kredse og analyse af disse.",
          "Skal have viden om transformatoren, DC-maskinen og asynkronmaskinen.",
          "Skal kunne gøre rede for on-line, off-line og hybrid programmering af robotter.",
          "Skal kunne gøre rede for simulering af en robots drift.",
          "Skal kunne gøre rede for forward og invers kinematik.",
          "Skal kunne beskrive led og ledforbindelser.",
          "Skal kunne anvende Denavit-Hartenbergs formalisme.",
          "Skal kunne gøre rede for invers manipulatorkinematik",
          "Skal kunne anvende trajectory generering og kontrol.",
          "Skal kunne anvende ledinterpolation og kartesisk interpolation.",
          "Skal kunne gøre rede for lineær styring af manipulatorer.",
          "Skal kunne redegøre for design af robotstyring."
        ],
        "skills": [
          "Skal have kendskab til hydrauliske komponenter og systemer, styring af hydrauliske systemer, styreventiler, tryk og flow styrede ventiler og og hydrostatiske transmissioner.",
          "Skal kunne formulere de statiske ligninger for hydrauliske komponenter.",
          "Skal kunne løse de statiske ligninger for et hydraulisk system med henblik på at kunne bestemme tryk, flow og tab.",
          "Skal kunne analysere enkle og sammensatte elektriske kredsløb og kunne anvende kredsløbsteknikken til at beregne strømme, spændinger, energier og effekter i simple DC kredse og stationære vekselstrømskredse.",
          "Skal kunne forstå databladsspecifikationer for elektriske motorer og hydrauliske komponenter."
        ],
        "competencies": [
          "Skal kunne beskrive virkemåde og opstille og løse de centrale statiske ligninger for hydrauliske komponenter og systemer.",
          "Skal kunne beskrive virkemåde for de almindelige elektriske maskiner.",
          "Skal kunne sammensætte og analysere et hydraulisk og elektrisk aktueringssystem ud fra statisk analyse og databladsspecifikationer.",
          "Skal kunne implementere styringer af robotter til at gennemføre simple industrielle opgaver f.eks. montage.",
          "Skal kunne udvælge en industriel robot til en given applikation under hensyntagen til det nødvendige antal frihedsgrader og styringsmuligheder."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        129
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 549,
      "code": "KBPRDAP1KU",
      "name": "Programming and Data Processing",
      "contents": {
        "type": "A",
        "objectives": [
          "Identify basic elements in a piece of code",
          "Use text-based tools for program development",
          "Analyse computational tasks through pseudo code",
          "Construct and manipulate tabular data in text format",
          "Solve programmatic problems by modifying existing code",
          "Develop simple programmatic solutions implemented in code"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 7.5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam, 2 hours",
        "grading": "point",
        "aids": "restricted"
      },
      "education_ids": [
        131
      ],
      "extended_description": "The purpose of this course is to teach Python to students with no previous programming knowledge and with diverse academic backgrounds. It takes a slightly different approach than what is usually done within Computer Science or other technology-oriented programs. This means that instead of putting focus on the fastest, most efficient or elegant forms of code, students will be instructed to prioritise transparency and readability. Creative ways of approaching code will be explored. Much emphasis will also be put on “critical” aspects of programming related to perspectives prevalent within the humanities and social sciences. The purpose of this is to give students tools to articulate and reflect on the challenges and opportunities which emerge out of attempting to solve real-world problems with algorithms, something which is in great demand by future employers."
    },
    {
      "internal_id": 555.1,
      "code": "NKEB23000U",
      "name": "Python for nanoscience",
      "contents": {
        "type": "B",
        "knowledge": [
          "basal python syntax og programstruktur, Lennard-Jones potentialer, molekylær dynamik ligninger, periodiske grænsebetingelser, energiminimering, kraftfelter"
        ],
        "skills": [
          "Planlægge, implementerer og bruge programpakker",
          "Anvende python til simulering af nanosystemer",
          "Anvende udvalgte matematiske algoritmer, som for eksempel molekylærdynamiske metoder"
        ],
        "competencies": [
          "Forklare, både mundtligt og skriftligt, de brugte metoder og opnåede resultater"
        ],
        "contents": [
          "Kurset indeholder en række øvelser, samt den nødvendige teori herfor.",
          "Computersimulationsøvelserne benytter molekylær-dynamiske simuleringsmetoder, som også præsenteres i kurset. Molekylær dynamiske simuleringer bruges til at løse bevægelses-ligningerne for mange vekselvirkende partikler."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 18,
        "preparation": 133,
        "exercises": 24,
        "project": 30,
        "exam": 1,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Løbende evaluering givet på baggrund af følgende to delelementer: A) en skriftlig 1-times eksamen i 6. blokuge B) et programmeringsprojekt og dertil hørende rapport i 7. og 8. blokuge. Man kan vælge mellem tre forskellige programmeringsprojekter Begge delelementer skal bestås for at bestå kurset og vægtes med 50% hver. Dvs hvis man ikke består, f.eks. delelement A, består man ikke kurset.",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        133
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 568,
      "code": "NDAB21003U",
      "name": "Python programmering til datavidenskab",
      "contents": {
        "type": "AB",
        "objectives": [
          "kunne forklare forskellen mellem forskellige datatyper i Python og kunne vælge relevante datatyper i forhold til en given programmingsopgave",
          "kunne give en detaljeret beskrivelse af kontrolstrukturer og løkker og være i stand til at forklare, hvordan brugen af løkker kan påvirke et programs beregnings-kompleksitet",
          "kunne give eksempler på hvordan fejl i programmer kan håndteres",
          "kunne motivere brugen af funktioner og moduler og give eksempler på relevant brug af klasser og objekter",
          "kunne identificere problemer, hvor brugen af regulære udtryk er velbegrundet samt være i stand til at konstruere regulære udtryk til løsning af konkrete pattern matching problemer",
          "være i stand til selvstændigt at finde online information om eksterne Python moduler/biblioteker og anvende fundne moduler til at løse en konkret opgave."
        ],
        "knowledge": [
          "Efter kurset vil deltagere beherske nøglebegreber inden for programmering såsom datatyper, variable, kontrolstrukturer, løkker og funktioner samt have en forståelse for centrale begreber inden for objektorienteret programmering, pattern matching og beregningskompleksitet. Endelig opnås en forståelse Unix/Linux baserede styresystemer med fokus på grundlæggende kommandolinjenavigation, pipes, netværk og proceskontrol."
        ],
        "skills": [
          "Kursusdeltagere bliver i stand til at løse små til mellemstore programmeringsopgaver i Python, der fokuserer på opgaver i forhold til databehandling og -analyse.",
          "Deltagerne vil lære at skrive velstrukturerede og velkommenterede programmer.",
          "Endelig opnås færdigheder i at afvikle scripts på (beregnings-)servere og navigere på servere vha. af en Unix/Linux kommandolinje."
        ],
        "competencies": [
          "Efter gennemført kursus vil deltagerne være i stand til at løse mange af de programmeringsopgaver, der forekommer i forbindelse med Datavidenskab og skrive velstrukturerede programmer, der kan vedligeholdes og videreudvikles."
        ],
        "contents": [
          "Kurset er en introduktion til programmering i Python med fokus på databehandling og -analyse.",
          "Kurset indeholder grundlæggende begreber fra programmering såsom datatyper, kontrolstrukturer, løkker, funktioner, objektorienteret programmering, pattern matching (regulære udtryk) og beregningskompleksitet.",
          "Yderligere opnås der også grundlæggende tekniske færdigheder, der kan bruges i en datavidenskabssammenhæng; herunder brug af eksterne servere og navigation på samme vha. en Unix/Linux kommandolinje."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 21,
        "preparation": 139,
        "exercises": 21,
        "exam": 25,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Der stilles 5-6 opgaver i løbet af kurset, hvoraf alle undtagen én skal godkendes for at deltage i eksamen.",
        "type": "Skriftlig prøve, 4 timer med opsyn",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        134
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 582.1,
      "code": "K-BT-B4-50",
      "name": "Data Science",
      "contents": {
        "type": "B",
        "knowledge": [
          "redegøre for centrale dataopsamlingsprincipper",
          "gøre rede for definitioner og teknikker indenfor lineær- og ikke-lineær regression",
          "forklare hvordan større datamængder organiseres,  bearbejdes og visualiseres",
          "redegøre for best practise i dokumentation og test af kode"
        ],
        "skills": [
          "anvende basal programmering til opsamling, behandling og visualisering af data",
          "benytte forskellige interfaces til opsamling og lagring af data",
          "bruge modulets værktøjer indenfor dataopsamling og machine learning til at belyse relevante problemstillinger forskellige fagområder (hhv. biologi, kemi, bioteknologi og miljøvidenskab)"
        ],
        "competencies": [
          "unknown"
        ],
        "contents": [
          "Modulet vil gennem workshops og case-stories introducere relevante koncepter og værkøjer omhandlende dataopsamling, programmering, machine learning og visualisering af større datamængder."
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        136,
        137,
        138,
        139,
        140,
        141
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 583,
      "code": "N-EN-B4-4AZ",
      "name": "Realtidssystemer og programmeringssprog",
      "contents": {
        "type": "B",
        "knowledge": [
          "Have viden om talsystemer (decimal, binær, hexadecimal), basale aritmetiske operatorer og repræsentation af hel- og decimaltal",
          "Have viden om basale logiske komponenter og enkle kombinatoriske kredsløb",
          "Have grundlæggende viden om bi-stable (flip-flops) komponenter og deres anvendelse i enkle synkrone sekventielle kredsløb",
          "Have forståelse for hvordan digitale signaler repræsenteres i forskellige elektriske logik-familier samt forstå deres statiske og dynamiske elektriske karakteristikker",
          "Have kendskab til metoder for programudvikling og kunne forstå udviklingsprocessen for et program fra problemformulering til endelig implementering",
          "Have kendskab til syntaksen for programmeringssproget C, herunder viden om hukommelsesstyring, datatyper og variable, kontrolstrukturer, funktioner samt brug af pointere",
          "Have grundlæggende kendskab til C-sprogets pre-processor, kompiler og linker samt brug af flere kildefiler og biblioteksfiler",
          "Have kendskab til brug af et integreret udviklingsmiljø til programudvikling i C og til fejlfinding",
          "Have grundlæggende forståelse for mikrokontrollere, deres arkitektur og anvendelse i realtidssystemer",
          "Have kendskab til basale perifere enheder i mikrokontrollere, herunder digital input og output samt analog input og output",
          "Have kendskab til virkemåden for digital til analog konvertere og analog til digital konvertere samt deres praktiske anvendelse i en mikrokontroller",
          "Have kendskab til specielle perifere enheder, herunder pulsbreddemodulator og interface til en enkoder med kvadratursignaler",
          "Have kendskab til udvikling/fejlfinding af C-programmer til mikrokontrollere anvendt i realtidsapplikationer med både interrupt service rutiner og ikke-tidskritiske rutiner",
          "Have kendskab til tidsdiskret implementering af filtre, regulatorer og puls-breddemodulatorer i mikrokontrollere",
          "Have kendskab til metoder til grafisk programmering",
          "Have kendskab til programmering vha. dataflowteknikker ved brug at basale datatyper og kontrolstrukturer for både ikke-tidskritiske- og realtids-applikationer",
          "Have kendskab til anvendelse af integreret udviklingsmiljø for grafisk programmering og fejlfinding",
          "Have kendskab til hardware til brug ved dataopsamling"
        ],
        "skills": [
          "Være i stand til at analysere, designe og realisere simple kombinatoriske og sekventielle logiske kredsløb",
          "Være i stand til at beskrive de væsentligste elektriske karakteristika for forskellige logikfamilier og forstå hvornår interfacekredsløb skal anvendes",
          "Være i stand til at interface en mikrokontrollers perifere enheder til eksterne enheder (aktuatorer, sensorer, osv.) ved at tage hensyn til alle relevante elektriske forhold",
          "Være i stand til at udvælge et passende realtidssystem og tilhørende programmeringsmiljø til en given ingeniørmæssig problemstilling",
          "Være i stand til at neddele et program i mindre moduler, der kan programmeres, fejlfindes, og afprøves enkeltvist",
          "Være i stand til at udvikle applikationer i programmeringssproget C og vha. grafisk programmering, der kan løse en given problemstilling, som kan have realtidskrav",
          "Være i stand til at planlægge, udføre og dokumentere eksperimenter, hvor en mikrokontroller anvendes i et realtidssystem med både analoge og digitale input og output."
        ],
        "competencies": [
          "Skal selvstændigt kunne udføre design og udvikling inden for fagområdet realtidssystemer og deres programmering",
          "Skal selvstændigt være i stand til at videreudvikle egen viden og kompetencer inden for fagområdet ud over indholdet i dette kursusmodul"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "total": 300
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Aktiv deltagelse/løbende evaluering. Undervisningsdeltagelse med mindst 80% fremmøde samt godkendelse af miniprojekt, der kan udarbejdes gruppevis. Omfang ca. 10 sider (max. 2800 karakterer pr. side).",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        143
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 596,
      "code": "N-EN-B4-4C",
      "name": "Realtidssystemer og grafisk programmeringssprog",
      "contents": {
        "type": "B",
        "knowledge": [
          "Have viden om talsystemer (decimal, binær, hexadecimal), basale aritmetiske operatorer og repræsentation af hel- og decimaltal",
          "Have viden om basale logiske komponenter og enkle kombinatoriske kredsløb",
          "Have grundlæggende viden om bi-stable (flip-flops) komponenter og deres anvendelse i enkle synkrone sekventielle kredsløb",
          "Have forståelse for hvordan digitale signaler repræsenteres i forskellige elektriske logik-familier samt forstå deres statiske og dynamiske elektriske karakteristikker",
          "Have kendskab til metoder for programudvikling og kunne forstå udviklingsprocessen for et program fra problemformulering til endelig implementering",
          "Have grundlæggende forståelse for mikrokontrollere, deres arkitektur og anvendelse i realtidssystemer",
          "Have kendskab til basale perifere enheder i mikrokontrollere, herunder digital input og output samt analog input og output",
          "Have kendskab til virkemåden for digital til analog konvertere og analog til digital konvertere samt deres praktiske anvendelse i en mikrokontroller",
          "Have kendskab til specielle perifere enheder, herunder pulsbreddemodulator og interface til en enkoder med kvadratursignaler",
          "Have kendskab til tidsdiskret implementering af filtre, regulatorer og puls-breddemodulatorer i mikrokontrollere",
          "Have kendskab til metoder til grafisk programmering",
          "Have kendskab til programmering vha. dataflowteknikker ved brug at basale datatyper og kontrolstrukturer for både ikke-tidskritiske- og realtids-applikationer",
          "Have kendskab til anvendelse af integreret udviklingsmiljø for grafisk programmering og fejlfinding",
          "Have kendskab til hardware til brug ved dataopsamling"
        ],
        "skills": [
          "Være i stand til at analysere, designe og realisere simple kombinatoriske og sekventielle logiske kredsløb",
          "Være i stand til at beskrive de væsentligste elektriske karakteristika for forskellige logikfamilier og forstå hvornår interfacekredsløb skal anvendes",
          "Være i stand til at interface en mikrokontrollers perifere enheder til eksterne enheder (aktuatorer, sensorer, osv.) ved at tage hensyn til alle relevante elektriske forhold",
          "Være i stand til at udvælge et passende realtidssystem og tilhørende programmeringsmiljø til en given ingeniørmæssig problemstilling",
          "Være i stand til at neddele et program i mindre moduler, der kan programmeres, fejlfindes, og afprøves enkeltvist",
          "Være i stand til at udvikle applikationer i programmeringssproget vha. grafisk programmering, der kan løse en given problemstilling, som kan have realtidskrav",
          "Være i stand til at planlægge, udføre og dokumentere eksperimenter, hvor en mikrokontroller anvendes i et realtidssystem med både analoge og digitale input og output"
        ],
        "competencies": [
          "Skal selvstændigt kunne udføre design og udvikling inden for fagområdet realtidssystemer og deres programmering",
          "Skal selvstændigt være i stand til at videreudvikle egen viden og kompetencer inden for fagområdet ud over indholdet i dette kursusmodul"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Aktiv deltagelse/løbende evaluering. Undervisningsdeltagelse med mindst 80% fremmøde samt godkendelse af miniprojekt, der kan udarbejdes gruppevis. Omfang ca. 10 sider (max. 2800 karakterer pr. side).",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        144,
        145
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 607.1,
      "code": "ESNROBB1K3DK",
      "name": "Robot programmering",
      "contents": {
        "type": "B",
        "knowledge": [
          "Skal have indsigt i integrerede udviklingsmiljøer",
          "Skal have forståelse for forskellen mellem fortolkede og kompilerede programmeringssprog",
          "Skal være i stand til at forklare begreberne typer, erklæringer og udtryk",
          "Skal have forståelse for datastrukturer såsom arrays",
          "Skal have forståelse for forskellige former for input/output",
          "Skal have forståelse for procedure og funktioner, herunder funktioner med argumenter",
          "Skal have indsigt i et eller flere generelle imperative programmeringssprog såsom C eller C++",
          "Skal have indsigt i generelle software-miljøer til robotprogrammering, herunder versions- og filhåndtering"
        ],
        "skills": [
          "Skal kunne analysere og fortolke basale programmer og forklare deres funktionalitet",
          "Skal kunne designe og implementere algoritmer til opsamling og analyse af sensordata og kontral af aktuatorer",
          "Have forståelse for simpel tidslighed (f.eks. samplingsfrekvens)",
          "Skal kunne forklare (på forståelsesniveau) hvor algorimer, funktioner og data kan anvendes til problemløsning",
          "Skal kunne anvende et programmeringssprog til løsning af specificerede generelle data-processerings-opgaver"
        ],
        "competencies": [
          "Skal være i stand til, på egen hånd og i samarbejde med andre, at designe og implementere et eller flere programmer med det formål at kunne løse en forud defineret problemstilling, f.eks. at følge en banekurve med en mobil robot."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        146
      ],
      "extended_description": "Studerende der gennemfører dette modul skal være i stand til at anvende udviklingsværktøjer til robotter, herunder programmeringssprog og software-miljøer, med henblik på at kunne udvikle robot-applikationer der kan løse specificerede opgaver."
    },
    {
      "internal_id": 607.2,
      "code": "T540049101",
      "name": "Introduktion til C++",
      "contents": {
        "type": "B",
        "knowledge": [
          "grundlæggende objektorienteret C++ programmering",
          "kontrolstruktur: betingede udtryk, løkkestrukturer",
          "input/output: tastatur, skærm",
          "standard biblioteksfunktioner",
          "klasser, objekter, konstruktør, destruktør",
          "pointere, dynamisk hukommelsesallokering, funktions- og operatoroverload",
          "containers, arrays",
          "arv"
        ],
        "skills": [
          "Skrive og kompilere syntaktisk korrekt C++ kode inden for de områder der er angivet i fagbeskrivelsen under punktet “Målbeskrivelse - viden”"
        ],
        "competencies": [
          "analysere relativt simple problemstillinger og dertil udvikle et program til løsning af problemerne skrive relativt simple, velfungerende programmer i et objektorienteret sprog på baggrund af en specifikation "
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "lectures": 48
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig stedprøve. 3 timer.",
        "grading": "point",
        "aids": "unkown"
      },
      "education_ids": [
        147
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 609,
      "code": "T070005101",
      "name": "Robotics",
      "contents": {
        "type": "B",
        "knowledge": [
          "The historical background of robots and robot-technologies",
          "The basic elements of Lego robots and/or industrial robots: mechanics (e.g., joint types), actuators, sensors, electronics, and software",
          "Algorithms to create state-based programs",
          "Basic knowledge about control systems.",
          "Different pose representations for robots and transformations between them",
          "Serial Kinematics",
          "Robot environment (Tools, Feeding, Safety, …)"
        ],
        "skills": [
          "Choose the appropriate sensor for a given application. (Lego Robotics)",
          "Choose the best actuator for a given task. (Lego Robotics)",
          "Pick the best software function to control the actuator. (Lego Robotics)",
          "Use different pose representations in an industrial robot’s program",
          "Interface with sensors for an industrial robot"
        ],
        "competencies": [
          "Create, test and debug a program for a Lego robot.",
          "Create, test, and debug a program for an Industrial Robot"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "The group portfolio submitted on time during the semester must meet the requirements specified at the start of the semester and in the portfolio task specifications handed out during the semester.",
        "type": "Oral exam.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        148
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 624,
      "code": "U60190",
      "name": "Scientific Computing and Data Science",
      "contents": {
        "type": "A",
        "objectives": [
          "demonstrate an overview of methods in Scientific Computing and Data Science.",
          "choose methods in Scientific Computing and Data Science relevant for a given problem.",
          "independently learn about methods in Scientific Computing and Data Science on an advanced level.",
          "apply methods in Scientific Computing and Data Science to a new problem. This includes the relevant programming, testing, and interpretation of results."
        ],
        "contents": [
          "Scientific Computing, i.e., the use of computers and applied math to generate data from models by numerical methods and/or simulation. In the first mini-project students will work in groups to implement the so-called molecular-dynamics method in Python. This includes the relevant testing and interpretation of results.",
          "Data Science, i.e., the use of computers, models, and applied math to gain insight from data. In the second mini-project, students will work in groups to apply data science methods to scientific data of their own choice, and report their conclusions in a convincing way.",
          "In the third and final mini-projct students groups can choose between the two subjects (Scientific Computing and Data Science) or a combination thereof. If a single subject is chosen, the mini-project must include a discussion of how the other subject could be involved."
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "preparation": 70,
        "exercises": 30,
        "projects": 160,
        "exam": 10,
        "total": 270
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "The students produce a portefolio consisting of 3 mini-projects. All 3 can be handed-in for review by the teacher",
        "type": "Individual oral exam based on a portfolio. The assessment is an assessment of the oral examination. The written product(s) is not part of the assessment. 30 minute oral exam. At the exam the student makes a presentation of the third mini-project. The presentation may be interrupted by clarifying questions and the presentation will be followed by a discussion and questioning with in the curriculum of the course.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        149
      ],
      "extended_description": "To give the student experience in choosing and applying the methods of Scientific Computing and Data Science to new problems and to give the student an overview of methods associated with: - Scientific Computing, i.e., the use of computers and applied math to generate data from models by numerical methods and/or simulation. - Data Science, i.e., the use of computers, models, and applied math to gain insight from data."
    },
    {
      "internal_id": 636.1,
      "code": "KAØKO202118",
      "name": "Applied Data Science and Machine Learning",
      "contents": {
        "type": "B",
        "knowledge": [
          "the main workflow routines and techniques how to obtain, store, manipulate, and analyse data using relevant software and foundational machine learning approaches.",
          "how to use a wide variety of techniques to explore, visualise, describe and present their data, including unsupervised and supervised machine learning techniques.",
          "the differences and complementarities between the prediction focussed data science approach, and the causality seeking approach of traditional scientific statistics."
        ],
        "skills": [
          "reading, importing, exporting, manipulating, cleaning and (pre)processing data in most widely used data formats using relevant software.",
          "selecting and applying standard techniques from 'traditional' statistics and data science to solve empirical problems of data exploration, classification, optimisation, and forecasting including model performance evaluation, fine-tuning and optimisation.",
          "understanding, interpreting, critically reflecting upon, and explaining the results of data analysis."
        ],
        "competencies": [
          "comprehending and participating in current professional and academic discussions in applied statistics and data science as well as autonomosly expanding their knowledge in the field.",
          "critically reflecting possibilities and constraints related to the implementation and evolution of data-driven methods, including Identify problems which can be wholly or partially solved by the use of data analytics.",
          "describing and communicating the results of data analysis in a precise, understandable and informative manner, using appropriate data description and visualisation techniques."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "A prerequisite for participating in the exam is that the student has participated actively in developing written material during the module.",
        "type": "Oral exam. Group examination with max. 6 students",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        150
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 636.2,
      "code": "AØKA08186U",
      "name": "Programmering og statistik med SAS",
      "contents": {
        "type": "B",
        "knowledge": [
          "Beskrive og forstå database strukturen i SAS.",
          "Forklare de mange muligheder for at lægge data tilrette ved hjælp af SAS",
          "Beskrive SAS-procedurernes opbygning",
          "Forstå opbygningen af ikke-trivielle SAS-programmer"
        ],
        "skills": [
          "Udføre praktisk databehandling i SAS med henblik på at tilrettelægge data til efterfølgende statistiske og økonometriske analyser.",
          "Anvende SAS procedurer",
          "Fremskaffe information ud fra SAS's hjælpefaciliteter med henblik hurtigt at anvende (endog ukendte) SAS-procedurer til løsning af et konkret statistisk problem"
        ],
        "competencies": [
          "Fremskaffe statistiske resultater ved hjælp af de statistiske procedurer i SAS også selvom disse procedurer er ukendte."
        ],
        "contents": [
          "Inden for SAS-programmering gennemgås de mange programmerings muligheder i et SAS datastep, konvertering af datasæt med andre formater til SAS herunder håndtering af formatbiblioteker. Af specielle emner kan nævnes håndtering af tekstvariable, do-løkker, arrays og SAS-makroer, fx til Monte Carlo og bootstrap-analyser.",
          "Som eksempler på statistiske emner kan nævnes procedurer til clusteranalyse, diskriminansanalyse og beslutningstræer."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 42,
        "preparation": 161,
        "exam": 3,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig aflevering, 3,5 time med opsyn. Hjemmeeksamener er individuelle. Under eksamen må der under ingen omstændigheder kommunikeres med nogen om eksamensopgaven eller løsning af opgaven. Data vedr. løsning af opgaven eller andre informationer må ikke deles med nogen. Hvis dette eller lignende handlinger foretages, sidestilles det med eksamenssnyd og plagiering.",
        "grading": "point",
        "aids": "written aids"
      },
      "education_ids": [
        151
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 639.1,
      "code": "NMAK14029U",
      "name": "Statistics for Bioinformatics and eScience",
      "contents": {
        "type": "B",
        "knowledge": [
          "Probability distributions",
          "Standard errors and confidence intervals",
          "Maximum likelihood and least squares estimation",
          "Bootstrapping",
          "Hypothesis testing and p-values",
          "(Generalized) Linear and non-linear regression"
        ],
        "skills": [
          "Master basic implementation in R and generation of analysis reports using R notebooks.",
          "Use computer simulations for computations with probability distributions, including bootstrapping.",
          "Compute uncertainty measures, such as standard errors and confidence intervals, for estimated parameters.",
          "Compute predictions based on regression models taking into account the uncertainty of the predictions.",
          "Assess a fitted distribution using descriptive methods.",
          "Use general purpose methods, such as the method of least squares and maximum likelihood, to fit probability distributions to empirical data.",
          "Summarize empirical data and compute relevant descriptive statistics for discrete and continuous probability distributions."
        ],
        "competencies": [
          "Formulate scientific questions in statistical terms.",
          "Interpret and report the conclusions of a practical data analysis.",
          "Assess the fit of a regression model based on diagnostic quantities and plots.",
          "Investigate scientific questions that are formulated in terms of comparisons of distributions or parameters by statistical methods.",
          "Investigate scientific questions regarding association in terms of (generalized) linear and non-linear regression models."
        ],
        "contents": [
          "Standard discrete and continuous distributions, descriptive methods,  Bayes’ theorem, conditioning, independence, and selected probability results.",
          "Simulation.",
          "Mean, variance, estimators, two-sample comparisons.",
          "Maximum likelihood and least squares estimation.",
          "Standard errors and confidence intervals.",
          "Bootstrapping.",
          "Correlation, (generalized) linear and non-linear regression.",
          "The statistical programming language R and R notebooks."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 35,
        "preparation": 117,
        "exercises": 24,
        "exam": 30,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The exam consists of two parts: (1) two quiz assignments (60%), and (2) a 30-hours written take-home assignment (40%) in course week 8. The first part consist of two individual online assignments in form of quizzes of 1.5 hours each, which will be taken as part of the teaching.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        152
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 639.2,
      "code": "NMAK14029U",
      "name": "Computational Thinking in Bioinformatics",
      "contents": {
        "type": "A",
        "objectives": [
          "The participants will after the course have detailed knowledge of the concept of computational thinking and programming in a bioinformatics context, and have acquired practical experience in analyzing and solving computational problems using algorithmic and machine learning techniques in a bioinformatics context.",
          "Implement simple algorithms and data structures applicable to bioinformatics in a contemporary programming language.",
          "Formulate new algorithms for simple bioinformatics problems.",
          "Analyse the theoretical space and time complexity of algorithms and data structures.",
          "Judge pros and cons of different algorithmic choices in bioinformatics contexts.",
          "Reason about computability and efficiency in theory and practice.",
          "Prove correctness of algorithms."
        ],
        "contents": [
          "The course covers central computational aspects in a bioinformatics context, including algorithm design and analysis, basic data structures, basic concepts of machine learning, programming in Python and other contemporary programming languages, experimental validation of computational properties, and complexity of problems.",
          "The concepts are examplified by implementation of classical and machine learning bioinformatics tools."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Submission and approval of 5 mandatory assignments",
        "type": "mundtlig, 20 minutter",
        "grading": "point",
        "aids": "only notes"
      },
      "education_ids": [
        153
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 640,
      "code": "NBIA08011U",
      "name": "Statistics for Molecular Biomedicine",
      "contents": {
        "type": "B",
        "knowledge": [
          "Statistics for data of biological and/or medical relevance, in particular: Descriptive statistics, Distributions, Study design, Hypothesis testing/interval estimation, Non-parametric methods, Analysis of variance, Linear regression",
          "The symbolic language of statistics and the corresponding formalism",
          "Interpretation of statistical results for experimental data",
          "The R program"
        ],
        "skills": [
          "Set up statistical models for data of biological and/or medical relevance – taking as a starting point models based on the binomial and normal distributions.",
          "Handle the symbolic language of statistics and the corresponding formalism",
          "Perform significance testing, p-value calculation and interpretation for simple experimental data, including compute-intensive techniques such as permutation testing.",
          "Report the results of model set up, data analysis, interpretation and assessment.",
          "Use R to be able to carry out necessary calculations for the practical statistical analysis of biological data."
        ],
        "competencies": [
          "Formulate scientific questions in statistical terms.",
          "Interpret and report the conclusions of a practical statistical analysis.",
          "Assess and discuss a statistical analysis in a biomedical context."
        ],
        "contents": [
          "The course is an introduction to statistics aimed for students of medical and biological sciences. An important part of the course is to learn the practical application of statistics using R, which is an open source statistics program.",
          "Descriptive statistics",
          "Distributions",
          "Study design",
          "Hypothesis testing/ interval estimation",
          "Non-parametric methods",
          "Analysis of variance",
          "Linear regression",
          "The statistical program R"
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 35,
        "preparation": 91,
        "exercises": 20,
        "exam": 60,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Continuous Assessment based on three assignments. The assignments should be done individually and not in groups. Weight is 30%, 30% and 40% at the third assignment.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        154
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 675,
      "code": "NMAA08015U",
      "name": "Statistik for biokemikere",
      "contents": {
        "type": "B",
        "knowledge": [
          "Kendskab til de statistiske grundbegreber: statistisk model, estimation, konfidensintervaller, hypotesetest, prædiktion, modelkontrol",
          "Kendskab til multiple test",
          "Kendskab til effekten af datatransformationer"
        ],
        "skills": [
          "Opstille biokemisk relevante statistiske modeller hvor en eller flere faktorer kan påvirke en observabel størrelse.",
          "Analysere et datamateriale med statistiske modeller og fortolke resultaterne. Herunder hører at kunne transformere data (hvis relevant), estimere og lave konfidensintervaller for parametrene i modellen og at kunne udføre og fortolke resultaterne af formelle test",
          "Validere modeller og modelforudsætninger (modelkontrol)",
          "Anvende programmet R til analyse, herunder fortolke output i relation til ovenstående mål."
        ],
        "competencies": [
          "Udføre statistiske analyser på givne datasæt og vurdere analysens validitet",
          "Fortolke statistiske modeller og de indgående parametre, herunder hovedeffekter og vekselvirkninger i variansanalysemodeller og koefficienterne i regressionsmodeller",
          "Fortolke estimater, hypoteser, hypotesetest, konfidens- og prædiktionsintervaller",
          "Vurdere resultaterne af simple statistiske analyser udført og beskrevet af andre, fx. i biokemiske artikler, og vurdere validiteten af analyserne"
        ],
        "contents": [
          "Beskrivende statistik, normalfordelingen, analyse af en og to stikprøver, variansanalyse, lineær og ikke-lineær regression, introduktion til R."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 35,
        "preparation": 107,
        "exercises": 35,
        "project": 25,
        "exam": 4,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Godkendelse af to obligatoriske projekter.",
        "type": "Praktisk skriftlig prøve, 4 timer med opsyn. De studerende skal bruge computer med R til eksamen.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        155
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 692,
      "code": "BA-BDMAO1023U",
      "name": "Business Data Analytics, Quantitative Methods and Visualization",
      "contents": {
        "type": "A",
        "objectives": [
          "Understand and deploy techniques for exploring and analyzing structured data",
          "Understand and deploy basic machine learning techniques for classification and regression",
          "Understand and deploy techniques for visualizing and presenting results of data analytics",
          "Demonstrate an analytical understanding of business, societal, and ethical issues in the application of data analysis techniques"
        ],
        "contents": [
          "This course is designed to equip students with practical knowledge of tools and techniques for the exploration, analysis and visualization of data in business.",
          "It also deals with conceptual, societal and ethical issues associated with these techniques.",
          "The course has a blended format, with some lectures presented online, together with associated online activities.",
          "In addition, there will be regular hands-on lab sessions.",
          "The course includes an independently chosen project, which will  take the form of a business case analysis. Students will select a dataset, to which they apply data science techniques, building relevant models and assessing them from a business and data science perspective.",
          "Basic techniques for analysis of structured data, including use of query languages",
          "Basic machine learning tools and techniques, including classification and regression, as well as unsupervised methods such as clustering",
          "Techniques for visualization and presentation of the results of data analysis",
          "Conceptual, societal and ethical issues with business data analytics"
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 30,
        "preparation": 116,
        "project_and_exam": 60
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "In order to participate in the oral exam, the written product must be handed in before the oral exam; by the set deadline.",
        "type": "Oral exam based on written product. The grade is based on an overall assessment of the written product and the individual oral performance. Group size: 2-4.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        156
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 777,
      "code": "02633",
      "name": "Introduction to programming and data processing",
      "contents": {
        "type": "A",
        "objectives": [
          "Explain basic programming concepts",
          "Design and implement programs to solve simple computable engineering problems",
          "Use the integrated development environment and user interface of the programming language",
          "Import data in different formats",
          "Use variables of different types and perform basic computations",
          "Organize code using scripts and functions",
          "Write well-structured, commented, and readable code",
          "Use functions from existing toolboxes and libraries",
          "Graphically visualize data and information",
          "Write technical documentation"
        ],
        "contents": [
          "Programming language: Matlab or Python.",
          "Using the desktop environment and language documentation.",
          "Working with numbers, strings, logical values, vectors and matrices.",
          "Using arithmetic and logical operators, branching statements, looping and vectorization.",
          "Organizing code using scripts and functions.",
          "Error checking user input and creating interactive programs.",
          "Writing comments and technical documentation.",
          "Reading and writing data files. Graphical visualization of data."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "written examination and experiments. 2 hours.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        157
      ],
      "extended_description": "The use of computers for technical/mathematical computations and simulations is central for many areas at DTU, and it is therefore necessary to have a working knowledge of computer programming. In the course students will learn about basic concepts and techniques in programming, as well as how to write programs with a focus on computations with technical/engineering applications. The participants will be able to design and develop well-structured smaller programs, test the design and program, read various data formats, and visualize the results graphically. One of the programming languages Matlab or Python is used."
    },
    {
      "internal_id": 812.1,
      "code": "02393",
      "name": "Programming in C++",
      "contents": {
        "type": "A",
        "objectives": [
          "select and use data types",
          "define and construct data structures and functions, including recursive, dynamic data structures and recursive functions",
          "use principles of structured program design and methods",
          "describe and use containers and iterators",
          "construct and demonstrate generic functions and classes (templates)",
          "use and define classes with encapsulation and constructors",
          "use pointers and arrays with memory management",
          "develop projects organized in multiple header and source files",
          "explain and apply the principles of abstract data types",
          "analyze and compare the complexity of different data structures and algorithms",
          "explain the C++ runtime system"
        ],
        "contents": [
          "The course teaches C++ for the working programmer.",
          "The focus is on how to make use of the C++ constructs and libraries for the most common kinds of problems in an efficient way and to write programs in an elegant and abstract way.",
          "This includes the effective use of C++ constructs and concepts as well as how to apply good engineering principles in C++."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written examination and exercises. The written exam counts for 85% of the assessment; individual weekly exercises count for 15% of the assessment. The written exam will have to be handed in electronically. 4 hours.",
        "grading": "boolean",
        "aids": "all"
      },
      "education_ids": [
        165
      ],
      "extended_description": "The course is targeted at students who have some programming experience in at least one programming language (e.g. Python or Matlab) and wish to learn the basics of programming in C++. To this end, the course introduces key programming concepts using the C++ programming language and standard library: fundamental notions of data structures and algorithms, structured and object-oriented programming, generics, and templates."
    },
    {
      "internal_id": 812.2,
      "code": "28514PU162",
      "name": "Programmering 1",
      "contents": {
        "type": "A",
        "objectives": [
          "Anvende kontrolstrukturer i en simple kontekst",
          "Anvende udvalgte datastrukturer til opbevaring af data",
          "Anvende de basale principper i objektbaseret programmering (herunder indkapsling) ved implementering af simple klasser",
          "Danne programkode ud fra UML diagram",
          "Danne en simpel grafisk brugergrænseflade (GUI) hvorigennem brugeren kan kommunikere med en applikation"
        ],
        "contents": [
          "Basale datatyper",
          "Kontrolstrukturer",
          "Objektbaseret programmering",
          "Datastrukturer (arrays, collections mv.)",
          "GUI",
          "UML (klassediagrammer, aktivitetsdiagrammer)"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 70
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig. 2 timer.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        166
      ],
      "extended_description": "I nutidens sundhedsvæsen indgår teknologi i større og større omfang. Disse teknologier bygger i stor udstrækning på en kombination af elektronik og programmer. Derfor er det nødvendigt for en sundhedsteknologiingeniør at opnå en vis rutine i at læse og skrive programmer. I dette kursus lægges stor vægt på praktiske øvelser for at opnå denne rutine"
    },
    {
      "internal_id": 830,
      "code": "Anvendt matematik",
      "name": "Anvendt matematik",
      "contents": {
        "type": "B",
        "knowledge": [
          "viden om og forstår praktisk anvendelse af matematiske metoder til beskrivelser af simple problemstillinger inden for fødevareteknologi",
          "viden om lineær programmering."
        ],
        "skills": [
          "udføre grundlæggende udregninger med matricer",
          "anvende differentialregning og integralregning til beskrivelse af fødevareteknologiske",
          "processer",
          "opstille og anvende simple matematiske modeller",
          "anvende grundlæggende matematik til brug i laboratoriet og til dataanalyse",
          "vælge matematiske modeller og formidle effekten af disse til samarbejdspartnere."
        ],
        "competencies": [
          "med matematisk tilgang indgå i samarbejde om løsning af problemstillinger inden for fødevareteknologi."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "unknown",
        "grading": "unknown",
        "aids": "unknown"
      },
      "education_ids": [
        167
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 833.1,
      "code": "PLBLGB22202",
      "name": "Geografisk Informationsvidenskab & Teknologi",
      "contents": {
        "type": "B",
        "knowledge": [
          "Viden om geografisk informationsvidenskab & teknologi",
          "Viden om geodata, kort, geometri og koordinatsystemer",
          "Viden om grundlæggende datamodeller i GIS og deres anvendelser",
          "Viden om centrale danske & internationale datasamlinger",
          "Viden om anvendelse af kort, klassifikation, abstraktion, datakvalitet, kildemateriale og opbygning af kort",
          "Viden om Distribueret GIS (Web-GIS, mobil-GIS, Big Data)"
        ],
        "skills": [
          "Skal kunne anvende digital GIS-software til bearbejdning af geodata med henblik på analyse og syntese af data, og fremstilling af kort og visualiseringer",
          "Skal kunne anvende danske og internationale datasamlinger",
          "Skal kunne anvende rasterbaserede analysemetoder",
          "Skal kunne anvende netværksbaserede analysemetoder",
          "Skal kunne bearbejde kortets kartografiske udformning, med særlig fokus på tematisk kartografi",
          "Skal kunne benytte korrekt fagterminologi"
        ],
        "competencies": [
          "Selvstændigt kunne strukturere og håndtere dataindsamling, datamodellering, dataanalyse og visualisering i et Geografisk Informations System.",
          "Selvstændigt kunne vurdere anvendeligheden af GIS som værktøj i analyse af en given problemstilling",
          "Selvstændigt kunne evaluere kvaliteten af de anvendte geodata og de anvendte metoder og teknikker"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig eller mundtlig.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        168
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 833.2,
      "code": "NGEA04069U",
      "name": "Geografiske Informations Systemer & kartografi",
      "contents": {
        "type": "B",
        "knowledge": [
          "GIS software - ArcGIS.",
          "Digitale geodata.",
          "Datamodeller - vektor GIS og raster GIS.",
          "Organisering af geodata - database og geodatabaser.",
          "Projektioner, koordinatsystemer og georeferering.",
          "GIS analyser - overlayanalyser, netværksanalyser, bufferanalyser, cost surface analyse og multikriterieanalyse.",
          "Tematisk kartografi - formidling af GIS analyser",
          "Kartografiske grundbegreber og layout"
        ],
        "skills": [
          "anvende en specifik datamodel (raster eller vektor) til at repræsentere en abstraktion af den virkelige verden på digital form i et GIS i form af rumlige enheder eller helheder.",
          "definere en rumlig reference for indsamlede observationer på den 3 dimensionelle Jord, så disse kan koordinatsættes med henblik på lagring i et GIS, og desuden kunne forstå og anvende digitale geodata i forskellige skalaer.",
          "forklare opbygningen af og anvende en relationsdatabase for egenskabsdata til registrerede fænomener.",
          "anvende generiske GIS-analyseværktøjer til beregninger af rumlige egenskaber for geografisk information.",
          "anvende basale kartografiske principper og metoder, som kan benyttes ved en digital grafisk formidling af tematiseret geografisk information."
        ],
        "competencies": [
          "Diskutere, kategorisere og udvælge relevante og gyldige GIS-strategier og -analyser med henblik på løsning af rumligt relaterede problemstillinger indenfor geografiske og beslægtede fagområder."
        ],
        "contents": [
          "Kurset giver en indføring i teori og begreber om Geografiske Informationssystemer (GIS) og kartografi samt praktisk anvendelse af software til GIS-analyser og kartografisk fremstilling.",
          "Gennem en række praktiske øvelser og opgaver opbygges en generel viden om digitale geodata, GIS-baserede analyser samt anvendelsen af disse i forskellige faglige sammenhænge.",
          "På kurset lægges vægt på, hvorledes man via abstraktioner kan repræsentere objekter (huse, veje, skov ol.) i den virkelige verden i et Geografisk Informations System (GIS). Objekterne (geodata) repræsenteres enten i en vektor- eller rasterbaserede datamodel, der senere visualiseres som digitale kort.",
          "På kurset præsenteres en række forskellige generiske GIS-værktøjer til  analyse (rumlig) af geografiske problemstillinger. Kurset giver også en basal indføring i principperne bag databasesystemer, samt deres anvendelse, som en integreret del af GIS-funktionaliteten.",
          "Kurset giver desuden en indføring i den historisk kortlægning af Danmark samt principper for topografisk og tematisk kartografisk formidling."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 12,
        "preparation": 170,
        "exercises": 24,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Skriftlig prøve, 2 timer.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        169
      ],
      "extended_description": "unknown"
    },
  
    {
      "internal_id": 914,
      "code": "450202U003",
      "name": "Softwareudvikling",
      "contents": {
        "type": "B",
        "knowledge": [
          "Redegøre for, hvordan en computer fungerer og processen omkring programmering af computerbaserede informationssystemer."
        ],
        "skills": [
          "Analysere og planlægge en programmeringsproces."
        ],
        "competencies": [
          "Anvende et programmeringssprog.",
          "Træffe beslutning om systemkonfiguration vs. tilpasning."
        ],
        "contents": [
          "Programmeringssprog, herunder syntaks, semantik for et programmeringssprog og computational thinking.",
          "Programmeringsprocessen, herunder hvordan man identificerer krav til et program, udarbejder det tekniske design samt programmerer og tester et program.",
          "Programmeringsprocessens støtteprocesser, herunder hvordan man styrer krav og kvalitet.",
          "Forbedring af programmeringsprocessen med henblik på at øge produktivitet og kvalitet.",
          "Systemkonfigurering vs. systemtilpasning (ændring af kode): ERP som eksempel."
        ]
      },
      "size": "10",
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "En multiple choice-stedprøve i programmering (1 time), efterfulgt af en skriftlig stedprøve i øvrige dele af pensum (2 timer).",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        172
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 1000,
      "code": "BAART20193",
      "name": "Physical Computing 1",
      "contents": {
        "type": "B",
        "knowledge": [
          "basic electronics: resistors, diodes, and transistors",
          "sensing possibilities: binary (buttons) and continuous (analog) sensors",
          "basic programming concepts for interactive systems",
          "related work in sensor technology and the media arts."
        ],
        "skills": [
          "developing and applying a physical interface using specific sensors and actuators",
          "analyzing use of the basic programming",
          "synthesizing knowledge in written documentation."
        ],
        "competencies": [
          "evaluating an artefact with regards to basic electronics, programming sensors and actuators."
        ],
        "contents": [
          "In this module, students learn about basic principles of electronics, programming and how different electronic sensors and actuators can be interfaced to a microcontroller to design diverse forms of interactions between human and machine."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written exam. The examination is a 7-day assignment on a set subject. Number of pages: the written part must not exceed 5 pages. Individual.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        175
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 1008.2,
      "code": "NMAA09014U",
      "name": "Sandsynlighedsregning og statistik",
      "contents": {
        "type": "B",
        "knowledge": [
          "Forståelse af fordelingsbegrebet",
          "Forståelse af sandsynlighedsfunktioner og tætheder i en og to dimensioner, middelværdi og varians",
          "Forståelse af marginale og simultane fordelinger",
          "Forståelse for de statistiske grundbegreber (estimation, konfidensinterval, hypotesetest)",
          "Forståelse for lineær regression"
        ],
        "skills": [
          "Beregne sandsynligheder og betingede sandsynligheder vha. de basale definitioner og regneregler",
          "Gennemføre beregninger vedr. marginale, simultane og betingede sandsynligheder, middelværdi og varians",
          "Gennemføre estimation, beregne konfidensintervaller og udføre hypotesetest",
          "Gennemføre relevante beregninger i R"
        ],
        "competencies": [
          "Oversætte oplysninger givet som tekst om sandsynligheder og eksperimenter til det relevante matematiske formelsprog",
          "Gennemføre statistiske operationer i R",
          "Opstille simple statistiske modeller (herunder lineær regressiom), kunne vurdere deres relevans for at afklare konkrete videnskabelige spørgsmål, og kunne kvantificere usikkerheder om konklusionerne"
        ],
        "contents": [
          "Stokastiske variable og deres sandsynlighedsfordelinger",
          "Diskrete og kontinuerte fordelinger",
          "Middelværdi og varians",
          "Simultane og marginale fordelinger",
          "Stokastisk uafhængighed",
          "Estimation",
          "Hypotesetest og konfidensintervaller",
          "Lineær regression",
          "Introduktion til det statistiske programsystem R",
          "Simulation"
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 28,
        "preparation": 121,
        "exercises": 28,
        "exam": 29,
        "total": 206
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "Det er et krav for at deltage at de obligatoriske gruppeopgaver er godkendt og gyldige (to obligatoriske gruppeopgaver, grupper op til tre personer).",
        "type": "Praktisk skriftlig prøve, 4 timer. De studerende skal bruge computer med R til eksamen.",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        177
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 1008.4,
      "code": "N300042101",
      "name": "Introduktion til programmering",
      "contents": {
        "type": "A",
        "objectives": [
          "at give kompetence til at planlægge og udføre computerprogrammer, f.eks. i Matlab og Python",
          "viden om fælles programmering metoder",
          "udvikling af færdigheder i at programmere i flere typer programmeringssprog",
          "udvikling af færdigheder i softwareudvikling",
          "udvikling af færdigheder i at træffe og begrunde fagligt relaterede beslutninger",
          "udvikling af færdigheder i at beskrive, formulere og formidle problemstillinger og resultater til enten fagfæller og ikke-specialister eller samarbejdspartnere og brugere",
          "at give kompetence i at håndtere komplekse og udviklingsorienterede situationer i studie- og arbejdssammenhænge",
          "at give kompetence i at identificere egne læringsbehov og at strukturere egen læring i forskellige læringsmiljøer",
          "gøre studerende opmærksom på programmeringsproblemer i økonomi",
          "udarbejde en programstruktur baseret på modellen.",
          "implementere det planlagte program i det konkret anvendte programmeringssprog.",
          "finde og bruge egnede elementer i det til sproget hørende programbibliotek.",
          "planlægge og gennemføre en afprøvning af programmet.",
          "designe og implementere datatyper."
        ],
        "contents": [
          "De basale struktureringsredskaber sekvens, gentagelse, betinget instruktion og underprogram.",
          "Fundamentale datastrukturer.",
          "Objektorienteret programmeringsteknik, herunder eksempler og anvendelser.",
          "Rekursion og rekursive datastrukturer.",
          "Eksempler på datatyper og deres realisering."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "projektopgave",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        179
      ],
      "extended_description": "Kurset giver en introduktion til struktureret programmering. Kurset giver et videnskabeligt grundlag for at løse problemer ved modellering og implementering af edb-programmer."
    },
    {
      "internal_id": 1142.1,
      "code": "BAØKO202312",
      "name": "Statistics for Economists",
      "contents": {
        "type": "B",
        "knowledge": [
          "the statistical nature and properties of different variables when working with socio-economic data.",
          "basic probability and hypothesis testing.",
          "linear regressions."
        ],
        "skills": [
          "exploring real world data of socio-economic nature by exploring descriptive statistics.",
          "applying statistical techniques to calculate probabilities and find statistical evidence by performing hypotheses tests.",
          "estimating parameters of linear regression models and derive informed conclusions."
        ],
        "competencies": [
          "identifying real world problems in the field of economics, and address those problems empirically by applying various statistical techniques.",
          "interpreting the results in an intuitive way and derive conclusions on the basis of statistical evidence.",
          "evaluating the applied approach and understand the limitations and shortcoming of statistical models and conclusions."
        ],
        "contents": [
          "The primary objective of the module is to teach basic statistical concepts and methods.",
          "The course is organized as an interaction between theoretical understanding and practical application.",
          "The course equips students with basic skills in data analysis which are required for analyzing socio-economic issues as well as learning more advanced methods in advanced semesters. In this regard, the course also teaches the use of a statistical program, R.",
          "Upon the completion of this course students are expected to be able to investigate and interpret the basic statistical properties of any socio-economic data.",
          "Students should be able to formulate an appropriate hypothesis and test it using various statistical procedures. The students are expected to use various digital tools to report their analyses."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Oral exam.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        180
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 1142.2,
      "code": "AØKB08019U",
      "name": "Sandsynlighedsteori og statistik",
      "contents": {
        "type": "B",
        "knowledge": [
          "Forklare sandsynlighedsteoretiske begreber.",
          "Beskrive resultaterne fra store tals lov og den centrale grænseværdi sætning.",
          "Beskrive nogle af de mest anvendte diskrete og kontinuerte fordelinger.",
          "Forklare de vigtigste redskaber til beskrivende statistik.",
          "Forklare de vigtigste statistiske begreber.",
          "Forklare simpelt output fra STATA"
        ],
        "skills": [
          "Anvende begreberne usikkerhed og sandsynlighed.",
          "Beregne sandsynlighedsteoretiske og statistiske størrelser.",
          "Anvende sandsynlighedsteoretiske begreber på virkelighedsnære problemstillinger.",
          "Anvende relevante statistiske begreber og redskaber.",
          "Begrunde valg af STATA kommandoer.",
          "Udføre simple ændringer af STATA kode.",
          "Udføre simple statistiske analyser baseret på likelihood funktionen, dvs. estimation, hypoteseprøvning og model kontrol.",
          "Begrunde resultater af egne analyser og overvejelser samt beskrive dette i et klart og tydeligt sprog."
        ],
        "competencies": [
          "Vælge og anvende de relevante sandsynlighedsteoretiske redskaber på nye problemstillinger.",
          "Gennemføre beskrivende statistisk analyse på nye datasæt.",
          "Tage kritisk stilling til resultatet af andres statistiske analyser."
        ],
        "contents": [
          "I første del af kurset gennemgås sandsynlighedsteorien. Begreber som simultane-, marginale- og betingede-sandsynligheder, stokastiske variable, fordelinger (sandsynlighedsfunktioner og tæthedsfunktioner) og transformationer af stokastiske variable introduceres. Ligeledes introduceres begreber som middelværdi og betinget middelværdi, varians og kovarians.",
          "De studerende lærer, hvordan man beskriver stokastiske variable ved deres fordelinger, både når man ser på én variabel ad gangen og når man ser på flere variable samtidigt.",
          "Der gives eksempler på de mest anvendte diskrete og kontinuerte fordelinger så som Bernoulli, Binomial, Poisson, multinomial, geometrisk, lige-, normal-, Chi-i-anden-, Normal- og eksponential-fordelingen. De studerende lærer også, hvordan disse fordelinger kan karakteriseres ved fordelingsmål som middelværdi og varians.",
          "I beskrivelsen af de simultane fordelinger introduceres begreberne betingede fordelinger og statistisk uafhængighed, som er essentielle i den statistiske analyse.",
          "Ligeledes introduceres begreber som betinget middelværdi og varians.",
          "Kurset indeholder også en gennemgang af de vigtigste asymptotiske resultater så som store tals lov og den centrale grænseværdisætning, der senere anvendes i alle Økonometri fagene.",
          "Anden del af kurset er en introduktion til beskrivende statistisk og til statistisk analyse af data baseret på likelihood funktionen.",
          "De studerende lærer, at vælge en statistisk model til beskrivelse af et specifikt datamateriale, estimation af parametrene i den statistiske model, test af hypoteser i den statistiske model, og kontrol af model-antagelserne.",
          "Statistiske begreber, som antagelsen om uafhængige og identiske stokastiske variable, likelihood funktionen, maksimum likelihood estimatoren, teststørrelser, model-kontrol og misspecificationstest, introduceres.",
          "De studerende lærer maksimum likelihood estimatorens egenskaber herunder konsistens og asymptotisk normalitet, konstruktion af konfidensintervaller, hypoteseprøvning herunder opstilling af hypoteser og teststørrelser, samt principper for model-kontrol herunder test at fordelingsantagelser og konstruktion af simple misspecifikationstest.",
          "De studerende introduceres til det statistiske software STATA som bl.a. benyttes til brug af simulering af stokastiske variable og numerisk maximum likelihood estimation."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "lectures": 56,
        "group_lessions": 56,
        "preparation": 91,
        "exam": 3,
        "total": 206
      },
      "mandatory_activities": [
        "8 mandatory assiignments"
      ],
      "exam": {
        "prerequisites": "7 ud af de 8 obligatoriske afleveringsopgaver skal være godkendt for at den studerende kan deltage i eksamen.",
        "type": "Skriftlig prøve, 3 timer med opsyn.",
        "grading": "point",
        "aids": "written aids"
      },
      "education_ids": [
        181
      ],
      "extended_description": "unknown"
    },
    {
      "internal_id": 1142.4,
      "code": "B540023101",
      "name": "Statistics",
      "contents": {
        "type": "B",
        "knowledge": [
          "Understand the most important theoretical concepts of probability such as: probability, random variables, stochastic processes, simultaneous, marginal and conditional probabilities, distributions, probability density function, independence, mean, variance, covariance and correlation.",
          "Understand the most important statistical concepts, such as: random sampling, likelihood function, statistic, properties of a statistic, estimation, confidence interval, hypothesis and hypothesis testing, test score, test probabilities, significance level, type-I and type-II error."
        ],
        "skills": [
          "Describe the results of the law of large numbers and of the central limit theorem.",
          "Identify and describe the most common discrete and continuous distributions, such as: Bernoulli, Poisson, multinomial, negative binomial, hyper-geometric, geometric, uniform, normal, chi-squared, exponential, gamma, Student (t), and F distribution",
          "Carry out autonomously a simple statistical analysis (e.g., estimation, inference and hypothesis testing), a comparison of means from two different populations, or a test of independence for discrete random variables."
        ],
        "competencies": [
          "Ability to apply the main theoretical concepts of probability and distributions autonomously when working on concrete problems.",
          "Perform autonomously common data manipulation and analysis tasks, such as reading and combining datasets, creating new variables, drawing a sample and performing simple statistical analyses by means of calculation and by means of R.",
          "Describe and assess the results of their own analysis and considerations in an individual way."
        ],
        "contents": [
          "The first part of the course covers probability theory.",
          "Students will be introduced to concepts such as probability, random variable, stochastic process, and distribution.",
          "They will also learn how to describe random variables and stochastic processes by means of their distributions, both in the case of one variable at a time and in the case of several variables at the same time.",
          "They will also be provided with examples of the most common distributions, both discrete and continuous.",
          "Students will learn how these distributions can be characterized by probability measures, such as the mean and the variance.",
          "In the case of joint distributions, students will be introduced to concepts essential to statistical analysis such as covariance, correlation and statistical independence.",
          "Finally, students will learn the most important asymptotic results, which will be used later to analyze data in all subsequent econometric courses. These results will not be proven, but instead illustrated through simulations.",
          "The second part of the course is an introduction to the statistical analysis of data. This includes the choice of a statistical model to describe specific data sets along with methods for validating this choice. The focal point in this part of the course is an introduction to estimation and hypothesis testing in simple statistic models. Another goal in this part of the course is to introduce R as a piece of software for statistical analysis of data."
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "lectures": 60,
        "preparation": 70,
        "tutorials": 28,
        "preparation_tutorials": 82,
        "exam": 30,
        "total": 270
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "40pct: midterm exam. 1 hour. 60pct: written exam. 2 hours.",
        "grading": "point",
        "aids": "none"
      },
      "education_ids": [
        182
      ],
      "extended_description": "Statistics play a fundamental and central role in the quantitative aspect of an education in Economics and/or Finance. The purpose of this course is to provide students with the skills and knowledge required to perform tasks such as the collection and analysis of sample- and population-based data. These skills and knowledge provide the foundation on which students can build solid quantitative competencies in subsequent quantitative courses such as Econometrics."
    },
    {
      "internal_id": 1146,
      "code": "280191U021",
      "name": "Videregående calculus for ingeniører",
      "contents": {
        "type": "A",
        "objectives": [
          "Beskrive funktioners geometri",
          "Udføre interpolation samt numerisk integration og differentiation af funktioner i én dimension",
          "Identificere og beskrive kurver, herunder fastlægge længde og krumning",
          "Beskrive og analysere vektorfelter og faseportrætter.",
          "Beskrive Jacobi- og Hessian-matricer for vektor- hhv. skalarfelter",
          "Udføre løsning af homogene og inhomogene lineære differentiallignings systemer samt give geometrisk tolkning heraf",
          "Indentificere lokale ekstrema og saddelpunkter for funktioner af flere variable",
          "Udføre integration i to og tre dimensioner, analytisk såvel som numerisk",
          "Formulere randværdiproblemer i to og tre dimensioner ved anvendelse af Green og Gauss’ sætninger",
          "Beskrive og evaluere plane og krumme fladers geometri, herunder bestemme normal- og tangentvektorer",
          "Udføre analyse i kartesiske, polære, cylindriske, sfæriske og generelle krumlinede koordinatsystemer",
          "Analysere kurver og fladers geometri og implementere parameterisering",
          "Programmere løsning og visualisering af problemer relateret til krumme kurver og fladers geometri."
        ],
        "contents": [
          "Funk­tioner i én dimension: Sekanter og tangenter, interpolation vha. Lagrange-poly­nomier og splines, numerisk integration og differentiation.",
          "Kurver: Integration langs kurver, kurvelængde, krumning.",
          "Funktioner i flere dimensioner: Vektor­felter, faseportrætter, geometrisk tolkning, Jacobi-matricen, Hessian-matricen, lokale ekstrema, saddelpunkter.",
          "Lingningssystemer: Geometrisk tolkning af line­ære ligningssystemer i planen, homogene ligningssystemer, inhomogene lig­nings­syst­emer.",
          "Plan geometri: Planintegraler, polære koordinater, trans­formation af planintegraler, Green’s sætning, numerisk integration og differen­tiation.",
          "Rumlig geo­metri: Volumener og flader i rummet, normal- og tangent­vektorer til flader; kon­kave og konvekse flader; cylindriske og sfæriske koordinater; fladeintegraler, rum­integraler, Gauss’ divergenssætning. Parameteri­sering og visualisering af geometri."
        ]
      },
      "size": 10,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "Der stilles en ugentlig afleveringsopgave i den første halvdel af kurset – 7 opgaver i alt."
      ],
      "exam": {
        "prerequisites": "4 of the mandatory assignments",
        "type": "Mundtlig. 20 minutter. Karaktergivning sker ud fra det skriftlige projektarbejde (i anden halvdel af kurset) samt en afsluttende, mundtlig prøve (curriculum+projekt) i juni. Der gives én samlet karakter på baggrund af projektarbejdet (50 %) og den mundtlige prøve (50 %).",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        183
      ],
      "extended_description": "Kurset skal give den studerende en videregående viden om calculus, herunder vektoranalyse. Denne viden gøres operationel gennem løsning af problemer relateret til byggeri og infrastruktur samt bygningsdesign, analytisk såvel som numerisk. Et af de primære formål er at forberede den studerende til at kunne løse matematiske problemer og formulere matematiske modeller relateret til faststofmekanik og fluidmekanik, herunder kontinuummekanik. Et andet formål er at forberede den studerende til at kunne analysere problemer inden for optimering samt geometri og formgivning, og endelig tjener kurset som forberedelse til analyse af dynamiske processer."
    },
    {
      "internal_id": 1147.1,
      "code": "Web Programming",
      "name": "Web Programming",
      "contents": {
        "type": "B",
        "knowledge": [
          "relevant internet and web protocols",
          "data storage, modelling, exchange and security",
          "quality assurance.",
          "development methods in web development",
          "web architecture and design patterns."
        ],
        "skills": [
          "master all phases of development including planning, developing and implementing web applications based on specific development wishes, as well as evaluate practice-based and theoretical problems and select and justify relevant solution models in relation to the development of web applications",
          "evaluate and justify the choice of a suitable programming language and relevant methods for the implementation of web applications",
          "master a suitable programming language for the development of web applications",
          "use and model data sources as well as justify proposals for solutions",
          "implement and evaluate web user interfaces as well as justify and communicate solution",
          "proposals to collaborative partners and users",
          "use relevant theories and methods for the quality assurance of all phases of development."
        ],
        "competencies": [
          "handle complex web development and must be able to handle complex and development-oriented situations in web development",
          "independently enter into professional and interdisciplinary cooperation with a professional approach and take responsibility within the framework of professional ethics in relation to web programming",
          "identify and structure their own learning needs and develop personal skills and competencies in relation to web programming."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 20,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "unknown",
        "grading": "unknown",
        "aids": "unknown"
      },
      "education_ids": [
        183,
        184,
        186
      ],
      "extended_description": "unknown"
    },
    {
      "code": "22100",
      "name": "R for Bio Data Science",
      "contents": {
        "type": "A",
        "objectives": [
          "Explain why reproducible data analysis is important, as well as identify relevant challenges and explain replicability versus reproducibility",
          "Describe the components of a reproducible data analysis",
          "Use Tidyverse R to perform exploratory data analysis (EDA) for data insights, including using ggplot to visualize multilayer data from e.g. high-througput-omics platforms",
          "Use Tidyverse R to perform data cleansing, transformation, visualization and communication",
          "Use RStudio and git/GitHub for collaborative analysis projects",
          "Perform and interpret standard dimension reduction and clustering techniques, as well as basic statistical tests and models",
          "Train and apply a machine learning model based on a neural network with Keras / Tensorflow in R",
          "Prepare a dynamic rmarkdown report / presentation for a bio data analysis",
          "Prepare a simple R package",
          "Prepare a simple shiny app",
          "Design and execute a bio data science project focusing on reproducibility, incl. independently using online resources to seek information about application and technical details of state-of-the-art data science tools",
          "Analyze an already performed bio data science project with a view to assessing methods, methods and reproducibility"
        ],
        "contents": [
          "The overall aim of the course is to provide students with a data science toolbox of concrete skills in modern bio data science in Tidyverse R via the RStudio IDE (Integrated Developer Environment).",
          "There will be a strong application-oriented focus on moving from a messy to a clean data set.",
          "Followed by data transformation, gaining insight through EDA (Exploratory Data Analysis) and communication through data visualisation using ggplot. All in the context of reproducible data analysis.",
          "Furthermore, the focus will be on the design and organisation of a modern bio data science project in Tidyverse R, incl. using git/GitHub.",
          "In this course we will work with biology-related data sets only."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The exam consists of 3 part exams: 1) A bio-data-science project prepared in groups where all members are responsible for all parts of the project. Active participation in the group work and handing in the project on time are prerequisites for attending the exam. 2) A oral group presentation of the project 3) 2 hours MCQ exam based on the general course learning objectives. The final grade is based on an overall assessment of all three part exams.",
        "grading": "point",
        "aids": "Written works of reference are permitted"
      },
      "education_ids": [
        188
      ],
      "extended_description": "Modern bio data science in Tidyverse R, data -cleaning, -wrangling, -visualisation and -communication. Machine learning, statistics and deep Learning (neural networks with keras / tensorflow) in context with bioinformatics / computational biology. Tidyverse R, RStudio, Rmarkdown, dplyr, ggplot, reproducible bio data analysis, rstudio.cloud, shinyapps.io, R-packages, git/GitHub, bio data science project organisation all with an applied focus."
    },
    {
      "code": "KAN-CIHCO2007U",
      "name": "Managerial Statistics for Innovation",
      "contents": {
        "type": "A",
        "objectives": [
          "The objective is to introduce sensibly basics of descriptive and inferential statistics and build both a theoretical foundation and a practical knowledge about how to implement statistics in real analysis-based situations.",
          "In this course attendants will learn about foundations of statistics, in particular: descriptive statistics (i.e. summary statistics), hypothesis testing (T-Test, Proportional Test, differences in groups’ distributions, etc.), goodness of fit (simple linear regression), multiple regression analysis and other more sophisticated estimators.",
          "Emphasis will be placed on interpretations of the statistics and applicability. Thus, attendants will apply statistical concepts to real data and touch typical data analyst challenges and ways out.",
          "Understand the theoretical foundations of descriptive statistics",
          "Understand the theoretical foundations of inferential statistics",
          "Apply in practice descriptive statistics using real data"
        ],
        "contents": [
          "Ideally the course will cover the basics of statistics in order to provide the attendants with a solid basis on both descriptive and inferential statistics. Despite the introductory nature of the course, attendant will be exposed to primary techniques of data analysis useful in real-life settings. Ideally, the first part of the course will be focused on Descriptive Statistics, which will be based on the following main questions:",
          "How are data described? Which type of data are we in front of?",
          "How do we define a variable?",
          "What is a sample? What is the difference between sample and population?",
          "What are the central tendency characteristics of a variable?",
          "How can we describe the dispersion of a variable? And its shape?",
          "In the second part of the course, attendants will be introduced to foundations of Inferential statistics [...]",
          "What is the difference between two groups? How to assess it?",
          "What is the relationship between two variables?",
          "How do we create predictions?",
          "What is an estimator?",
          "How do we pick the correct estimator to predict our effect?",
          "STATA (12.0 version or more recent) will be the software of reference for this course. Despite attendants will be instructed on the useful commands throughout the development of the course, attendants are still expected to familiarize themselves with basic ability in this software, such as uploading a file, save a DO and DTA file, and similar basic commands. MS Excel will be also used, in particular at the beginning of the seminar for the Descriptive Statistics section."
        ]
      },
      "size": 7.5,
      "time": {
        "absolute": true,
        "confrontation": 30,
        "reading": 111,
        "exam_preparation": 65
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Home assignment - written product. Individual exam. The exam will imply the following activities: 1. Create a dataset 2. Define one of few main research questions to be addressed within the scope of the database 3. Apply the appropriate statistical techniques learned during the course to address the questions proposed at point #2. 4. Provide statistical and economical considerations on the results of the analysis.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        189
      ],
      "extended_description": "unknown"
    },
    {
      "code": "280201U001",
      "name": "Digitale værktøjer i byggeriet",
      "contents": {
        "type": "A",
        "objectives": [
          "Definere problemer og beskrive løsninger relateret til parmetrisk generative design i byggeriet.",
          "Beskrive sammenhængen mellem tekniske og arkitektoniske krav i performancebaseret design.",
          "Beskrive brugen af parametrisk generative modelleringsmetoder til analyse af store komplekse bygværker.",
          "Anvende datastrukturer (punkter, vektorer, linjer, kurver, flader) og programmering i parametrisk design.",
          "Foretage parametrisk generativ modellering og performancebaseret design som en integreret del af den kreative formfremstillingsproces i den konceptuelle designfase.",
          "Diskutere og vurdere anvendelse af digitale værktøjer, digitale produktionsværktøjer, samt VR og AR modeller."
        ],
        "contents": [
          "Kursets formål er at introducere studerende til digitale værktøjer, som er egnet til at kvalificere designbeslutninger vedrørende bygninger og bygværkers form og performance i den konceptuelle fase af en integreret designproces.",
          "De studerende opnår færdigheder til at kunne opstille parametriske og generative modeller koblet med simuleringsværktøjer til udvikling af integreret strukturelt og arkitektonisk design med hensyn til arkitektonisk form, funktion, materiale, konstruktionsdesign, energiforbrug, indeklima- og komfortdesignkriterier samt akustiskparametre, herunder hvorledes disse resultater kan kommunikeres til arkitekter på en brugbar måde.",
          "De studerende bliver desuden introduceret til viden of forståelse af effektiv informationsudveksling mellem forskellige platforme ved brug af egen programmering.",
          "De studerende introduceres også til metoder til digital produktion af protyper af komplekse geometrier, samlingsdetaljer, samt afprøvning af byggeprocesser.",
          "Endeligt vil brugen af virtual reality (VR) og augmented reality (AR) metoder i byggeriet blive introduceret. ",
          "Digitale værktøjer: REVIT+Dynamo, Rhino+Grasshopper, kobling med simuleringsvæktøjer, API programmering/introduktion til C# programmering/Python.",
          "Generativ parametrisk modellering: opstillinger af algoritmer med punkter, vektorer, matricer, linjer, kurver, flader; manipulering af datastrukturer; aritmetiske og logiske operatorer, forgreninger, løkker og vektorisering; organisering af kode ved brug af scripts og funktioner; fejlfinding og dokumentation; grafisk visualisering af data. Digital produktion: opstillingen af digitale modeller, der kan overføres til et digitalt produktionsværktøj som laserskærer, fræser samt 3D-print.",
          "VR og AR metoder i byggeriet: Generering af VR model, repræsentation af arkitektoniske elementer. "
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Hjemmeopgave. Aflevering af maks. 3 opgaver. Opgave A: Generativ parametrisk modellering; Opgave B: Programmering; Opgave C: Digital produktion. Der foretages løbende evaluering af kurset på baggrund af afleverede opgaver.",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        190
      ],
      "extended_description": "unknown"
    },
    {
      "code": "N340105101",
      "name": "Introduction to programming",
      "contents": {
        "type": "A",
        "objectives": [
          "giving the competence to plan and execute computer programs",
          "knowledge of common programming methods",
          "developing skills in programming in different types of programming languages",
          "developing skills in software development",
          "developing skills in constructing bigger software systems",
          "developing skills in deciding and justify professional decisions",
          "developing skills in describing, formulating and disseminating problems and results to either other professional or non-specialists or collaborative partners and users",
          "giving the competence to handle complex and development-oriented situations in study and work contexts",
          "giving the competence to identify one's own needs for learning and structure one's own learning in different learning environments",
          "giving the competence to design higher level software architectures",
          "design models for concrete problems;",
          "devise a program structure based on the model;",
          "implement the planned program in the concrete programming language used;",
          "find and use adequate elements in the program library belonging to the  language;",
          "plan and execute a testing of the program;",
          "design and implement recursive solutions of problems;",
          "design and implement abstract data types;",
          "use basic tree structures and algorithms for these."
        ],
        "contents": [
          "The basic structuring tools sequence, repetition, conditional instruction and subprogram.",
          "Fundamental data structures such as lists, maps, and trees.",
          "Structured programming techniques, including examples and applications.",
          "Recursion and recursive data structures.",
          "Examples of abstract data types and their realization.",
          "The course is taught in Python."
        ]
      },
      "size": 10,
      "time": {
        "absolute": true,
        "intro_phase": 28,
        "tutorials": 28,
        "laboratories": 10
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Portfolio exam with oral defense. Portfolio exam consisting of small individual assignments, a group project and an oral defence  (with written report and oral defense).",
        "grading": "point",
        "aids": "replace"
      },
      "education_ids": [
        191
      ],
      "extended_description": "unknown"
    },
    {
      "code": "01006",
      "name": "Advanced Engineering Mathematics 1",
      "contents": {
        "type": "A",
        "objectives": [
          "The course content is the mathematical basis for a broad range of technical fields and also provides a starting point for further studies in mathematics and applied mathematics.",
          "The dominating theme of the course is linearity.",
          "The goal is to give students the ability to employ fundamental tools of mathematics in theoretical studies as well as in applied thematic exercises and projects.",
          "The use of modern computer software supports both of these aspects.",
          "use the algebraic and the geometric representation of complex numbers including the complex exponential function.",
          "use matrix algebra and Gaussian elimination for solving systems of linear equations.",
          "analyse and explain the linear structure of solution sets in vector spaces.",
          "perform simple calculations with the elementary functions including their inverse functions.",
          "use Taylor's formulas for approximizations and limits.",
          "solve elementary first and second order differential equations and systems of differential equations.",
          "calculate extremas for multivariate functions, especially on domains with boundary",
          "parameterise elementary curves, surfaces and massive solids and calculate elementary curve, surface and volume integrals.",
          "use Gauss's and Stokes's theorems in simple applications.",
          "use mathematical terminology and reasoning in oral as well as written presentation.",
          "coordinate joint work in groups around thematic exercises and applications.",
          "use computer algebraic systems (at present Maple) for solving and visualisation of mathematical problems."
        ],
        "contents": [
          "Linear equations and linear maps.",
          "Matrix algebra.",
          "Vektor spaces.",
          "Eigenvalue problems.",
          "Symmetric and orthogonal matrices.",
          "Complex numbers.",
          "Linear differential equations.",
          "Standard functions.",
          "Functions of one and several real variables: linear approximations and partial derivatives, Taylor expansions and quadratic forms, extrema and level curves, line, surface and volume integrals. Vector fields, Gauss' and Stokes' theorem.",
          "Applications of MAPLE in the above areas. Examples of applications in the engineering sciences."
        ]
      },
      "size": 20,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "1-hour current tests and 3-hours closing tests",
        "grading": "point",
        "aids": "replace"
      },
      "education_ids": [
        192
      ],
      "extended_description": "unknown"
    },
    {
      "code": "B-BIC-K2-3",
      "name": "IT System Development",
      "contents": {
        "type": "B",
        "knowledge": [
          "IT system development.",
          "Object-oriented programming, visual programming and BIM",
          "Databases"
        ],
        "skills": [
          "Formulate specific requirements for a small-scale IT system.",
          "Master the basic techniques of object-oriented programming",
          "Develop applications by the use of a development tool/environment",
          "Structuring and modelling of relational databases"
        ],
        "competencies": [
          "Demonstrate a basic understanding of the software development process",
          "Develop small prototypes of programs."
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "absolute": true,
        "total": 150
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written or oral exam",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        193
      ],
      "extended_description": "unknown"
    },
    {
      "code": "42112",
      "name": "Mathematical Programming Modelling",
      "contents": {
        "type": "A",
        "objectives": [
          "To enable students to solve large operations research problems using mathematical models and standard software.",
          "This entails formulating a mathematical optimization model, using standard modelling language Julia/JuMP and solvers to solve the model, evaluate alternatives, and finally describe results and conclusions in a report.",
          "Since the various standard programs for mathematical modelling are rather similar, the knowledge gained is not restricted to the software employed here.",
          "Analyze decision problems.",
          "Formulate Linear Programs in standard modeling languages.",
          "Formulate Integer Linear Programs in standard modeling languages.",
          "Implement the mathematical models such that standard optimization solvers can find optimal solutions to the decision problems.",
          "Analyze the solutions found.",
          "Describe the problems and models in a report.",
          "Describe solutions and illustrate them in a report",
          "Evaluate advantages and disadvantages with the solutions found by the software."
        ],
        "contents": [
          "The theoretical background from Introduction to Operations Research is supplemented by introducing a standard program modelling system for formulating and solving mathematical models, i.e. both Linear Programming models and Integer Linear Programming models.",
          "The first 7-9 days of the course are used to introduce the modelling language.",
          "The rest of the course is the used to model and solve a number of semi-realistic optimisation problems."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Report / Dissertation. The final assignment can be made by teams of up to 2 persons, where the individual parts are marked. Furthermore, a small individual written test is given.",
        "grading": "point",
        "aids": "unknown"
      },
      "education_ids": [
        194
      ],
      "extended_description": "unknown"
    },
    {
      "code": "42114",
      "name": "Integer Programming",
      "contents": {
        "type": "A",
        "objectives": [
          "Optimisation is one of the most important components of data science.",
          "Integer Programming lets you estabish optimal or near-optimal solutions for complex decision support problems within production, energy, transport etc.",
          "This courses gives the students a thorough introduction to formulating and solving integer programming problems.",
          "Participants will be able to formulate integer programming problems as well as applying it to a wide range of optimisationsproblem in order to utilise your data to its full capacity.",
          "define what a mixed integer program, an integer program and a binary program is compared to a linear program.",
          "identify possible solution approaches for a integer programming (IP) problem.",
          "construct an integer programming model with objective function, constraints and variable definitions based on a simple textual description of the problem.",
          "Define a relaxation and mention examples of relaxations from the course.",
          "construct a branch-and-bound (B&B) algorithm for a standard IP problem.",
          "give the meaning and contents of the central theorems within integer programming as selected in the course.",
          "define and describe the use of valid inequalities and cuts in general and specifically with a given simple IP problem.",
          "describe the challenges when making the extension from valid inequality and cuts to a branch-and-cut algorithm (B&C).",
          "describe on a high level the applications of B&B, B&C, upper and lower bounds when implementing an efficient solution method for simple IP problems (especially for TSP).",
          "construct a dynamic programming algorithm for a simple problem based on 'principle of optimality', 'stage' and 'state.",
          "define Lagrangian relaxation for an IP problem and be able to use Lagrangian relaxation on a simpel IP problem."
        ],
        "contents": [
          "Relaxation, duality, Branch & Bound, Cutting planes, Branch & Cut, Lagrange relaxation, Dynamic Programming, Strong Valid Inequalities.",
          "Application examples: project planning, vehicle routing, and production planning."
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "The course is evaluated by a written exam. Participation in the written exam requires the students pass a project. The project can be made in groups of up to three persons. A project is passed if a score of at least 50 on a 0-100 scale is obtained. 4 hours",
        "grading": "point",
        "aids": "all"
      },
      "education_ids": [
        194
      ],
      "extended_description": "unknown"
    },
    {
      "code": "PLLANK20103",
      "name": "Geocomputation and Spatial Analytics",
      "contents": {
        "type": "B",
        "knowledge": [
          "must have knowledge on the differences between object-based and raster-based geographic information and corresponding analytics methods",
          "must have knowledge of the calculation of the different characteristics of point patterns",
          "must have knowledge of the calculation of the different characteristics of networks",
          "must understand fundamental methods from spatial statistics (spatial autocorrelation, spatial regression, spatial interpolation)",
          "must have knowledge of the application of the above-mentioned techniques in the context of multi-criteria evaluation and decision support systems",
          "must have knowledge of widely used software packages for the above-mentioned techniques"
        ],
        "skills": [
          "must be able to use software to process and analyse point patterns",
          "must be able to use software to perform network analysis tasks",
          "must be able to use software to apply spatial statistics methods",
          "must be able to automate analysis workflows",
          "must be able to evaluate the strengths and weaknesses of the different geoprocessing methods and tools for a given task "
        ],
        "competencies": [
          "must be able to support interdisciplinary teams in geocomputation and spatial analytics tasks, including the selection, application, and explanation of the respective techniques",
          "must be able to identify suitable geocomputation and spatial analytics techniques and apply them in relation to problems at different spatial scales"
        ],
        "contents": [
          "unknown"
        ]
      },
      "size": 5,
      "time": {
        "unknown": "unknown"
      },
      "mandatory_activities": [
        "unknown"
      ],
      "exam": {
        "prerequisites": "unknown",
        "type": "Written or oral exam",
        "grading": "boolean",
        "aids": "unknown"
      },
      "education_ids": [
        195
      ],
      "extended_description": "unknown"
    }
  ]
}